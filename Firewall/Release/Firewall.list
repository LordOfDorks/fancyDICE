
C:\Git\fancyDICE\Firewall\Release\Firewall.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000000  08000200  08000200  00001028  2**0
                  CONTENTS
  1 .callgate     00000254  08000200  08000200  00000200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000aa8  08000458  08000458  00000458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000120  08000f00  08000f00  00000f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001020  08001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001024  08001024  00001024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000000  20000000  20000000  00001028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000002c  20000000  08001028  00010000  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000002c  08001028  0001002c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY
 10 .debug_info   00005e68  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000cf4  00000000  00000000  00006ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000258  00000000  00000000  00007bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001f8  00000000  00000000  00007e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000016a0  00000000  00000000  00008004  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001a47  00000000  00000000  000096a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0000b0eb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000088c  00000000  00000000  0000b168  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .callgate:

08000200 <CallGate-0x4>:
 8000200:	00000000 	.word	0x00000000

08000204 <CallGate>:

DICE_HAL DiceHAL = {0};
static uint32_t CallGateResult;

__attribute__((section(".callgate"))) unsigned int CallGate(pDICE_Context ctx)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b0b2      	sub	sp, #200	; 0xc8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
    CallGateResult = 0;
 800020c:	4b8e      	ldr	r3, [pc, #568]	; (8000448 <CallGate+0x244>)
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]

    if((ctx == NULL) || (ctx->magic != DICE_MAGIC))
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d004      	beq.n	8000222 <CallGate+0x1e>
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a8b      	ldr	r2, [pc, #556]	; (800044c <CallGate+0x248>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d003      	beq.n	800022a <CallGate+0x26>
    {
        CallGateResult = 1;
 8000222:	4b89      	ldr	r3, [pc, #548]	; (8000448 <CallGate+0x244>)
 8000224:	2201      	movs	r2, #1
 8000226:	601a      	str	r2, [r3, #0]
        goto Cleanup;
 8000228:	e107      	b.n	800043a <CallGate+0x236>
    }
    switch(ctx->fid)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	791b      	ldrb	r3, [r3, #4]
 800022e:	2b04      	cmp	r3, #4
 8000230:	f200 80fe 	bhi.w	8000430 <CallGate+0x22c>
 8000234:	a201      	add	r2, pc, #4	; (adr r2, 800023c <CallGate+0x38>)
 8000236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800023a:	bf00      	nop
 800023c:	08000251 	.word	0x08000251
 8000240:	08000269 	.word	0x08000269
 8000244:	080002b3 	.word	0x080002b3
 8000248:	080002dd 	.word	0x080002dd
 800024c:	08000383 	.word	0x08000383
    {
    case DICE_FID_NOOP:

        ctx->result = DICE_RC_OK;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2200      	movs	r2, #0
 8000254:	731a      	strb	r2, [r3, #12]
        if(ctx->paramSize != 0)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	689b      	ldr	r3, [r3, #8]
 800025a:	2b00      	cmp	r3, #0
 800025c:	f000 80ec 	beq.w	8000438 <CallGate+0x234>
        {
            ctx->result = DICE_RC_Bad_Parameter;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	2202      	movs	r2, #2
 8000264:	731a      	strb	r2, [r3, #12]
        }
        break;
 8000266:	e0e7      	b.n	8000438 <CallGate+0x234>
    case DICE_FID_HalHandleTable:
        if(ctx->paramSize != sizeof(DICE_PARAM_HalHandleTable))
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	2b08      	cmp	r3, #8
 800026e:	d003      	beq.n	8000278 <CallGate+0x74>
        {
            ctx->result = DICE_RC_Bad_Parameter;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2202      	movs	r2, #2
 8000274:	731a      	strb	r2, [r3, #12]
            if(ctx->u.HalHandleTable.in.handleTable.phUart != (UART_HandleTypeDef*)-1)
                DiceHAL.phUart = ctx->u.HalHandleTable.in.handleTable.phUart;
            memcpy(&ctx->u.HalHandleTable.out.handleTable, &DiceHAL, sizeof(DICE_HAL));
            ctx->result = DICE_RC_OK;
        }
        break;
 8000276:	e0e0      	b.n	800043a <CallGate+0x236>
            if(ctx->u.HalHandleTable.in.handleTable.phRng != (RNG_HandleTypeDef*)-1)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	691b      	ldr	r3, [r3, #16]
 800027c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000280:	d003      	beq.n	800028a <CallGate+0x86>
                DiceHAL.phRng = ctx->u.HalHandleTable.in.handleTable.phRng;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	691b      	ldr	r3, [r3, #16]
 8000286:	4a72      	ldr	r2, [pc, #456]	; (8000450 <CallGate+0x24c>)
 8000288:	6013      	str	r3, [r2, #0]
            if(ctx->u.HalHandleTable.in.handleTable.phUart != (UART_HandleTypeDef*)-1)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000292:	d003      	beq.n	800029c <CallGate+0x98>
                DiceHAL.phUart = ctx->u.HalHandleTable.in.handleTable.phUart;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	695b      	ldr	r3, [r3, #20]
 8000298:	4a6d      	ldr	r2, [pc, #436]	; (8000450 <CallGate+0x24c>)
 800029a:	6053      	str	r3, [r2, #4]
            memcpy(&ctx->u.HalHandleTable.out.handleTable, &DiceHAL, sizeof(DICE_HAL));
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3310      	adds	r3, #16
 80002a0:	2208      	movs	r2, #8
 80002a2:	496b      	ldr	r1, [pc, #428]	; (8000450 <CallGate+0x24c>)
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 fe0b 	bl	8000ec0 <memcpy>
            ctx->result = DICE_RC_OK;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2200      	movs	r2, #0
 80002ae:	731a      	strb	r2, [r3, #12]
        break;
 80002b0:	e0c3      	b.n	800043a <CallGate+0x236>
    case DICE_FID_GetRandom:
        if(ctx->paramSize != sizeof(DICE_PARAM_GetRandom))
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	689b      	ldr	r3, [r3, #8]
 80002b6:	2b08      	cmp	r3, #8
 80002b8:	d003      	beq.n	80002c2 <CallGate+0xbe>
        {
            ctx->result = DICE_RC_Bad_Parameter;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2202      	movs	r2, #2
 80002be:	731a      	strb	r2, [r3, #12]
        }
        else
        {
            ctx->result = GetRandom(ctx->u.GetRandom.in.entropy, ctx->u.GetRandom.in.size);
        }
        break;
 80002c0:	e0bb      	b.n	800043a <CallGate+0x236>
            ctx->result = GetRandom(ctx->u.GetRandom.in.entropy, ctx->u.GetRandom.in.size);
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	691a      	ldr	r2, [r3, #16]
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4619      	mov	r1, r3
 80002cc:	4610      	mov	r0, r2
 80002ce:	f000 fdbf 	bl	8000e50 <GetRandom>
 80002d2:	4603      	mov	r3, r0
 80002d4:	461a      	mov	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	731a      	strb	r2, [r3, #12]
        break;
 80002da:	e0ae      	b.n	800043a <CallGate+0x236>
    case DICE_FID_SHA256:
        if(ctx->paramSize != sizeof(DICE_PARAM_SHA256))
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	689b      	ldr	r3, [r3, #8]
 80002e0:	2b20      	cmp	r3, #32
 80002e2:	d003      	beq.n	80002ec <CallGate+0xe8>
        {
            ctx->result = DICE_RC_Bad_Parameter;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2202      	movs	r2, #2
 80002e8:	731a      	strb	r2, [r3, #12]
            {
                memcpy(digestOut, ctx->u.SHA256.out.digest, sizeof(ctx->u.SHA256.out.digest));
            }
            ctx->result = DICE_RC_OK;
        }
        break;
 80002ea:	e0a6      	b.n	800043a <CallGate+0x236>
            uint8_t* digestOut = ctx->u.SHA256.in.digest;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	69db      	ldr	r3, [r3, #28]
 80002f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            DICE_SHA256_CONTEXT context = {0};
 80002f4:	f107 0308 	add.w	r3, r7, #8
 80002f8:	2270      	movs	r2, #112	; 0x70
 80002fa:	2100      	movs	r1, #0
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 fdea 	bl	8000ed6 <memset>
            Dice_SHA256_Init(&context);
 8000302:	f107 0308 	add.w	r3, r7, #8
 8000306:	4618      	mov	r0, r3
 8000308:	f000 f9ca 	bl	80006a0 <Dice_SHA256_Init>
            for(uint32_t n = 0; n < ctx->u.SHA256.in.segments; n++)
 800030c:	2300      	movs	r3, #0
 800030e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000312:	e017      	b.n	8000344 <CallGate+0x140>
                Dice_SHA256_Update(&context, ctx->u.SHA256.in.data[n], ctx->u.SHA256.in.size[n]);
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	695a      	ldr	r2, [r3, #20]
 8000318:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	4413      	add	r3, r2
 8000320:	6819      	ldr	r1, [r3, #0]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	699a      	ldr	r2, [r3, #24]
 8000326:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	4413      	add	r3, r2
 800032e:	681a      	ldr	r2, [r3, #0]
 8000330:	f107 0308 	add.w	r3, r7, #8
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fb73 	bl	8000a20 <Dice_SHA256_Update>
            for(uint32_t n = 0; n < ctx->u.SHA256.in.segments; n++)
 800033a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800033e:	3301      	adds	r3, #1
 8000340:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	691a      	ldr	r2, [r3, #16]
 8000348:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800034c:	429a      	cmp	r2, r3
 800034e:	d8e1      	bhi.n	8000314 <CallGate+0x110>
            Dice_SHA256_Final(&context, ctx->u.SHA256.out.digest);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	f103 0210 	add.w	r2, r3, #16
 8000356:	f107 0308 	add.w	r3, r7, #8
 800035a:	4611      	mov	r1, r2
 800035c:	4618      	mov	r0, r3
 800035e:	f000 fc1f 	bl	8000ba0 <Dice_SHA256_Final>
            if(digestOut != NULL)
 8000362:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000366:	2b00      	cmp	r3, #0
 8000368:	d007      	beq.n	800037a <CallGate+0x176>
                memcpy(digestOut, ctx->u.SHA256.out.digest, sizeof(ctx->u.SHA256.out.digest));
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	3310      	adds	r3, #16
 800036e:	2220      	movs	r2, #32
 8000370:	4619      	mov	r1, r3
 8000372:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8000376:	f000 fda3 	bl	8000ec0 <memcpy>
            ctx->result = DICE_RC_OK;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2200      	movs	r2, #0
 800037e:	731a      	strb	r2, [r3, #12]
        break;
 8000380:	e05b      	b.n	800043a <CallGate+0x236>
    case DICE_FID_HMACSHA256:
        if(ctx->paramSize != sizeof(DICE_PARAM_HMACSHA256))
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	689b      	ldr	r3, [r3, #8]
 8000386:	2b20      	cmp	r3, #32
 8000388:	d003      	beq.n	8000392 <CallGate+0x18e>
        {
            ctx->result = DICE_RC_Bad_Parameter;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2202      	movs	r2, #2
 800038e:	731a      	strb	r2, [r3, #12]
            {
                memcpy(digestOut, ctx->u.HMACSHA256.out.hmac, sizeof(ctx->u.HMACSHA256.out.hmac));
            }
            ctx->result = DICE_RC_OK;
        }
        break;
 8000390:	e053      	b.n	800043a <CallGate+0x236>
            uint8_t* digestOut = ctx->u.HMACSHA256.in.hmac;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000396:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            DICE_HMAC_SHA256_CTX context = {0};
 800039a:	f107 0308 	add.w	r3, r7, #8
 800039e:	22b0      	movs	r2, #176	; 0xb0
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 fd97 	bl	8000ed6 <memset>
            Dice_HMAC_SHA256_Init(&context, ctx->u.HMACSHA256.in.key, ctx->u.HMACSHA256.in.keySize);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	6919      	ldr	r1, [r3, #16]
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	695a      	ldr	r2, [r3, #20]
 80003b0:	f107 0308 	add.w	r3, r7, #8
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 f8c6 	bl	8000546 <Dice_HMAC_SHA256_Init>
            for(uint32_t n = 0; n < ctx->u.HMACSHA256.in.segments; n++)
 80003ba:	2300      	movs	r3, #0
 80003bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80003c0:	e017      	b.n	80003f2 <CallGate+0x1ee>
                Dice_HMAC_SHA256_Update(&context, ctx->u.HMACSHA256.in.data[n], ctx->u.HMACSHA256.in.dataSize[n]);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	69da      	ldr	r2, [r3, #28]
 80003c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	4413      	add	r3, r2
 80003ce:	6819      	ldr	r1, [r3, #0]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	6a1a      	ldr	r2, [r3, #32]
 80003d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	4413      	add	r3, r2
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	f107 0308 	add.w	r3, r7, #8
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 f928 	bl	8000638 <Dice_HMAC_SHA256_Update>
            for(uint32_t n = 0; n < ctx->u.HMACSHA256.in.segments; n++)
 80003e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80003ec:	3301      	adds	r3, #1
 80003ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	699a      	ldr	r2, [r3, #24]
 80003f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d8e1      	bhi.n	80003c2 <CallGate+0x1be>
            Dice_HMAC_SHA256_Final(&context, ctx->u.HMACSHA256.out.hmac);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	f103 0210 	add.w	r2, r3, #16
 8000404:	f107 0308 	add.w	r3, r7, #8
 8000408:	4611      	mov	r1, r2
 800040a:	4618      	mov	r0, r3
 800040c:	f000 f924 	bl	8000658 <Dice_HMAC_SHA256_Final>
            if(digestOut != NULL)
 8000410:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000414:	2b00      	cmp	r3, #0
 8000416:	d007      	beq.n	8000428 <CallGate+0x224>
                memcpy(digestOut, ctx->u.HMACSHA256.out.hmac, sizeof(ctx->u.HMACSHA256.out.hmac));
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	3310      	adds	r3, #16
 800041c:	2220      	movs	r2, #32
 800041e:	4619      	mov	r1, r3
 8000420:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8000424:	f000 fd4c 	bl	8000ec0 <memcpy>
            ctx->result = DICE_RC_OK;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2200      	movs	r2, #0
 800042c:	731a      	strb	r2, [r3, #12]
        break;
 800042e:	e004      	b.n	800043a <CallGate+0x236>
    default:
        ctx->result = DICE_RC_Bad_FID;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2201      	movs	r2, #1
 8000434:	731a      	strb	r2, [r3, #12]
        break;
 8000436:	e000      	b.n	800043a <CallGate+0x236>
        break;
 8000438:	bf00      	nop
    }

Cleanup:
    return CallGateResult;
 800043a:	4b03      	ldr	r3, [pc, #12]	; (8000448 <CallGate+0x244>)
 800043c:	681b      	ldr	r3, [r3, #0]
}
 800043e:	4618      	mov	r0, r3
 8000440:	37c8      	adds	r7, #200	; 0xc8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000024 	.word	0x20000024
 800044c:	65636944 	.word	0x65636944
 8000450:	2000001c 	.word	0x2000001c

Disassembly of section .text:

08000458 <__do_global_dtors_aux>:
 8000458:	b510      	push	{r4, lr}
 800045a:	4c05      	ldr	r4, [pc, #20]	; (8000470 <__do_global_dtors_aux+0x18>)
 800045c:	7823      	ldrb	r3, [r4, #0]
 800045e:	b933      	cbnz	r3, 800046e <__do_global_dtors_aux+0x16>
 8000460:	4b04      	ldr	r3, [pc, #16]	; (8000474 <__do_global_dtors_aux+0x1c>)
 8000462:	b113      	cbz	r3, 800046a <__do_global_dtors_aux+0x12>
 8000464:	4804      	ldr	r0, [pc, #16]	; (8000478 <__do_global_dtors_aux+0x20>)
 8000466:	f3af 8000 	nop.w
 800046a:	2301      	movs	r3, #1
 800046c:	7023      	strb	r3, [r4, #0]
 800046e:	bd10      	pop	{r4, pc}
 8000470:	20000000 	.word	0x20000000
 8000474:	00000000 	.word	0x00000000
 8000478:	08000ee8 	.word	0x08000ee8

0800047c <frame_dummy>:
 800047c:	b508      	push	{r3, lr}
 800047e:	4b03      	ldr	r3, [pc, #12]	; (800048c <frame_dummy+0x10>)
 8000480:	b11b      	cbz	r3, 800048a <frame_dummy+0xe>
 8000482:	4903      	ldr	r1, [pc, #12]	; (8000490 <frame_dummy+0x14>)
 8000484:	4803      	ldr	r0, [pc, #12]	; (8000494 <frame_dummy+0x18>)
 8000486:	f3af 8000 	nop.w
 800048a:	bd08      	pop	{r3, pc}
 800048c:	00000000 	.word	0x00000000
 8000490:	20000004 	.word	0x20000004
 8000494:	08000ee8 	.word	0x08000ee8

08000498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  return uwTick;
 800049c:	4b03      	ldr	r3, [pc, #12]	; (80004ac <HAL_GetTick+0x14>)
 800049e:	681b      	ldr	r3, [r3, #0]
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	20000028 	.word	0x20000028

080004b0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit: pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;    
 80004ba:	2300      	movs	r3, #0
 80004bc:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80004be:	2300      	movs	r3, #0
 80004c0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng); 
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	791b      	ldrb	r3, [r3, #4]
 80004c6:	2b01      	cmp	r3, #1
 80004c8:	d101      	bne.n	80004ce <HAL_RNG_GenerateRandomNumber+0x1e>
 80004ca:	2302      	movs	r3, #2
 80004cc:	e037      	b.n	800053e <HAL_RNG_GenerateRandomNumber+0x8e>
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2201      	movs	r2, #1
 80004d2:	711a      	strb	r2, [r3, #4]
  
  /* Check RNS peripheral state */
  if(hrng->State == HAL_RNG_STATE_READY)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	795b      	ldrb	r3, [r3, #5]
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d129      	bne.n	8000532 <HAL_RNG_GenerateRandomNumber+0x82>
  {
    /* Change RNG peripheral state */  
    hrng->State = HAL_RNG_STATE_BUSY;  
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2202      	movs	r2, #2
 80004e2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80004e4:	f7ff ffd8 	bl	8000498 <HAL_GetTick>
 80004e8:	60b8      	str	r0, [r7, #8]
  
    /* Check if data register contains valid random data */
    while(__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80004ea:	e00e      	b.n	800050a <HAL_RNG_GenerateRandomNumber+0x5a>
    {
      if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
 80004ec:	f7ff ffd4 	bl	8000498 <HAL_GetTick>
 80004f0:	4602      	mov	r2, r0
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	1ad3      	subs	r3, r2, r3
 80004f6:	2b02      	cmp	r3, #2
 80004f8:	d907      	bls.n	800050a <HAL_RNG_GenerateRandomNumber+0x5a>
      {    
        hrng->State = HAL_RNG_STATE_ERROR;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2204      	movs	r2, #4
 80004fe:	715a      	strb	r2, [r3, #5]

        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2200      	movs	r2, #0
 8000504:	711a      	strb	r2, [r3, #4]
      
        return HAL_TIMEOUT;
 8000506:	2303      	movs	r3, #3
 8000508:	e019      	b.n	800053e <HAL_RNG_GenerateRandomNumber+0x8e>
    while(__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	f003 0301 	and.w	r3, r3, #1
 8000514:	2b01      	cmp	r3, #1
 8000516:	d1e9      	bne.n	80004ec <HAL_RNG_GenerateRandomNumber+0x3c>
      } 
    }
  
    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	689a      	ldr	r2, [r3, #8]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	609a      	str	r2, [r3, #8]
    *random32bit = hrng->RandomNumber;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	689a      	ldr	r2, [r3, #8]
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	601a      	str	r2, [r3, #0]
  
    hrng->State = HAL_RNG_STATE_READY;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2201      	movs	r2, #1
 800052e:	715a      	strb	r2, [r3, #5]
 8000530:	e001      	b.n	8000536 <HAL_RNG_GenerateRandomNumber+0x86>
  }
  else
  {
    status = HAL_ERROR;
 8000532:	2301      	movs	r3, #1
 8000534:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	711a      	strb	r2, [r3, #4]

  return status;
 800053c:	7bfb      	ldrb	r3, [r7, #15]
}
 800053e:	4618      	mov	r0, r3
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <Dice_HMAC_SHA256_Init>:
Dice_HMAC_SHA256_Init(
    DICE_HMAC_SHA256_CTX *ctx,
    const uint8_t *key,
    size_t keyLen
)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	b088      	sub	sp, #32
 800054a:	af00      	add	r7, sp, #0
 800054c:	60f8      	str	r0, [r7, #12]
 800054e:	60b9      	str	r1, [r7, #8]
 8000550:	607a      	str	r2, [r7, #4]
    size_t cnt;

    assert(ctx && key);

    // if keyLen > 64, hash it and use it as key
    if (keyLen > HMAC_SHA256_BLOCK_LENGTH) {
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b40      	cmp	r3, #64	; 0x40
 8000556:	d909      	bls.n	800056c <Dice_HMAC_SHA256_Init+0x26>
        Dice_SHA256_Block_ctx(&ctx->hashCtx, key, keyLen, ctx->opad);
 8000558:	68f8      	ldr	r0, [r7, #12]
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	3370      	adds	r3, #112	; 0x70
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	68b9      	ldr	r1, [r7, #8]
 8000562:	f000 fc5d 	bl	8000e20 <Dice_SHA256_Block_ctx>
        keyLen = SHA256_DIGEST_LENGTH;
 8000566:	2320      	movs	r3, #32
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	e013      	b.n	8000594 <Dice_HMAC_SHA256_Init+0x4e>
    } else {
        MEMCPY_BCOPY(ctx->opad, key, keyLen);
 800056c:	2300      	movs	r3, #0
 800056e:	61bb      	str	r3, [r7, #24]
 8000570:	e00c      	b.n	800058c <Dice_HMAC_SHA256_Init+0x46>
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8000578:	69bb      	ldr	r3, [r7, #24]
 800057a:	4413      	add	r3, r2
 800057c:	68b9      	ldr	r1, [r7, #8]
 800057e:	69ba      	ldr	r2, [r7, #24]
 8000580:	440a      	add	r2, r1
 8000582:	7812      	ldrb	r2, [r2, #0]
 8000584:	701a      	strb	r2, [r3, #0]
 8000586:	69bb      	ldr	r3, [r7, #24]
 8000588:	3301      	adds	r3, #1
 800058a:	61bb      	str	r3, [r7, #24]
 800058c:	69ba      	ldr	r2, [r7, #24]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	429a      	cmp	r2, r3
 8000592:	d3ee      	bcc.n	8000572 <Dice_HMAC_SHA256_Init+0x2c>

    //
    // prepare inner hash SHA256((K XOR ipad) || msg)
    // K XOR ipad
    //
    for (cnt = 0; cnt < keyLen; cnt++) {
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]
 8000598:	e010      	b.n	80005bc <Dice_HMAC_SHA256_Init+0x76>
        ctx->opad[cnt] ^= 0x36;
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	69fb      	ldr	r3, [r7, #28]
 800059e:	4413      	add	r3, r2
 80005a0:	3370      	adds	r3, #112	; 0x70
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 80005a8:	b2d9      	uxtb	r1, r3
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	69fb      	ldr	r3, [r7, #28]
 80005ae:	4413      	add	r3, r2
 80005b0:	3370      	adds	r3, #112	; 0x70
 80005b2:	460a      	mov	r2, r1
 80005b4:	701a      	strb	r2, [r3, #0]
    for (cnt = 0; cnt < keyLen; cnt++) {
 80005b6:	69fb      	ldr	r3, [r7, #28]
 80005b8:	3301      	adds	r3, #1
 80005ba:	61fb      	str	r3, [r7, #28]
 80005bc:	69fa      	ldr	r2, [r7, #28]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d3ea      	bcc.n	800059a <Dice_HMAC_SHA256_Init+0x54>
    }
    MEMSET_BZERO(&ctx->opad[keyLen], 0x36, sizeof(ctx->opad) - keyLen);
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
 80005c8:	e00a      	b.n	80005e0 <Dice_HMAC_SHA256_Init+0x9a>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	3370      	adds	r3, #112	; 0x70
 80005ce:	68fa      	ldr	r2, [r7, #12]
 80005d0:	441a      	add	r2, r3
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	4413      	add	r3, r2
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3301      	adds	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d8ee      	bhi.n	80005ca <Dice_HMAC_SHA256_Init+0x84>

    Dice_SHA256_Init(&ctx->hashCtx);
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 f856 	bl	80006a0 <Dice_SHA256_Init>
    Dice_SHA256_Update(&ctx->hashCtx, ctx->opad, HMAC_SHA256_BLOCK_LENGTH);
 80005f4:	68f8      	ldr	r0, [r7, #12]
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	3370      	adds	r3, #112	; 0x70
 80005fa:	2240      	movs	r2, #64	; 0x40
 80005fc:	4619      	mov	r1, r3
 80005fe:	f000 fa0f 	bl	8000a20 <Dice_SHA256_Update>

    // Turn ipad into opad
    for (cnt = 0; cnt < sizeof(ctx->opad); cnt++) {
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
 8000606:	e010      	b.n	800062a <Dice_HMAC_SHA256_Init+0xe4>
        ctx->opad[cnt] ^= (0x5c ^ 0x36);
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	69fb      	ldr	r3, [r7, #28]
 800060c:	4413      	add	r3, r2
 800060e:	3370      	adds	r3, #112	; 0x70
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	f083 036a 	eor.w	r3, r3, #106	; 0x6a
 8000616:	b2d9      	uxtb	r1, r3
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	4413      	add	r3, r2
 800061e:	3370      	adds	r3, #112	; 0x70
 8000620:	460a      	mov	r2, r1
 8000622:	701a      	strb	r2, [r3, #0]
    for (cnt = 0; cnt < sizeof(ctx->opad); cnt++) {
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	3301      	adds	r3, #1
 8000628:	61fb      	str	r3, [r7, #28]
 800062a:	69fb      	ldr	r3, [r7, #28]
 800062c:	2b3f      	cmp	r3, #63	; 0x3f
 800062e:	d9eb      	bls.n	8000608 <Dice_HMAC_SHA256_Init+0xc2>
    }
}
 8000630:	bf00      	nop
 8000632:	3720      	adds	r7, #32
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <Dice_HMAC_SHA256_Update>:
Dice_HMAC_SHA256_Update(
    DICE_HMAC_SHA256_CTX *ctx,
    const uint8_t *data,
    size_t dataLen
)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
    Dice_SHA256_Update(&ctx->hashCtx, data, dataLen);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	68b9      	ldr	r1, [r7, #8]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f9e8 	bl	8000a20 <Dice_SHA256_Update>
    return;
 8000650:	bf00      	nop
}
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <Dice_HMAC_SHA256_Final>:
void
Dice_HMAC_SHA256_Final(
    DICE_HMAC_SHA256_CTX *ctx,
    uint8_t *digest
)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
    // complete inner hash SHA256(K XOR ipad, msg)
    Dice_SHA256_Final(&ctx->hashCtx, digest);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	6839      	ldr	r1, [r7, #0]
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fa9a 	bl	8000ba0 <Dice_SHA256_Final>

    // perform outer hash SHA256(K XOR opad, SHA256(K XOR ipad, msg))
    Dice_SHA256_Init(&ctx->hashCtx);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4618      	mov	r0, r3
 8000670:	f000 f816 	bl	80006a0 <Dice_SHA256_Init>
    Dice_SHA256_Update(&ctx->hashCtx, ctx->opad, HMAC_SHA256_BLOCK_LENGTH);
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	3370      	adds	r3, #112	; 0x70
 800067a:	2240      	movs	r2, #64	; 0x40
 800067c:	4619      	mov	r1, r3
 800067e:	f000 f9cf 	bl	8000a20 <Dice_SHA256_Update>
    Dice_SHA256_Update(&ctx->hashCtx, digest, SHA256_DIGEST_LENGTH);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2220      	movs	r2, #32
 8000686:	6839      	ldr	r1, [r7, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f9c9 	bl	8000a20 <Dice_SHA256_Update>
    Dice_SHA256_Final(&ctx->hashCtx, digest);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6839      	ldr	r1, [r7, #0]
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fa84 	bl	8000ba0 <Dice_SHA256_Final>
    return;
 8000698:	bf00      	nop
}
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <Dice_SHA256_Init>:
 */
//static const char *sha2_hex_digits = "0123456789abcdef";

/*** SHA-256: *********************************************************/
void Dice_SHA256_Init(DICE_SHA256_CONTEXT *context)
{
 80006a0:	b490      	push	{r4, r7}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
    if (context == (DICE_SHA256_CONTEXT *)0) {
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d02d      	beq.n	800070a <Dice_SHA256_Init+0x6a>
        return;
    }
    context->magic = HASH_MAGIC_VALUE;
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	a41a      	add	r4, pc, #104	; (adr r4, 800071c <Dice_SHA256_Init+0x7c>)
 80006b2:	cc18      	ldmia	r4, {r3, r4}
 80006b4:	e9c2 3408 	strd	r3, r4, [r2, #32]
    MEMCPY_BCOPY(context->state, sha256_initial_hash_value, SHA256_DIGEST_LENGTH);
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	e00a      	b.n	80006d4 <Dice_SHA256_Init+0x34>
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	4413      	add	r3, r2
 80006c4:	68fa      	ldr	r2, [r7, #12]
 80006c6:	4914      	ldr	r1, [pc, #80]	; (8000718 <Dice_SHA256_Init+0x78>)
 80006c8:	440a      	add	r2, r1
 80006ca:	7812      	ldrb	r2, [r2, #0]
 80006cc:	701a      	strb	r2, [r3, #0]
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	3301      	adds	r3, #1
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	2b1f      	cmp	r3, #31
 80006d8:	d9f1      	bls.n	80006be <Dice_SHA256_Init+0x1e>
    MEMSET_BZERO(context->buffer, 0x00, SHA256_BLOCK_LENGTH);
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	e009      	b.n	80006f4 <Dice_SHA256_Init+0x54>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	4413      	add	r3, r2
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	3301      	adds	r3, #1
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	2b3f      	cmp	r3, #63	; 0x3f
 80006f8:	d9f2      	bls.n	80006e0 <Dice_SHA256_Init+0x40>
    context->bitcount = 0;
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	f04f 0300 	mov.w	r3, #0
 8000700:	f04f 0400 	mov.w	r4, #0
 8000704:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8000708:	e000      	b.n	800070c <Dice_SHA256_Init+0x6c>
        return;
 800070a:	bf00      	nop
}
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bc90      	pop	{r4, r7}
 8000712:	4770      	bx	lr
 8000714:	f3af 8000 	nop.w
 8000718:	08001000 	.word	0x08001000
 800071c:	68736168 	.word	0x68736168
 8000720:	40787463 	.word	0x40787463

08000724 <SHA256_Transform>:

static void SHA256_Transform(DICE_SHA256_CONTEXT *context, const sha2_word32 *data)
{
 8000724:	b490      	push	{r4, r7}
 8000726:	b092      	sub	sp, #72	; 0x48
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
    sha2_word32 a, b, c, d, e, f, g, h, s0, s1;
    sha2_word32 T1, T2, *W256;
    int     j;

    W256 = (sha2_word32 *)context->buffer;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	3330      	adds	r3, #48	; 0x30
 8000732:	623b      	str	r3, [r7, #32]

    /* Initialize registers with the prev. intermediate value */
    a = context->state[0];
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	647b      	str	r3, [r7, #68]	; 0x44
    b = context->state[1];
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	643b      	str	r3, [r7, #64]	; 0x40
    c = context->state[2];
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	63fb      	str	r3, [r7, #60]	; 0x3c
    d = context->state[3];
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	68db      	ldr	r3, [r3, #12]
 800074a:	63bb      	str	r3, [r7, #56]	; 0x38
    e = context->state[4];
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	691b      	ldr	r3, [r3, #16]
 8000750:	637b      	str	r3, [r7, #52]	; 0x34
    f = context->state[5];
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	633b      	str	r3, [r7, #48]	; 0x30
    g = context->state[6];
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	62fb      	str	r3, [r7, #44]	; 0x2c
    h = context->state[7];
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28

    j = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
    do {
#if BYTE_ORDER == LITTLE_ENDIAN
        /* Copy data while converting to host uint8_t order */
        REVERSE32(*data++,W256[j]);
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	1d1a      	adds	r2, r3, #4
 800076c:	603a      	str	r2, [r7, #0]
 800076e:	61fb      	str	r3, [r7, #28]
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	1c5a      	adds	r2, r3, #1
 8000778:	61fa      	str	r2, [r7, #28]
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	021a      	lsls	r2, r3, #8
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	1c59      	adds	r1, r3, #1
 8000786:	61f9      	str	r1, [r7, #28]
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	4313      	orrs	r3, r2
 800078c:	61bb      	str	r3, [r7, #24]
 800078e:	69bb      	ldr	r3, [r7, #24]
 8000790:	021a      	lsls	r2, r3, #8
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	1c59      	adds	r1, r3, #1
 8000796:	61f9      	str	r1, [r7, #28]
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	4313      	orrs	r3, r2
 800079c:	61bb      	str	r3, [r7, #24]
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	021a      	lsls	r2, r3, #8
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	1c59      	adds	r1, r3, #1
 80007a6:	61f9      	str	r1, [r7, #28]
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	4313      	orrs	r3, r2
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	6a3a      	ldr	r2, [r7, #32]
 80007b4:	4413      	add	r3, r2
 80007b6:	69ba      	ldr	r2, [r7, #24]
 80007b8:	601a      	str	r2, [r3, #0]
        /* Apply the SHA-256 compression function to update a..h */
        T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + W256[j];
 80007ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007bc:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80007c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007c2:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80007c6:	405a      	eors	r2, r3
 80007c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ca:	ea4f 6373 	mov.w	r3, r3, ror #25
 80007ce:	405a      	eors	r2, r3
 80007d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d2:	441a      	add	r2, r3
 80007d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80007d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007d8:	4019      	ands	r1, r3
 80007da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007dc:	43d8      	mvns	r0, r3
 80007de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007e0:	4003      	ands	r3, r0
 80007e2:	404b      	eors	r3, r1
 80007e4:	441a      	add	r2, r3
 80007e6:	498d      	ldr	r1, [pc, #564]	; (8000a1c <SHA256_Transform+0x2f8>)
 80007e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007ee:	441a      	add	r2, r3
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	6a39      	ldr	r1, [r7, #32]
 80007f6:	440b      	add	r3, r1
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4413      	add	r3, r2
 80007fc:	617b      	str	r3, [r7, #20]
#else /* BYTE_ORDER == LITTLE_ENDIAN */
        /* Apply the SHA-256 compression function to update a..h with copy */
        T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + (W256[j] = *data++);
#endif /* BYTE_ORDER == LITTLE_ENDIAN */
        T2 = Sigma0_256(a) + Maj(a, b, c);
 80007fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000800:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8000804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000806:	ea4f 3373 	mov.w	r3, r3, ror #13
 800080a:	405a      	eors	r2, r3
 800080c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800080e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8000812:	405a      	eors	r2, r3
 8000814:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000818:	4019      	ands	r1, r3
 800081a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800081c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800081e:	4003      	ands	r3, r0
 8000820:	4059      	eors	r1, r3
 8000822:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000826:	4003      	ands	r3, r0
 8000828:	404b      	eors	r3, r1
 800082a:	4413      	add	r3, r2
 800082c:	613b      	str	r3, [r7, #16]
        h = g;
 800082e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
        g = f;
 8000832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
        f = e;
 8000836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000838:	633b      	str	r3, [r7, #48]	; 0x30
        e = d + T1;
 800083a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	4413      	add	r3, r2
 8000840:	637b      	str	r3, [r7, #52]	; 0x34
        d = c;
 8000842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000844:	63bb      	str	r3, [r7, #56]	; 0x38
        c = b;
 8000846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000848:	63fb      	str	r3, [r7, #60]	; 0x3c
        b = a;
 800084a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800084c:	643b      	str	r3, [r7, #64]	; 0x40
        a = T1 + T2;
 800084e:	697a      	ldr	r2, [r7, #20]
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	4413      	add	r3, r2
 8000854:	647b      	str	r3, [r7, #68]	; 0x44

        j++;
 8000856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000858:	3301      	adds	r3, #1
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
    } while (j < 16);
 800085c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085e:	2b0f      	cmp	r3, #15
 8000860:	dd82      	ble.n	8000768 <SHA256_Transform+0x44>

    do {
        /* Part of the message block expansion: */
        s0 = W256[(j+1)&0x0f];
 8000862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000864:	3301      	adds	r3, #1
 8000866:	f003 030f 	and.w	r3, r3, #15
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	6a3a      	ldr	r2, [r7, #32]
 800086e:	4413      	add	r3, r2
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	60fb      	str	r3, [r7, #12]
        s0 = sigma0_256(s0);
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	ea4f 12f3 	mov.w	r2, r3, ror #7
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8000880:	405a      	eors	r2, r3
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	08db      	lsrs	r3, r3, #3
 8000886:	4053      	eors	r3, r2
 8000888:	60fb      	str	r3, [r7, #12]
        s1 = W256[(j+14)&0x0f];
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	330e      	adds	r3, #14
 800088e:	f003 030f 	and.w	r3, r3, #15
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	6a3a      	ldr	r2, [r7, #32]
 8000896:	4413      	add	r3, r2
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	60bb      	str	r3, [r7, #8]
        s1 = sigma1_256(s1);
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	ea4f 4273 	mov.w	r2, r3, ror #17
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80008a8:	405a      	eors	r2, r3
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	0a9b      	lsrs	r3, r3, #10
 80008ae:	4053      	eors	r3, r2
 80008b0:	60bb      	str	r3, [r7, #8]

        /* Apply the SHA-256 compression function to update a..h */
        T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] +
 80008b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008b4:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80008b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ba:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80008be:	405a      	eors	r2, r3
 80008c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008c2:	ea4f 6373 	mov.w	r3, r3, ror #25
 80008c6:	405a      	eors	r2, r3
 80008c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ca:	441a      	add	r2, r3
 80008cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80008ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008d0:	4019      	ands	r1, r3
 80008d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008d4:	43d8      	mvns	r0, r3
 80008d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d8:	4003      	ands	r3, r0
 80008da:	404b      	eors	r3, r1
 80008dc:	441a      	add	r2, r3
 80008de:	494f      	ldr	r1, [pc, #316]	; (8000a1c <SHA256_Transform+0x2f8>)
 80008e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008e6:	441a      	add	r2, r3
             (W256[j&0x0f] += s1 + W256[(j+9)&0x0f] + s0);
 80008e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ea:	f003 030f 	and.w	r3, r3, #15
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	6a39      	ldr	r1, [r7, #32]
 80008f2:	440b      	add	r3, r1
 80008f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80008f6:	f001 010f 	and.w	r1, r1, #15
 80008fa:	0089      	lsls	r1, r1, #2
 80008fc:	6a38      	ldr	r0, [r7, #32]
 80008fe:	4401      	add	r1, r0
 8000900:	6808      	ldr	r0, [r1, #0]
 8000902:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000904:	3109      	adds	r1, #9
 8000906:	f001 010f 	and.w	r1, r1, #15
 800090a:	0089      	lsls	r1, r1, #2
 800090c:	6a3c      	ldr	r4, [r7, #32]
 800090e:	4421      	add	r1, r4
 8000910:	680c      	ldr	r4, [r1, #0]
 8000912:	68b9      	ldr	r1, [r7, #8]
 8000914:	440c      	add	r4, r1
 8000916:	68f9      	ldr	r1, [r7, #12]
 8000918:	4421      	add	r1, r4
 800091a:	4401      	add	r1, r0
 800091c:	6019      	str	r1, [r3, #0]
 800091e:	681b      	ldr	r3, [r3, #0]
        T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] +
 8000920:	4413      	add	r3, r2
 8000922:	617b      	str	r3, [r7, #20]
        T2 = Sigma0_256(a) + Maj(a, b, c);
 8000924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000926:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800092a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800092c:	ea4f 3373 	mov.w	r3, r3, ror #13
 8000930:	405a      	eors	r2, r3
 8000932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000934:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8000938:	405a      	eors	r2, r3
 800093a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800093c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800093e:	4019      	ands	r1, r3
 8000940:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000944:	4003      	ands	r3, r0
 8000946:	4059      	eors	r1, r3
 8000948:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800094a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800094c:	4003      	ands	r3, r0
 800094e:	404b      	eors	r3, r1
 8000950:	4413      	add	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
        h = g;
 8000954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
        g = f;
 8000958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
        f = e;
 800095c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800095e:	633b      	str	r3, [r7, #48]	; 0x30
        e = d + T1;
 8000960:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	4413      	add	r3, r2
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
        d = c;
 8000968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800096a:	63bb      	str	r3, [r7, #56]	; 0x38
        c = b;
 800096c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800096e:	63fb      	str	r3, [r7, #60]	; 0x3c
        b = a;
 8000970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000972:	643b      	str	r3, [r7, #64]	; 0x40
        a = T1 + T2;
 8000974:	697a      	ldr	r2, [r7, #20]
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	4413      	add	r3, r2
 800097a:	647b      	str	r3, [r7, #68]	; 0x44

        j++;
 800097c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097e:	3301      	adds	r3, #1
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
    } while (j < 64);
 8000982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000984:	2b3f      	cmp	r3, #63	; 0x3f
 8000986:	f77f af6c 	ble.w	8000862 <SHA256_Transform+0x13e>

    /* Compute the current intermediate hash value */
    context->state[0] += a;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000990:	441a      	add	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	601a      	str	r2, [r3, #0]
    context->state[1] += b;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	685a      	ldr	r2, [r3, #4]
 800099a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800099c:	441a      	add	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	605a      	str	r2, [r3, #4]
    context->state[2] += c;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	689a      	ldr	r2, [r3, #8]
 80009a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80009a8:	441a      	add	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	609a      	str	r2, [r3, #8]
    context->state[3] += d;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	68da      	ldr	r2, [r3, #12]
 80009b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009b4:	441a      	add	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	60da      	str	r2, [r3, #12]
    context->state[4] += e;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	691a      	ldr	r2, [r3, #16]
 80009be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009c0:	441a      	add	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	611a      	str	r2, [r3, #16]
    context->state[5] += f;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	695a      	ldr	r2, [r3, #20]
 80009ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009cc:	441a      	add	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	615a      	str	r2, [r3, #20]
    context->state[6] += g;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	699a      	ldr	r2, [r3, #24]
 80009d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d8:	441a      	add	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	619a      	str	r2, [r3, #24]
    context->state[7] += h;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	69da      	ldr	r2, [r3, #28]
 80009e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e4:	441a      	add	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	61da      	str	r2, [r3, #28]

    /* Clean up */
    a = b = c = d = e = f = g = h = T1 = T2 = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80009f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fc:	633b      	str	r3, [r7, #48]	; 0x30
 80009fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a00:	637b      	str	r3, [r7, #52]	; 0x34
 8000a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a04:	63bb      	str	r3, [r7, #56]	; 0x38
 8000a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a0c:	643b      	str	r3, [r7, #64]	; 0x40
 8000a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a10:	647b      	str	r3, [r7, #68]	; 0x44
}
 8000a12:	bf00      	nop
 8000a14:	3748      	adds	r7, #72	; 0x48
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc90      	pop	{r4, r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	08000f00 	.word	0x08000f00

08000a20 <Dice_SHA256_Update>:

void Dice_SHA256_Update(DICE_SHA256_CONTEXT *context, const sha2_uint8_t *data, size_t len)
{
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b08b      	sub	sp, #44	; 0x2c
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
    unsigned int    freespace, usedspace;

    if (len == 0) {
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	2a00      	cmp	r2, #0
 8000a30:	f000 80af 	beq.w	8000b92 <Dice_SHA256_Update+0x172>

    /* Sanity check: */
    assert(context != (DICE_SHA256_CONTEXT *)0 && data != (sha2_uint8_t *)0 && context->magic == HASH_MAGIC_VALUE);

//    usedspace = (context->bitcount >> 3) % SHA256_BLOCK_LENGTH; // LordOfDorks: STM32L082KZ really doesn't like this behind the firewall
    usedspace = (unsigned int)(context->bitcount >> 3);
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	e9d2 120a 	ldrd	r1, r2, [r2, #40]	; 0x28
 8000a3a:	08cb      	lsrs	r3, r1, #3
 8000a3c:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
 8000a40:	08d4      	lsrs	r4, r2, #3
 8000a42:	61bb      	str	r3, [r7, #24]
    usedspace %= SHA256_BLOCK_LENGTH;
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a4a:	61bb      	str	r3, [r7, #24]
    if (usedspace > 0) {
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d073      	beq.n	8000b3a <Dice_SHA256_Update+0x11a>
        /* Calculate how much free space is available in the buffer */
        freespace = SHA256_BLOCK_LENGTH - usedspace;
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000a58:	617b      	str	r3, [r7, #20]

        if (len >= freespace) {
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d330      	bcc.n	8000ac4 <Dice_SHA256_Update+0xa4>
            /* Fill the buffer completely and process it */
            MEMCPY_BCOPY(&context->buffer[usedspace], data, freespace);
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
 8000a66:	e00d      	b.n	8000a84 <Dice_SHA256_Update+0x64>
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	3330      	adds	r3, #48	; 0x30
 8000a6c:	68fa      	ldr	r2, [r7, #12]
 8000a6e:	441a      	add	r2, r3
 8000a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a72:	4413      	add	r3, r2
 8000a74:	68b9      	ldr	r1, [r7, #8]
 8000a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a78:	440a      	add	r2, r1
 8000a7a:	7812      	ldrb	r2, [r2, #0]
 8000a7c:	701a      	strb	r2, [r3, #0]
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a80:	3301      	adds	r3, #1
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
 8000a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d3ed      	bcc.n	8000a68 <Dice_SHA256_Update+0x48>
            context->bitcount += freespace << 3;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	f04f 0400 	mov.w	r4, #0
 8000a9a:	185b      	adds	r3, r3, r1
 8000a9c:	eb44 0402 	adc.w	r4, r4, r2
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
            len -= freespace;
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	607b      	str	r3, [r7, #4]
            data += freespace;
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	60bb      	str	r3, [r7, #8]
            SHA256_Transform(context, (sha2_word32 *)context->buffer);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	3330      	adds	r3, #48	; 0x30
 8000aba:	4619      	mov	r1, r3
 8000abc:	68f8      	ldr	r0, [r7, #12]
 8000abe:	f7ff fe31 	bl	8000724 <SHA256_Transform>
 8000ac2:	e03a      	b.n	8000b3a <Dice_SHA256_Update+0x11a>
        } else {
            /* The buffer is not yet full */
            MEMCPY_BCOPY(&context->buffer[usedspace], data, len);
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
 8000ac8:	e00d      	b.n	8000ae6 <Dice_SHA256_Update+0xc6>
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	3330      	adds	r3, #48	; 0x30
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	441a      	add	r2, r3
 8000ad2:	6a3b      	ldr	r3, [r7, #32]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	68b9      	ldr	r1, [r7, #8]
 8000ad8:	6a3a      	ldr	r2, [r7, #32]
 8000ada:	440a      	add	r2, r1
 8000adc:	7812      	ldrb	r2, [r2, #0]
 8000ade:	701a      	strb	r2, [r3, #0]
 8000ae0:	6a3b      	ldr	r3, [r7, #32]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	623b      	str	r3, [r7, #32]
 8000ae6:	6a3a      	ldr	r2, [r7, #32]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d3ed      	bcc.n	8000aca <Dice_SHA256_Update+0xaa>
            context->bitcount += len << 3;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	00db      	lsls	r3, r3, #3
 8000af8:	f04f 0400 	mov.w	r4, #0
 8000afc:	185b      	adds	r3, r3, r1
 8000afe:	eb44 0402 	adc.w	r4, r4, r2
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
            /* Clean up: */
            usedspace = freespace = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	61bb      	str	r3, [r7, #24]
            return;
 8000b10:	e040      	b.n	8000b94 <Dice_SHA256_Update+0x174>
        }
    }
    while (len >= SHA256_BLOCK_LENGTH) {
        /* Process as many complete blocks as we can */
        SHA256_Transform(context, (sha2_word32 *)data);
 8000b12:	68b9      	ldr	r1, [r7, #8]
 8000b14:	68f8      	ldr	r0, [r7, #12]
 8000b16:	f7ff fe05 	bl	8000724 <SHA256_Transform>
        context->bitcount += SHA256_BLOCK_LENGTH << 3;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8000b20:	f513 7300 	adds.w	r3, r3, #512	; 0x200
 8000b24:	f144 0400 	adc.w	r4, r4, #0
 8000b28:	68fa      	ldr	r2, [r7, #12]
 8000b2a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
        len -= SHA256_BLOCK_LENGTH;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3b40      	subs	r3, #64	; 0x40
 8000b32:	607b      	str	r3, [r7, #4]
        data += SHA256_BLOCK_LENGTH;
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	3340      	adds	r3, #64	; 0x40
 8000b38:	60bb      	str	r3, [r7, #8]
    while (len >= SHA256_BLOCK_LENGTH) {
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b3f      	cmp	r3, #63	; 0x3f
 8000b3e:	d8e8      	bhi.n	8000b12 <Dice_SHA256_Update+0xf2>
    }
    if (len > 0) {
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d020      	beq.n	8000b88 <Dice_SHA256_Update+0x168>
        /* There's left-overs, so save 'em */
        MEMCPY_BCOPY(context->buffer, data, len);
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
 8000b4a:	e00c      	b.n	8000b66 <Dice_SHA256_Update+0x146>
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	4413      	add	r3, r2
 8000b56:	68b9      	ldr	r1, [r7, #8]
 8000b58:	69fa      	ldr	r2, [r7, #28]
 8000b5a:	440a      	add	r2, r1
 8000b5c:	7812      	ldrb	r2, [r2, #0]
 8000b5e:	701a      	strb	r2, [r3, #0]
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	3301      	adds	r3, #1
 8000b64:	61fb      	str	r3, [r7, #28]
 8000b66:	69fa      	ldr	r2, [r7, #28]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d3ee      	bcc.n	8000b4c <Dice_SHA256_Update+0x12c>
        context->bitcount += len << 3;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	f04f 0400 	mov.w	r4, #0
 8000b7c:	185b      	adds	r3, r3, r1
 8000b7e:	eb44 0402 	adc.w	r4, r4, r2
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    }
    /* Clean up: */
    usedspace = freespace = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	61bb      	str	r3, [r7, #24]
 8000b90:	e000      	b.n	8000b94 <Dice_SHA256_Update+0x174>
        return;
 8000b92:	bf00      	nop
}
 8000b94:	372c      	adds	r7, #44	; 0x2c
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd90      	pop	{r4, r7, pc}
 8000b9a:	0000      	movs	r0, r0
 8000b9c:	0000      	movs	r0, r0
	...

08000ba0 <Dice_SHA256_Final>:

void Dice_SHA256_Final(DICE_SHA256_CONTEXT *context, sha2_uint8_t *digest)
{
 8000ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ba4:	b095      	sub	sp, #84	; 0x54
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	61f8      	str	r0, [r7, #28]
 8000baa:	61b9      	str	r1, [r7, #24]
    sha2_word32 *d = (sha2_word32 *)digest;
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Sanity check: */
    assert(context != (DICE_SHA256_CONTEXT *)0 && context->magic == HASH_MAGIC_VALUE);

    /* If no digest buffer is passed, we don't bother doing this: */
    if (digest != (sha2_uint8_t *)0) {
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f000 8118 	beq.w	8000de8 <Dice_SHA256_Final+0x248>
//        usedspace = (context->bitcount >> 3) % SHA256_BLOCK_LENGTH; // LordOfDorks: STM32L082KZ really doesn't like this behind the firewall
        usedspace = (unsigned int)(context->bitcount >> 3);
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8000bbe:	08da      	lsrs	r2, r3, #3
 8000bc0:	613a      	str	r2, [r7, #16]
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
 8000bc8:	613a      	str	r2, [r7, #16]
 8000bca:	08e3      	lsrs	r3, r4, #3
 8000bcc:	617b      	str	r3, [r7, #20]
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
        usedspace %= SHA256_BLOCK_LENGTH;
 8000bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000bd8:	633b      	str	r3, [r7, #48]	; 0x30
#if BYTE_ORDER == LITTLE_ENDIAN
        /* Convert FROM host uint8_t order */
        REVERSE64(context->bitcount,context->bitcount);
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8000be0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8000be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000bf0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8000bf4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000bf8:	0a1a      	lsrs	r2, r3, #8
 8000bfa:	60ba      	str	r2, [r7, #8]
 8000bfc:	68ba      	ldr	r2, [r7, #8]
 8000bfe:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8000c02:	60ba      	str	r2, [r7, #8]
 8000c04:	0a23      	lsrs	r3, r4, #8
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8000c0c:	f04f 14ff 	mov.w	r4, #16711935	; 0xff00ff
 8000c10:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000c14:	ea01 0103 	and.w	r1, r1, r3
 8000c18:	ea02 0204 	and.w	r2, r2, r4
 8000c1c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000c20:	ea4f 2b04 	mov.w	fp, r4, lsl #8
 8000c24:	ea4b 6b13 	orr.w	fp, fp, r3, lsr #24
 8000c28:	ea4f 2a03 	mov.w	sl, r3, lsl #8
 8000c2c:	f04f 23ff 	mov.w	r3, #4278255360	; 0xff00ff00
 8000c30:	f04f 24ff 	mov.w	r4, #4278255360	; 0xff00ff00
 8000c34:	ea03 030a 	and.w	r3, r3, sl
 8000c38:	ea04 040b 	and.w	r4, r4, fp
 8000c3c:	ea43 0301 	orr.w	r3, r3, r1
 8000c40:	ea44 0402 	orr.w	r4, r4, r2
 8000c44:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8000c48:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000c4c:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8000c50:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 8000c54:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8000c58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c5c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8000c60:	ea08 0103 	and.w	r1, r8, r3
 8000c64:	ea09 0204 	and.w	r2, r9, r4
 8000c68:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000c6c:	0426      	lsls	r6, r4, #16
 8000c6e:	ea46 4613 	orr.w	r6, r6, r3, lsr #16
 8000c72:	041d      	lsls	r5, r3, #16
 8000c74:	a468      	add	r4, pc, #416	; (adr r4, 8000e18 <Dice_SHA256_Final+0x278>)
 8000c76:	cc18      	ldmia	r4, {r3, r4}
 8000c78:	ea03 0305 	and.w	r3, r3, r5
 8000c7c:	ea04 0406 	and.w	r4, r4, r6
 8000c80:	ea43 0301 	orr.w	r3, r3, r1
 8000c84:	ea44 0402 	orr.w	r4, r4, r2
 8000c88:	69fa      	ldr	r2, [r7, #28]
 8000c8a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
#endif
        if (usedspace > 0) {
 8000c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d04d      	beq.n	8000d30 <Dice_SHA256_Final+0x190>
            /* Begin padding with a 1 bit: */
            context->buffer[usedspace++] = 0x80;
 8000c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	633a      	str	r2, [r7, #48]	; 0x30
 8000c9a:	69fa      	ldr	r2, [r7, #28]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	2280      	movs	r2, #128	; 0x80
 8000ca0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

            if (usedspace <= SHA256_SHORT_BLOCK_LENGTH) {
 8000ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca6:	2b38      	cmp	r3, #56	; 0x38
 8000ca8:	d814      	bhi.n	8000cd4 <Dice_SHA256_Final+0x134>
                /* Set-up for the last transform: */
                MEMSET_BZERO(&context->buffer[usedspace], 0x00, SHA256_SHORT_BLOCK_LENGTH - usedspace);
 8000caa:	2300      	movs	r3, #0
 8000cac:	64bb      	str	r3, [r7, #72]	; 0x48
 8000cae:	e00a      	b.n	8000cc6 <Dice_SHA256_Final+0x126>
 8000cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cb2:	3330      	adds	r3, #48	; 0x30
 8000cb4:	69fa      	ldr	r2, [r7, #28]
 8000cb6:	441a      	add	r2, r3
 8000cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cba:	4413      	add	r3, r2
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
 8000cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8000cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8000ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d8ee      	bhi.n	8000cb0 <Dice_SHA256_Final+0x110>
 8000cd2:	e041      	b.n	8000d58 <Dice_SHA256_Final+0x1b8>
            } else {
                if (usedspace < SHA256_BLOCK_LENGTH) {
 8000cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cd6:	2b3f      	cmp	r3, #63	; 0x3f
 8000cd8:	d813      	bhi.n	8000d02 <Dice_SHA256_Final+0x162>
                    MEMSET_BZERO(&context->buffer[usedspace], 0x00, SHA256_BLOCK_LENGTH - usedspace);
 8000cda:	2300      	movs	r3, #0
 8000cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8000cde:	e00a      	b.n	8000cf6 <Dice_SHA256_Final+0x156>
 8000ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ce2:	3330      	adds	r3, #48	; 0x30
 8000ce4:	69fa      	ldr	r2, [r7, #28]
 8000ce6:	441a      	add	r2, r3
 8000ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cea:	4413      	add	r3, r2
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
 8000cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8000cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cf8:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8000cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d8ee      	bhi.n	8000ce0 <Dice_SHA256_Final+0x140>
                }
                /* Do second-to-last transform: */
                SHA256_Transform(context, (sha2_word32 *)context->buffer);
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3330      	adds	r3, #48	; 0x30
 8000d06:	4619      	mov	r1, r3
 8000d08:	69f8      	ldr	r0, [r7, #28]
 8000d0a:	f7ff fd0b 	bl	8000724 <SHA256_Transform>

                /* And set-up for the last transform: */
                MEMSET_BZERO(context->buffer, 0x00, SHA256_SHORT_BLOCK_LENGTH);
 8000d0e:	2300      	movs	r3, #0
 8000d10:	643b      	str	r3, [r7, #64]	; 0x40
 8000d12:	e009      	b.n	8000d28 <Dice_SHA256_Final+0x188>
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d1c:	4413      	add	r3, r2
 8000d1e:	2200      	movs	r2, #0
 8000d20:	701a      	strb	r2, [r3, #0]
 8000d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d24:	3301      	adds	r3, #1
 8000d26:	643b      	str	r3, [r7, #64]	; 0x40
 8000d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d2a:	2b37      	cmp	r3, #55	; 0x37
 8000d2c:	d9f2      	bls.n	8000d14 <Dice_SHA256_Final+0x174>
 8000d2e:	e013      	b.n	8000d58 <Dice_SHA256_Final+0x1b8>
            }
        } else {
            /* Set-up for the last transform: */
            MEMSET_BZERO(context->buffer, 0x00, SHA256_SHORT_BLOCK_LENGTH);
 8000d30:	2300      	movs	r3, #0
 8000d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d34:	e009      	b.n	8000d4a <Dice_SHA256_Final+0x1aa>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d3e:	4413      	add	r3, r2
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
 8000d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d46:	3301      	adds	r3, #1
 8000d48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d4c:	2b37      	cmp	r3, #55	; 0x37
 8000d4e:	d9f2      	bls.n	8000d36 <Dice_SHA256_Final+0x196>

            /* Begin padding with a 1 bit: */
            *context->buffer = 0x80;
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	2280      	movs	r2, #128	; 0x80
 8000d54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        /* Set the bit count: */
        *(sha2_word64 *)&context->buffer[SHA256_SHORT_BLOCK_LENGTH] = context->bitcount;
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8000d64:	e882 0018 	stmia.w	r2, {r3, r4}

        /* Final transform: */
        SHA256_Transform(context, (sha2_word32 *)context->buffer);
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	3330      	adds	r3, #48	; 0x30
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	69f8      	ldr	r0, [r7, #28]
 8000d70:	f7ff fcd8 	bl	8000724 <SHA256_Transform>

#if BYTE_ORDER == LITTLE_ENDIAN
        {
            /* Convert TO host uint8_t order */
            int j;
            for (j = 0; j < 8; j++) {
 8000d74:	2300      	movs	r3, #0
 8000d76:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d78:	e033      	b.n	8000de2 <Dice_SHA256_Final+0x242>
                REVERSE32(context->state[j],context->state[j]);
 8000d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	69fa      	ldr	r2, [r7, #28]
 8000d80:	4413      	add	r3, r2
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
 8000d84:	2300      	movs	r3, #0
 8000d86:	623b      	str	r3, [r7, #32]
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	1c5a      	adds	r2, r3, #1
 8000d8c:	627a      	str	r2, [r7, #36]	; 0x24
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	623b      	str	r3, [r7, #32]
 8000d92:	6a3b      	ldr	r3, [r7, #32]
 8000d94:	021a      	lsls	r2, r3, #8
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	1c59      	adds	r1, r3, #1
 8000d9a:	6279      	str	r1, [r7, #36]	; 0x24
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	623b      	str	r3, [r7, #32]
 8000da2:	6a3b      	ldr	r3, [r7, #32]
 8000da4:	021a      	lsls	r2, r3, #8
 8000da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da8:	1c59      	adds	r1, r3, #1
 8000daa:	6279      	str	r1, [r7, #36]	; 0x24
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	623b      	str	r3, [r7, #32]
 8000db2:	6a3b      	ldr	r3, [r7, #32]
 8000db4:	021a      	lsls	r2, r3, #8
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	1c59      	adds	r1, r3, #1
 8000dba:	6279      	str	r1, [r7, #36]	; 0x24
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	623b      	str	r3, [r7, #32]
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000dc6:	6a39      	ldr	r1, [r7, #32]
 8000dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                *d++ = context->state[j];
 8000dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dce:	1d1a      	adds	r2, r3, #4
 8000dd0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000dd2:	69fa      	ldr	r2, [r7, #28]
 8000dd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000dd6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000dda:	601a      	str	r2, [r3, #0]
            for (j = 0; j < 8; j++) {
 8000ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dde:	3301      	adds	r3, #1
 8000de0:	63bb      	str	r3, [r7, #56]	; 0x38
 8000de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000de4:	2b07      	cmp	r3, #7
 8000de6:	ddc8      	ble.n	8000d7a <Dice_SHA256_Final+0x1da>
        MEMCPY_BCOPY(d, context->state, SHA256_DIGEST_LENGTH);
#endif
    }

    /* Clean up state data: */
    MEMSET_BZERO(context, 0x00, sizeof(DICE_SHA256_CONTEXT));
 8000de8:	2300      	movs	r3, #0
 8000dea:	637b      	str	r3, [r7, #52]	; 0x34
 8000dec:	e007      	b.n	8000dfe <Dice_SHA256_Final+0x25e>
 8000dee:	69fa      	ldr	r2, [r7, #28]
 8000df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df2:	4413      	add	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
 8000df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8000dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e00:	2b6f      	cmp	r3, #111	; 0x6f
 8000e02:	d9f4      	bls.n	8000dee <Dice_SHA256_Final+0x24e>
    usedspace = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
}
 8000e08:	bf00      	nop
 8000e0a:	3754      	adds	r7, #84	; 0x54
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e12:	bf00      	nop
 8000e14:	f3af 8000 	nop.w
 8000e18:	ffff0000 	.word	0xffff0000
 8000e1c:	ffff0000 	.word	0xffff0000

08000e20 <Dice_SHA256_Block_ctx>:

void Dice_SHA256_Block_ctx(DICE_SHA256_CONTEXT *context, const uint8_t *buf, size_t bufSize, uint8_t *digest)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	603b      	str	r3, [r7, #0]
    Dice_SHA256_Init(context);
 8000e2e:	68f8      	ldr	r0, [r7, #12]
 8000e30:	f7ff fc36 	bl	80006a0 <Dice_SHA256_Init>
    Dice_SHA256_Update(context, buf, bufSize);
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	68b9      	ldr	r1, [r7, #8]
 8000e38:	68f8      	ldr	r0, [r7, #12]
 8000e3a:	f7ff fdf1 	bl	8000a20 <Dice_SHA256_Update>
    Dice_SHA256_Final(context, digest);
 8000e3e:	6839      	ldr	r1, [r7, #0]
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f7ff fead 	bl	8000ba0 <Dice_SHA256_Final>
}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <GetRandom>:
#include "DiceSha256.h"

extern DICE_HAL DiceHAL;

DICE_RC GetRandom(unsigned char* entropy, unsigned int size)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
    uint32_t entropyWord;
    if(DiceHAL.phRng == NULL) return DICE_RC_Hardware_Error;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <GetRandom+0x6c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <GetRandom+0x16>
 8000e62:	2304      	movs	r3, #4
 8000e64:	e026      	b.n	8000eb4 <GetRandom+0x64>
    for(uint32_t n = 0; n < size; n += sizeof(entropyWord))
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	e01e      	b.n	8000eaa <GetRandom+0x5a>
    {
        if(HAL_RNG_GenerateRandomNumber(DiceHAL.phRng, &entropyWord) != HAL_OK)
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <GetRandom+0x6c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f107 0208 	add.w	r2, r7, #8
 8000e74:	4611      	mov	r1, r2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fb1a 	bl	80004b0 <HAL_RNG_GenerateRandomNumber>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <GetRandom+0x36>
        {
            return DICE_RC_Hardware_Error;
 8000e82:	2304      	movs	r3, #4
 8000e84:	e016      	b.n	8000eb4 <GetRandom+0x64>
        }
        memcpy(&entropy[n], &entropyWord, MIN(sizeof(entropyWord), size - n));
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	18d0      	adds	r0, r2, r3
 8000e8c:	683a      	ldr	r2, [r7, #0]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	bf28      	it	cs
 8000e96:	2304      	movcs	r3, #4
 8000e98:	461a      	mov	r2, r3
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f000 f80e 	bl	8000ec0 <memcpy>
    for(uint32_t n = 0; n < size; n += sizeof(entropyWord))
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	3304      	adds	r3, #4
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d3dc      	bcc.n	8000e6c <GetRandom+0x1c>
    }
    return DICE_RC_OK;
 8000eb2:	2300      	movs	r3, #0
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	2000001c 	.word	0x2000001c

08000ec0 <memcpy>:
 8000ec0:	b510      	push	{r4, lr}
 8000ec2:	1e43      	subs	r3, r0, #1
 8000ec4:	440a      	add	r2, r1
 8000ec6:	4291      	cmp	r1, r2
 8000ec8:	d100      	bne.n	8000ecc <memcpy+0xc>
 8000eca:	bd10      	pop	{r4, pc}
 8000ecc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000ed0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000ed4:	e7f7      	b.n	8000ec6 <memcpy+0x6>

08000ed6 <memset>:
 8000ed6:	4402      	add	r2, r0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d100      	bne.n	8000ee0 <memset+0xa>
 8000ede:	4770      	bx	lr
 8000ee0:	f803 1b01 	strb.w	r1, [r3], #1
 8000ee4:	e7f9      	b.n	8000eda <memset+0x4>
	...

08000ee8 <_init>:
 8000ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eea:	bf00      	nop
 8000eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eee:	bc08      	pop	{r3}
 8000ef0:	469e      	mov	lr, r3
 8000ef2:	4770      	bx	lr

08000ef4 <_fini>:
 8000ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef6:	bf00      	nop
 8000ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000efa:	bc08      	pop	{r3}
 8000efc:	469e      	mov	lr, r3
 8000efe:	4770      	bx	lr
