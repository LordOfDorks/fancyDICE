
C:\Git\fancyDICE\Firewall\Debug\Firewall.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000200  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .callgate     00000278  08000200  08000200  00010200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003834  08000478  08000478  00010478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000178  08003cac  08003cac  00013cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08003e24  08003e24  00013e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08003e2c  08003e2c  00013e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08003e30  08003e30  00013e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000004  20000000  08003e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000430  20000004  08003e38  00030004  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000434  08003e38  00030434  2**0
                  ALLOC
 10 .unittest     0000048c  08003e38  08003e38  00023e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .unittestdata 00000148  20000a34  20000a34  00030a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 00000030  00000000  00000000  00030b7c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000132f8  00000000  00000000  00030bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000265f  00000000  00000000  00043ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000960  00000000  00000000  00046508  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000858  00000000  00000000  00046e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000052f7  00000000  00000000  000476c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003658  00000000  00000000  0004c9b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  0005000f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002470  00000000  00000000  0005008c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .callgate:

08000200 <CallGate-0x4>:
 8000200:	00000000 	.word	0x00000000

08000204 <CallGate>:
static uint32_t CallGateResult;
static unsigned int outsideSP;
unsigned char secureStack[0x400];

__attribute__((section(".callgate"))) unsigned int CallGate(pDICE_Context ctx)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b0b2      	sub	sp, #200	; 0xc8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
    // Switch the steack so we dont leave any secrets around
    register unsigned int sp_alias asm("sp");
    outsideSP = sp_alias;
 800020c:	466a      	mov	r2, sp
 800020e:	4b94      	ldr	r3, [pc, #592]	; (8000460 <CallGate+0x25c>)
 8000210:	601a      	str	r2, [r3, #0]
    sp_alias = (unsigned int)&secureStack[sizeof(secureStack)];
 8000212:	4b94      	ldr	r3, [pc, #592]	; (8000464 <CallGate+0x260>)
 8000214:	469d      	mov	sp, r3

    // Initialize the return
    CallGateResult = 0;
 8000216:	4b94      	ldr	r3, [pc, #592]	; (8000468 <CallGate+0x264>)
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]

    // Parameter check
    if((ctx == NULL) || (ctx->magic != DICE_MAGIC))
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d004      	beq.n	800022c <CallGate+0x28>
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a91      	ldr	r2, [pc, #580]	; (800046c <CallGate+0x268>)
 8000228:	4293      	cmp	r3, r2
 800022a:	d003      	beq.n	8000234 <CallGate+0x30>
    {
        CallGateResult = 1;
 800022c:	4b8e      	ldr	r3, [pc, #568]	; (8000468 <CallGate+0x264>)
 800022e:	2201      	movs	r2, #1
 8000230:	601a      	str	r2, [r3, #0]
        goto Cleanup;
 8000232:	e106      	b.n	8000442 <CallGate+0x23e>
    }

    // Dispatch the requested function
    switch(ctx->fid)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	791b      	ldrb	r3, [r3, #4]
 8000238:	2b04      	cmp	r3, #4
 800023a:	f200 80fd 	bhi.w	8000438 <CallGate+0x234>
 800023e:	a201      	add	r2, pc, #4	; (adr r2, 8000244 <CallGate+0x40>)
 8000240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000244:	08000259 	.word	0x08000259
 8000248:	08000271 	.word	0x08000271
 800024c:	080002bb 	.word	0x080002bb
 8000250:	080002e5 	.word	0x080002e5
 8000254:	0800038b 	.word	0x0800038b
    {
    case DICE_FID_NOOP:

        ctx->result = DICE_RC_OK;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2200      	movs	r2, #0
 800025c:	731a      	strb	r2, [r3, #12]
        if(ctx->paramSize != 0)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	2b00      	cmp	r3, #0
 8000264:	f000 80ec 	beq.w	8000440 <CallGate+0x23c>
        {
            ctx->result = DICE_RC_Bad_Parameter;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2202      	movs	r2, #2
 800026c:	731a      	strb	r2, [r3, #12]
        }
        break;
 800026e:	e0e7      	b.n	8000440 <CallGate+0x23c>
    case DICE_FID_HalHandleTable:
        if(ctx->paramSize != sizeof(DICE_PARAM_HalHandleTable))
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	689b      	ldr	r3, [r3, #8]
 8000274:	2b08      	cmp	r3, #8
 8000276:	d003      	beq.n	8000280 <CallGate+0x7c>
        {
            ctx->result = DICE_RC_Bad_Parameter;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2202      	movs	r2, #2
 800027c:	731a      	strb	r2, [r3, #12]
            if(ctx->u.HalHandleTable.in.handleTable.phUart != (UART_HandleTypeDef*)-1)
                DiceHAL.phUart = ctx->u.HalHandleTable.in.handleTable.phUart;
            memcpy(&ctx->u.HalHandleTable.out.handleTable, &DiceHAL, sizeof(DICE_HAL));
            ctx->result = DICE_RC_OK;
        }
        break;
 800027e:	e0e0      	b.n	8000442 <CallGate+0x23e>
            if(ctx->u.HalHandleTable.in.handleTable.phRng != (RNG_HandleTypeDef*)-1)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	691b      	ldr	r3, [r3, #16]
 8000284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000288:	d003      	beq.n	8000292 <CallGate+0x8e>
                DiceHAL.phRng = ctx->u.HalHandleTable.in.handleTable.phRng;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	4a78      	ldr	r2, [pc, #480]	; (8000470 <CallGate+0x26c>)
 8000290:	6013      	str	r3, [r2, #0]
            if(ctx->u.HalHandleTable.in.handleTable.phUart != (UART_HandleTypeDef*)-1)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800029a:	d003      	beq.n	80002a4 <CallGate+0xa0>
                DiceHAL.phUart = ctx->u.HalHandleTable.in.handleTable.phUart;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	695b      	ldr	r3, [r3, #20]
 80002a0:	4a73      	ldr	r2, [pc, #460]	; (8000470 <CallGate+0x26c>)
 80002a2:	6053      	str	r3, [r2, #4]
            memcpy(&ctx->u.HalHandleTable.out.handleTable, &DiceHAL, sizeof(DICE_HAL));
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	3310      	adds	r3, #16
 80002a8:	2208      	movs	r2, #8
 80002aa:	4971      	ldr	r1, [pc, #452]	; (8000470 <CallGate+0x26c>)
 80002ac:	4618      	mov	r0, r3
 80002ae:	f003 fcdd 	bl	8003c6c <memcpy>
            ctx->result = DICE_RC_OK;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2200      	movs	r2, #0
 80002b6:	731a      	strb	r2, [r3, #12]
        break;
 80002b8:	e0c3      	b.n	8000442 <CallGate+0x23e>
    case DICE_FID_GetRandom:
        if(ctx->paramSize != sizeof(DICE_PARAM_GetRandom))
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	2b08      	cmp	r3, #8
 80002c0:	d003      	beq.n	80002ca <CallGate+0xc6>
        {
            ctx->result = DICE_RC_Bad_Parameter;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2202      	movs	r2, #2
 80002c6:	731a      	strb	r2, [r3, #12]
        }
        else
        {
            ctx->result = GetRandom(ctx->u.GetRandom.in.entropy, ctx->u.GetRandom.in.size);
        }
        break;
 80002c8:	e0bb      	b.n	8000442 <CallGate+0x23e>
            ctx->result = GetRandom(ctx->u.GetRandom.in.entropy, ctx->u.GetRandom.in.size);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	691a      	ldr	r2, [r3, #16]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	4619      	mov	r1, r3
 80002d4:	4610      	mov	r0, r2
 80002d6:	f003 fb3b 	bl	8003950 <GetRandom>
 80002da:	4603      	mov	r3, r0
 80002dc:	461a      	mov	r2, r3
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	731a      	strb	r2, [r3, #12]
        break;
 80002e2:	e0ae      	b.n	8000442 <CallGate+0x23e>
    case DICE_FID_SHA256:
        if(ctx->paramSize != sizeof(DICE_PARAM_SHA256))
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	2b20      	cmp	r3, #32
 80002ea:	d003      	beq.n	80002f4 <CallGate+0xf0>
        {
            ctx->result = DICE_RC_Bad_Parameter;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2202      	movs	r2, #2
 80002f0:	731a      	strb	r2, [r3, #12]
            {
                memcpy(digestOut, ctx->u.SHA256.out.digest, sizeof(ctx->u.SHA256.out.digest));
            }
            ctx->result = DICE_RC_OK;
        }
        break;
 80002f2:	e0a6      	b.n	8000442 <CallGate+0x23e>
            uint8_t* digestOut = ctx->u.SHA256.in.digest;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	69db      	ldr	r3, [r3, #28]
 80002f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            DICE_SHA256_CONTEXT context = {0};
 80002fc:	f107 0308 	add.w	r3, r7, #8
 8000300:	2270      	movs	r2, #112	; 0x70
 8000302:	2100      	movs	r1, #0
 8000304:	4618      	mov	r0, r3
 8000306:	f003 fcbc 	bl	8003c82 <memset>
            Dice_SHA256_Init(&context);
 800030a:	f107 0308 	add.w	r3, r7, #8
 800030e:	4618      	mov	r0, r3
 8000310:	f002 ff46 	bl	80031a0 <Dice_SHA256_Init>
            for(uint32_t n = 0; n < ctx->u.SHA256.in.segments; n++)
 8000314:	2300      	movs	r3, #0
 8000316:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800031a:	e017      	b.n	800034c <CallGate+0x148>
                Dice_SHA256_Update(&context, ctx->u.SHA256.in.data[n], ctx->u.SHA256.in.size[n]);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	695a      	ldr	r2, [r3, #20]
 8000320:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000324:	009b      	lsls	r3, r3, #2
 8000326:	4413      	add	r3, r2
 8000328:	6819      	ldr	r1, [r3, #0]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	699a      	ldr	r2, [r3, #24]
 800032e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000332:	009b      	lsls	r3, r3, #2
 8000334:	4413      	add	r3, r2
 8000336:	681a      	ldr	r2, [r3, #0]
 8000338:	f107 0308 	add.w	r3, r7, #8
 800033c:	4618      	mov	r0, r3
 800033e:	f003 f8ef 	bl	8003520 <Dice_SHA256_Update>
            for(uint32_t n = 0; n < ctx->u.SHA256.in.segments; n++)
 8000342:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000346:	3301      	adds	r3, #1
 8000348:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	691a      	ldr	r2, [r3, #16]
 8000350:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000354:	429a      	cmp	r2, r3
 8000356:	d8e1      	bhi.n	800031c <CallGate+0x118>
            Dice_SHA256_Final(&context, ctx->u.SHA256.out.digest);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	f103 0210 	add.w	r2, r3, #16
 800035e:	f107 0308 	add.w	r3, r7, #8
 8000362:	4611      	mov	r1, r2
 8000364:	4618      	mov	r0, r3
 8000366:	f003 f99b 	bl	80036a0 <Dice_SHA256_Final>
            if(digestOut != NULL)
 800036a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800036e:	2b00      	cmp	r3, #0
 8000370:	d007      	beq.n	8000382 <CallGate+0x17e>
                memcpy(digestOut, ctx->u.SHA256.out.digest, sizeof(ctx->u.SHA256.out.digest));
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	3310      	adds	r3, #16
 8000376:	2220      	movs	r2, #32
 8000378:	4619      	mov	r1, r3
 800037a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800037e:	f003 fc75 	bl	8003c6c <memcpy>
            ctx->result = DICE_RC_OK;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2200      	movs	r2, #0
 8000386:	731a      	strb	r2, [r3, #12]
        break;
 8000388:	e05b      	b.n	8000442 <CallGate+0x23e>
    case DICE_FID_HMACSHA256:
        if(ctx->paramSize != sizeof(DICE_PARAM_HMACSHA256))
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	689b      	ldr	r3, [r3, #8]
 800038e:	2b20      	cmp	r3, #32
 8000390:	d003      	beq.n	800039a <CallGate+0x196>
        {
            ctx->result = DICE_RC_Bad_Parameter;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	2202      	movs	r2, #2
 8000396:	731a      	strb	r2, [r3, #12]
            {
                memcpy(digestOut, ctx->u.HMACSHA256.out.hmac, sizeof(ctx->u.HMACSHA256.out.hmac));
            }
            ctx->result = DICE_RC_OK;
        }
        break;
 8000398:	e053      	b.n	8000442 <CallGate+0x23e>
            uint8_t* digestOut = ctx->u.HMACSHA256.in.hmac;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800039e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            DICE_HMAC_SHA256_CTX context = {0};
 80003a2:	f107 0308 	add.w	r3, r7, #8
 80003a6:	22b0      	movs	r2, #176	; 0xb0
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f003 fc69 	bl	8003c82 <memset>
            Dice_HMAC_SHA256_Init(&context, ctx->u.HMACSHA256.in.key, ctx->u.HMACSHA256.in.keySize);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	6919      	ldr	r1, [r3, #16]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	695a      	ldr	r2, [r3, #20]
 80003b8:	f107 0308 	add.w	r3, r7, #8
 80003bc:	4618      	mov	r0, r3
 80003be:	f002 fe42 	bl	8003046 <Dice_HMAC_SHA256_Init>
            for(uint32_t n = 0; n < ctx->u.HMACSHA256.in.segments; n++)
 80003c2:	2300      	movs	r3, #0
 80003c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80003c8:	e017      	b.n	80003fa <CallGate+0x1f6>
                Dice_HMAC_SHA256_Update(&context, ctx->u.HMACSHA256.in.data[n], ctx->u.HMACSHA256.in.dataSize[n]);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	69da      	ldr	r2, [r3, #28]
 80003ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	4413      	add	r3, r2
 80003d6:	6819      	ldr	r1, [r3, #0]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	6a1a      	ldr	r2, [r3, #32]
 80003dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80003e0:	009b      	lsls	r3, r3, #2
 80003e2:	4413      	add	r3, r2
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	f107 0308 	add.w	r3, r7, #8
 80003ea:	4618      	mov	r0, r3
 80003ec:	f002 fea4 	bl	8003138 <Dice_HMAC_SHA256_Update>
            for(uint32_t n = 0; n < ctx->u.HMACSHA256.in.segments; n++)
 80003f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80003f4:	3301      	adds	r3, #1
 80003f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	699a      	ldr	r2, [r3, #24]
 80003fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000402:	429a      	cmp	r2, r3
 8000404:	d8e1      	bhi.n	80003ca <CallGate+0x1c6>
            Dice_HMAC_SHA256_Final(&context, ctx->u.HMACSHA256.out.hmac);
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	f103 0210 	add.w	r2, r3, #16
 800040c:	f107 0308 	add.w	r3, r7, #8
 8000410:	4611      	mov	r1, r2
 8000412:	4618      	mov	r0, r3
 8000414:	f002 fea0 	bl	8003158 <Dice_HMAC_SHA256_Final>
            if(digestOut != NULL)
 8000418:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800041c:	2b00      	cmp	r3, #0
 800041e:	d007      	beq.n	8000430 <CallGate+0x22c>
                memcpy(digestOut, ctx->u.HMACSHA256.out.hmac, sizeof(ctx->u.HMACSHA256.out.hmac));
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	3310      	adds	r3, #16
 8000424:	2220      	movs	r2, #32
 8000426:	4619      	mov	r1, r3
 8000428:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800042c:	f003 fc1e 	bl	8003c6c <memcpy>
            ctx->result = DICE_RC_OK;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2200      	movs	r2, #0
 8000434:	731a      	strb	r2, [r3, #12]
        break;
 8000436:	e004      	b.n	8000442 <CallGate+0x23e>
    default:
        ctx->result = DICE_RC_Bad_FID;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	731a      	strb	r2, [r3, #12]
        break;
 800043e:	e000      	b.n	8000442 <CallGate+0x23e>
        break;
 8000440:	bf00      	nop
    }

Cleanup:
    // Swap the stack back and return
    sp_alias = outsideSP;
 8000442:	4b07      	ldr	r3, [pc, #28]	; (8000460 <CallGate+0x25c>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	469d      	mov	sp, r3
    memset(secureStack, 0x00, sizeof(secureStack));
 8000448:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800044c:	2100      	movs	r1, #0
 800044e:	4809      	ldr	r0, [pc, #36]	; (8000474 <CallGate+0x270>)
 8000450:	f003 fc17 	bl	8003c82 <memset>
    return CallGateResult;
 8000454:	4b04      	ldr	r3, [pc, #16]	; (8000468 <CallGate+0x264>)
 8000456:	681b      	ldr	r3, [r3, #0]
}
 8000458:	4618      	mov	r0, r3
 800045a:	37c8      	adds	r7, #200	; 0xc8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	2000002c 	.word	0x2000002c
 8000464:	20000434 	.word	0x20000434
 8000468:	20000028 	.word	0x20000028
 800046c:	65636944 	.word	0x65636944
 8000470:	20000020 	.word	0x20000020
 8000474:	20000034 	.word	0x20000034

Disassembly of section .text:

08000478 <__do_global_dtors_aux>:
 8000478:	b510      	push	{r4, lr}
 800047a:	4c05      	ldr	r4, [pc, #20]	; (8000490 <__do_global_dtors_aux+0x18>)
 800047c:	7823      	ldrb	r3, [r4, #0]
 800047e:	b933      	cbnz	r3, 800048e <__do_global_dtors_aux+0x16>
 8000480:	4b04      	ldr	r3, [pc, #16]	; (8000494 <__do_global_dtors_aux+0x1c>)
 8000482:	b113      	cbz	r3, 800048a <__do_global_dtors_aux+0x12>
 8000484:	4804      	ldr	r0, [pc, #16]	; (8000498 <__do_global_dtors_aux+0x20>)
 8000486:	f3af 8000 	nop.w
 800048a:	2301      	movs	r3, #1
 800048c:	7023      	strb	r3, [r4, #0]
 800048e:	bd10      	pop	{r4, pc}
 8000490:	20000004 	.word	0x20000004
 8000494:	00000000 	.word	0x00000000
 8000498:	08003c94 	.word	0x08003c94

0800049c <frame_dummy>:
 800049c:	b508      	push	{r3, lr}
 800049e:	4b03      	ldr	r3, [pc, #12]	; (80004ac <frame_dummy+0x10>)
 80004a0:	b11b      	cbz	r3, 80004aa <frame_dummy+0xe>
 80004a2:	4903      	ldr	r1, [pc, #12]	; (80004b0 <frame_dummy+0x14>)
 80004a4:	4803      	ldr	r0, [pc, #12]	; (80004b4 <frame_dummy+0x18>)
 80004a6:	f3af 8000 	nop.w
 80004aa:	bd08      	pop	{r3, pc}
 80004ac:	00000000 	.word	0x00000000
 80004b0:	20000008 	.word	0x20000008
 80004b4:	08003c94 	.word	0x08003c94

080004b8 <__aeabi_uldivmod>:
 80004b8:	b953      	cbnz	r3, 80004d0 <__aeabi_uldivmod+0x18>
 80004ba:	b94a      	cbnz	r2, 80004d0 <__aeabi_uldivmod+0x18>
 80004bc:	2900      	cmp	r1, #0
 80004be:	bf08      	it	eq
 80004c0:	2800      	cmpeq	r0, #0
 80004c2:	bf1c      	itt	ne
 80004c4:	f04f 31ff 	movne.w	r1, #4294967295
 80004c8:	f04f 30ff 	movne.w	r0, #4294967295
 80004cc:	f000 b97a 	b.w	80007c4 <__aeabi_idiv0>
 80004d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80004d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004d8:	f000 f806 	bl	80004e8 <__udivmoddi4>
 80004dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004e4:	b004      	add	sp, #16
 80004e6:	4770      	bx	lr

080004e8 <__udivmoddi4>:
 80004e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004ec:	468c      	mov	ip, r1
 80004ee:	460d      	mov	r5, r1
 80004f0:	4604      	mov	r4, r0
 80004f2:	9e08      	ldr	r6, [sp, #32]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d151      	bne.n	800059c <__udivmoddi4+0xb4>
 80004f8:	428a      	cmp	r2, r1
 80004fa:	4617      	mov	r7, r2
 80004fc:	d96d      	bls.n	80005da <__udivmoddi4+0xf2>
 80004fe:	fab2 fe82 	clz	lr, r2
 8000502:	f1be 0f00 	cmp.w	lr, #0
 8000506:	d00b      	beq.n	8000520 <__udivmoddi4+0x38>
 8000508:	f1ce 0c20 	rsb	ip, lr, #32
 800050c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000510:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000514:	fa02 f70e 	lsl.w	r7, r2, lr
 8000518:	ea4c 0c05 	orr.w	ip, ip, r5
 800051c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000520:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000524:	0c25      	lsrs	r5, r4, #16
 8000526:	fbbc f8fa 	udiv	r8, ip, sl
 800052a:	fa1f f987 	uxth.w	r9, r7
 800052e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000532:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000536:	fb08 f309 	mul.w	r3, r8, r9
 800053a:	42ab      	cmp	r3, r5
 800053c:	d90a      	bls.n	8000554 <__udivmoddi4+0x6c>
 800053e:	19ed      	adds	r5, r5, r7
 8000540:	f108 32ff 	add.w	r2, r8, #4294967295
 8000544:	f080 8123 	bcs.w	800078e <__udivmoddi4+0x2a6>
 8000548:	42ab      	cmp	r3, r5
 800054a:	f240 8120 	bls.w	800078e <__udivmoddi4+0x2a6>
 800054e:	f1a8 0802 	sub.w	r8, r8, #2
 8000552:	443d      	add	r5, r7
 8000554:	1aed      	subs	r5, r5, r3
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb5 f0fa 	udiv	r0, r5, sl
 800055c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000560:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000564:	fb00 f909 	mul.w	r9, r0, r9
 8000568:	45a1      	cmp	r9, r4
 800056a:	d909      	bls.n	8000580 <__udivmoddi4+0x98>
 800056c:	19e4      	adds	r4, r4, r7
 800056e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000572:	f080 810a 	bcs.w	800078a <__udivmoddi4+0x2a2>
 8000576:	45a1      	cmp	r9, r4
 8000578:	f240 8107 	bls.w	800078a <__udivmoddi4+0x2a2>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	eba4 0409 	sub.w	r4, r4, r9
 8000584:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000588:	2100      	movs	r1, #0
 800058a:	2e00      	cmp	r6, #0
 800058c:	d061      	beq.n	8000652 <__udivmoddi4+0x16a>
 800058e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000592:	2300      	movs	r3, #0
 8000594:	6034      	str	r4, [r6, #0]
 8000596:	6073      	str	r3, [r6, #4]
 8000598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059c:	428b      	cmp	r3, r1
 800059e:	d907      	bls.n	80005b0 <__udivmoddi4+0xc8>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d054      	beq.n	800064e <__udivmoddi4+0x166>
 80005a4:	2100      	movs	r1, #0
 80005a6:	e886 0021 	stmia.w	r6, {r0, r5}
 80005aa:	4608      	mov	r0, r1
 80005ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005b0:	fab3 f183 	clz	r1, r3
 80005b4:	2900      	cmp	r1, #0
 80005b6:	f040 808e 	bne.w	80006d6 <__udivmoddi4+0x1ee>
 80005ba:	42ab      	cmp	r3, r5
 80005bc:	d302      	bcc.n	80005c4 <__udivmoddi4+0xdc>
 80005be:	4282      	cmp	r2, r0
 80005c0:	f200 80fa 	bhi.w	80007b8 <__udivmoddi4+0x2d0>
 80005c4:	1a84      	subs	r4, r0, r2
 80005c6:	eb65 0503 	sbc.w	r5, r5, r3
 80005ca:	2001      	movs	r0, #1
 80005cc:	46ac      	mov	ip, r5
 80005ce:	2e00      	cmp	r6, #0
 80005d0:	d03f      	beq.n	8000652 <__udivmoddi4+0x16a>
 80005d2:	e886 1010 	stmia.w	r6, {r4, ip}
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	b912      	cbnz	r2, 80005e2 <__udivmoddi4+0xfa>
 80005dc:	2701      	movs	r7, #1
 80005de:	fbb7 f7f2 	udiv	r7, r7, r2
 80005e2:	fab7 fe87 	clz	lr, r7
 80005e6:	f1be 0f00 	cmp.w	lr, #0
 80005ea:	d134      	bne.n	8000656 <__udivmoddi4+0x16e>
 80005ec:	1beb      	subs	r3, r5, r7
 80005ee:	0c3a      	lsrs	r2, r7, #16
 80005f0:	fa1f fc87 	uxth.w	ip, r7
 80005f4:	2101      	movs	r1, #1
 80005f6:	fbb3 f8f2 	udiv	r8, r3, r2
 80005fa:	0c25      	lsrs	r5, r4, #16
 80005fc:	fb02 3318 	mls	r3, r2, r8, r3
 8000600:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000604:	fb0c f308 	mul.w	r3, ip, r8
 8000608:	42ab      	cmp	r3, r5
 800060a:	d907      	bls.n	800061c <__udivmoddi4+0x134>
 800060c:	19ed      	adds	r5, r5, r7
 800060e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000612:	d202      	bcs.n	800061a <__udivmoddi4+0x132>
 8000614:	42ab      	cmp	r3, r5
 8000616:	f200 80d1 	bhi.w	80007bc <__udivmoddi4+0x2d4>
 800061a:	4680      	mov	r8, r0
 800061c:	1aed      	subs	r5, r5, r3
 800061e:	b2a3      	uxth	r3, r4
 8000620:	fbb5 f0f2 	udiv	r0, r5, r2
 8000624:	fb02 5510 	mls	r5, r2, r0, r5
 8000628:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800062c:	fb0c fc00 	mul.w	ip, ip, r0
 8000630:	45a4      	cmp	ip, r4
 8000632:	d907      	bls.n	8000644 <__udivmoddi4+0x15c>
 8000634:	19e4      	adds	r4, r4, r7
 8000636:	f100 33ff 	add.w	r3, r0, #4294967295
 800063a:	d202      	bcs.n	8000642 <__udivmoddi4+0x15a>
 800063c:	45a4      	cmp	ip, r4
 800063e:	f200 80b8 	bhi.w	80007b2 <__udivmoddi4+0x2ca>
 8000642:	4618      	mov	r0, r3
 8000644:	eba4 040c 	sub.w	r4, r4, ip
 8000648:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800064c:	e79d      	b.n	800058a <__udivmoddi4+0xa2>
 800064e:	4631      	mov	r1, r6
 8000650:	4630      	mov	r0, r6
 8000652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000656:	f1ce 0420 	rsb	r4, lr, #32
 800065a:	fa05 f30e 	lsl.w	r3, r5, lr
 800065e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000662:	fa20 f804 	lsr.w	r8, r0, r4
 8000666:	0c3a      	lsrs	r2, r7, #16
 8000668:	fa25 f404 	lsr.w	r4, r5, r4
 800066c:	ea48 0803 	orr.w	r8, r8, r3
 8000670:	fbb4 f1f2 	udiv	r1, r4, r2
 8000674:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000678:	fb02 4411 	mls	r4, r2, r1, r4
 800067c:	fa1f fc87 	uxth.w	ip, r7
 8000680:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000684:	fb01 f30c 	mul.w	r3, r1, ip
 8000688:	42ab      	cmp	r3, r5
 800068a:	fa00 f40e 	lsl.w	r4, r0, lr
 800068e:	d909      	bls.n	80006a4 <__udivmoddi4+0x1bc>
 8000690:	19ed      	adds	r5, r5, r7
 8000692:	f101 30ff 	add.w	r0, r1, #4294967295
 8000696:	f080 808a 	bcs.w	80007ae <__udivmoddi4+0x2c6>
 800069a:	42ab      	cmp	r3, r5
 800069c:	f240 8087 	bls.w	80007ae <__udivmoddi4+0x2c6>
 80006a0:	3902      	subs	r1, #2
 80006a2:	443d      	add	r5, r7
 80006a4:	1aeb      	subs	r3, r5, r3
 80006a6:	fa1f f588 	uxth.w	r5, r8
 80006aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80006ae:	fb02 3310 	mls	r3, r2, r0, r3
 80006b2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80006b6:	fb00 f30c 	mul.w	r3, r0, ip
 80006ba:	42ab      	cmp	r3, r5
 80006bc:	d907      	bls.n	80006ce <__udivmoddi4+0x1e6>
 80006be:	19ed      	adds	r5, r5, r7
 80006c0:	f100 38ff 	add.w	r8, r0, #4294967295
 80006c4:	d26f      	bcs.n	80007a6 <__udivmoddi4+0x2be>
 80006c6:	42ab      	cmp	r3, r5
 80006c8:	d96d      	bls.n	80007a6 <__udivmoddi4+0x2be>
 80006ca:	3802      	subs	r0, #2
 80006cc:	443d      	add	r5, r7
 80006ce:	1aeb      	subs	r3, r5, r3
 80006d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006d4:	e78f      	b.n	80005f6 <__udivmoddi4+0x10e>
 80006d6:	f1c1 0720 	rsb	r7, r1, #32
 80006da:	fa22 f807 	lsr.w	r8, r2, r7
 80006de:	408b      	lsls	r3, r1
 80006e0:	fa05 f401 	lsl.w	r4, r5, r1
 80006e4:	ea48 0303 	orr.w	r3, r8, r3
 80006e8:	fa20 fe07 	lsr.w	lr, r0, r7
 80006ec:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80006f0:	40fd      	lsrs	r5, r7
 80006f2:	ea4e 0e04 	orr.w	lr, lr, r4
 80006f6:	fbb5 f9fc 	udiv	r9, r5, ip
 80006fa:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80006fe:	fb0c 5519 	mls	r5, ip, r9, r5
 8000702:	fa1f f883 	uxth.w	r8, r3
 8000706:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800070a:	fb09 f408 	mul.w	r4, r9, r8
 800070e:	42ac      	cmp	r4, r5
 8000710:	fa02 f201 	lsl.w	r2, r2, r1
 8000714:	fa00 fa01 	lsl.w	sl, r0, r1
 8000718:	d908      	bls.n	800072c <__udivmoddi4+0x244>
 800071a:	18ed      	adds	r5, r5, r3
 800071c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000720:	d243      	bcs.n	80007aa <__udivmoddi4+0x2c2>
 8000722:	42ac      	cmp	r4, r5
 8000724:	d941      	bls.n	80007aa <__udivmoddi4+0x2c2>
 8000726:	f1a9 0902 	sub.w	r9, r9, #2
 800072a:	441d      	add	r5, r3
 800072c:	1b2d      	subs	r5, r5, r4
 800072e:	fa1f fe8e 	uxth.w	lr, lr
 8000732:	fbb5 f0fc 	udiv	r0, r5, ip
 8000736:	fb0c 5510 	mls	r5, ip, r0, r5
 800073a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800073e:	fb00 f808 	mul.w	r8, r0, r8
 8000742:	45a0      	cmp	r8, r4
 8000744:	d907      	bls.n	8000756 <__udivmoddi4+0x26e>
 8000746:	18e4      	adds	r4, r4, r3
 8000748:	f100 35ff 	add.w	r5, r0, #4294967295
 800074c:	d229      	bcs.n	80007a2 <__udivmoddi4+0x2ba>
 800074e:	45a0      	cmp	r8, r4
 8000750:	d927      	bls.n	80007a2 <__udivmoddi4+0x2ba>
 8000752:	3802      	subs	r0, #2
 8000754:	441c      	add	r4, r3
 8000756:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800075a:	eba4 0408 	sub.w	r4, r4, r8
 800075e:	fba0 8902 	umull	r8, r9, r0, r2
 8000762:	454c      	cmp	r4, r9
 8000764:	46c6      	mov	lr, r8
 8000766:	464d      	mov	r5, r9
 8000768:	d315      	bcc.n	8000796 <__udivmoddi4+0x2ae>
 800076a:	d012      	beq.n	8000792 <__udivmoddi4+0x2aa>
 800076c:	b156      	cbz	r6, 8000784 <__udivmoddi4+0x29c>
 800076e:	ebba 030e 	subs.w	r3, sl, lr
 8000772:	eb64 0405 	sbc.w	r4, r4, r5
 8000776:	fa04 f707 	lsl.w	r7, r4, r7
 800077a:	40cb      	lsrs	r3, r1
 800077c:	431f      	orrs	r7, r3
 800077e:	40cc      	lsrs	r4, r1
 8000780:	6037      	str	r7, [r6, #0]
 8000782:	6074      	str	r4, [r6, #4]
 8000784:	2100      	movs	r1, #0
 8000786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800078a:	4618      	mov	r0, r3
 800078c:	e6f8      	b.n	8000580 <__udivmoddi4+0x98>
 800078e:	4690      	mov	r8, r2
 8000790:	e6e0      	b.n	8000554 <__udivmoddi4+0x6c>
 8000792:	45c2      	cmp	sl, r8
 8000794:	d2ea      	bcs.n	800076c <__udivmoddi4+0x284>
 8000796:	ebb8 0e02 	subs.w	lr, r8, r2
 800079a:	eb69 0503 	sbc.w	r5, r9, r3
 800079e:	3801      	subs	r0, #1
 80007a0:	e7e4      	b.n	800076c <__udivmoddi4+0x284>
 80007a2:	4628      	mov	r0, r5
 80007a4:	e7d7      	b.n	8000756 <__udivmoddi4+0x26e>
 80007a6:	4640      	mov	r0, r8
 80007a8:	e791      	b.n	80006ce <__udivmoddi4+0x1e6>
 80007aa:	4681      	mov	r9, r0
 80007ac:	e7be      	b.n	800072c <__udivmoddi4+0x244>
 80007ae:	4601      	mov	r1, r0
 80007b0:	e778      	b.n	80006a4 <__udivmoddi4+0x1bc>
 80007b2:	3802      	subs	r0, #2
 80007b4:	443c      	add	r4, r7
 80007b6:	e745      	b.n	8000644 <__udivmoddi4+0x15c>
 80007b8:	4608      	mov	r0, r1
 80007ba:	e708      	b.n	80005ce <__udivmoddi4+0xe6>
 80007bc:	f1a8 0802 	sub.w	r8, r8, #2
 80007c0:	443d      	add	r5, r7
 80007c2:	e72b      	b.n	800061c <__udivmoddi4+0x134>

080007c4 <__aeabi_idiv0>:
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop

080007c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007cc:	2003      	movs	r0, #3
 80007ce:	f000 f8ef 	bl	80009b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f000 f806 	bl	80007e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d8:	f003 f8f8 	bl	80039cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_InitTick+0x30>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a09      	ldr	r2, [pc, #36]	; (8000818 <HAL_InitTick+0x34>)
 80007f2:	fba2 2303 	umull	r2, r3, r2, r3
 80007f6:	099b      	lsrs	r3, r3, #6
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 f900 	bl	80009fe <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80007fe:	2200      	movs	r2, #0
 8000800:	6879      	ldr	r1, [r7, #4]
 8000802:	f04f 30ff 	mov.w	r0, #4294967295
 8000806:	f000 f8de 	bl	80009c6 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 800080a:	2300      	movs	r3, #0
}
 800080c:	4618      	mov	r0, r3
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000000 	.word	0x20000000
 8000818:	10624dd3 	.word	0x10624dd3

0800081c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  uwTick++;
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <HAL_IncTick+0x18>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	3301      	adds	r3, #1
 8000826:	4a03      	ldr	r2, [pc, #12]	; (8000834 <HAL_IncTick+0x18>)
 8000828:	6013      	str	r3, [r2, #0]
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	20000030 	.word	0x20000030

08000838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return uwTick;
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <HAL_GetTick+0x14>)
 800083e:	681b      	ldr	r3, [r3, #0]
}
 8000840:	4618      	mov	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000030 	.word	0x20000030

08000850 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <NVIC_SetPriorityGrouping+0x44>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800086c:	4013      	ands	r3, r2
 800086e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800087c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000882:	4a04      	ldr	r2, [pc, #16]	; (8000894 <NVIC_SetPriorityGrouping+0x44>)
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	60d3      	str	r3, [r2, #12]
}
 8000888:	bf00      	nop
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <NVIC_GetPriorityGrouping+0x18>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	0a1b      	lsrs	r3, r3, #8
 80008a2:	f003 0307 	and.w	r3, r3, #7
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	6039      	str	r1, [r7, #0]
 80008be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80008c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	da0b      	bge.n	80008e0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c8:	490d      	ldr	r1, [pc, #52]	; (8000900 <NVIC_SetPriority+0x4c>)
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	f003 030f 	and.w	r3, r3, #15
 80008d0:	3b04      	subs	r3, #4
 80008d2:	683a      	ldr	r2, [r7, #0]
 80008d4:	b2d2      	uxtb	r2, r2
 80008d6:	0112      	lsls	r2, r2, #4
 80008d8:	b2d2      	uxtb	r2, r2
 80008da:	440b      	add	r3, r1
 80008dc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008de:	e009      	b.n	80008f4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e0:	4908      	ldr	r1, [pc, #32]	; (8000904 <NVIC_SetPriority+0x50>)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	683a      	ldr	r2, [r7, #0]
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	0112      	lsls	r2, r2, #4
 80008ec:	b2d2      	uxtb	r2, r2
 80008ee:	440b      	add	r3, r1
 80008f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	e000ed00 	.word	0xe000ed00
 8000904:	e000e100 	.word	0xe000e100

08000908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000908:	b480      	push	{r7}
 800090a:	b089      	sub	sp, #36	; 0x24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	f1c3 0307 	rsb	r3, r3, #7
 8000922:	2b04      	cmp	r3, #4
 8000924:	bf28      	it	cs
 8000926:	2304      	movcs	r3, #4
 8000928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	3304      	adds	r3, #4
 800092e:	2b06      	cmp	r3, #6
 8000930:	d902      	bls.n	8000938 <NVIC_EncodePriority+0x30>
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	3b03      	subs	r3, #3
 8000936:	e000      	b.n	800093a <NVIC_EncodePriority+0x32>
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800093c:	2201      	movs	r2, #1
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	1e5a      	subs	r2, r3, #1
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	401a      	ands	r2, r3
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800094e:	2101      	movs	r1, #1
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	fa01 f303 	lsl.w	r3, r1, r3
 8000956:	1e59      	subs	r1, r3, #1
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	4313      	orrs	r3, r2
         );
}
 800095e:	4618      	mov	r0, r3
 8000960:	3724      	adds	r7, #36	; 0x24
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
	...

0800096c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800097c:	d301      	bcc.n	8000982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800097e:	2301      	movs	r3, #1
 8000980:	e00f      	b.n	80009a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <SysTick_Config+0x40>)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800098a:	210f      	movs	r1, #15
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	f7ff ff90 	bl	80008b4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <SysTick_Config+0x40>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <SysTick_Config+0x40>)
 800099c:	2207      	movs	r2, #7
 800099e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	e000e010 	.word	0xe000e010

080009b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff ff49 	bl	8000850 <NVIC_SetPriorityGrouping>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	4603      	mov	r3, r0
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009d8:	f7ff ff5e 	bl	8000898 <NVIC_GetPriorityGrouping>
 80009dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009de:	687a      	ldr	r2, [r7, #4]
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	6978      	ldr	r0, [r7, #20]
 80009e4:	f7ff ff90 	bl	8000908 <NVIC_EncodePriority>
 80009e8:	4602      	mov	r2, r0
 80009ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ee:	4611      	mov	r1, r2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ff5f 	bl	80008b4 <NVIC_SetPriority>
}
 80009f6:	bf00      	nop
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff ffb0 	bl	800096c <SysTick_Config>
 8000a0c:	4603      	mov	r3, r0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	d106      	bne.n	8000a34 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000a26:	4a09      	ldr	r2, [pc, #36]	; (8000a4c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000a32:	e005      	b.n	8000a40 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000a34:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a36:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f023 0304 	bic.w	r3, r3, #4
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000e010 	.word	0xe000e010

08000a50 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000a54:	f000 f802 	bl	8000a5c <HAL_SYSTICK_Callback>
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b087      	sub	sp, #28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000a82:	e17f      	b.n	8000d84 <HAL_GPIO_Init+0x318>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	2101      	movs	r1, #1
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a90:	4013      	ands	r3, r2
 8000a92:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f000 8171 	beq.w	8000d7e <HAL_GPIO_Init+0x312>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d003      	beq.n	8000aac <HAL_GPIO_Init+0x40>
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	2b12      	cmp	r3, #18
 8000aaa:	d123      	bne.n	8000af4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	08da      	lsrs	r2, r3, #3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3208      	adds	r2, #8
 8000ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	f003 0307 	and.w	r3, r3, #7
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	220f      	movs	r2, #15
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4013      	ands	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	691a      	ldr	r2, [r3, #16]
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	08da      	lsrs	r2, r3, #3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3208      	adds	r2, #8
 8000aee:	6939      	ldr	r1, [r7, #16]
 8000af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	2203      	movs	r2, #3
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f003 0203 	and.w	r2, r3, #3
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d00b      	beq.n	8000b48 <HAL_GPIO_Init+0xdc>
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d007      	beq.n	8000b48 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b3c:	2b11      	cmp	r3, #17
 8000b3e:	d003      	beq.n	8000b48 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	2b12      	cmp	r3, #18
 8000b46:	d130      	bne.n	8000baa <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	2203      	movs	r2, #3
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	68da      	ldr	r2, [r3, #12]
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b7e:	2201      	movs	r2, #1
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	091b      	lsrs	r3, r3, #4
 8000b94:	f003 0201 	and.w	r2, r3, #1
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f003 0303 	and.w	r3, r3, #3
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	d118      	bne.n	8000be8 <HAL_GPIO_Init+0x17c>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	08db      	lsrs	r3, r3, #3
 8000bd2:	f003 0201 	and.w	r2, r3, #1
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	689a      	ldr	r2, [r3, #8]
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f000 80ac 	beq.w	8000d7e <HAL_GPIO_Init+0x312>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	4a5e      	ldr	r2, [pc, #376]	; (8000da0 <HAL_GPIO_Init+0x334>)
 8000c28:	4b5d      	ldr	r3, [pc, #372]	; (8000da0 <HAL_GPIO_Init+0x334>)
 8000c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6613      	str	r3, [r2, #96]	; 0x60
 8000c32:	4b5b      	ldr	r3, [pc, #364]	; (8000da0 <HAL_GPIO_Init+0x334>)
 8000c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000c3e:	4a59      	ldr	r2, [pc, #356]	; (8000da4 <HAL_GPIO_Init+0x338>)
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	3302      	adds	r3, #2
 8000c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	f003 0303 	and.w	r3, r3, #3
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	220f      	movs	r2, #15
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c68:	d025      	beq.n	8000cb6 <HAL_GPIO_Init+0x24a>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a4e      	ldr	r2, [pc, #312]	; (8000da8 <HAL_GPIO_Init+0x33c>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d01f      	beq.n	8000cb2 <HAL_GPIO_Init+0x246>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a4d      	ldr	r2, [pc, #308]	; (8000dac <HAL_GPIO_Init+0x340>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d019      	beq.n	8000cae <HAL_GPIO_Init+0x242>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a4c      	ldr	r2, [pc, #304]	; (8000db0 <HAL_GPIO_Init+0x344>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d013      	beq.n	8000caa <HAL_GPIO_Init+0x23e>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a4b      	ldr	r2, [pc, #300]	; (8000db4 <HAL_GPIO_Init+0x348>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d00d      	beq.n	8000ca6 <HAL_GPIO_Init+0x23a>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a4a      	ldr	r2, [pc, #296]	; (8000db8 <HAL_GPIO_Init+0x34c>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d007      	beq.n	8000ca2 <HAL_GPIO_Init+0x236>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a49      	ldr	r2, [pc, #292]	; (8000dbc <HAL_GPIO_Init+0x350>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d101      	bne.n	8000c9e <HAL_GPIO_Init+0x232>
 8000c9a:	2306      	movs	r3, #6
 8000c9c:	e00c      	b.n	8000cb8 <HAL_GPIO_Init+0x24c>
 8000c9e:	2307      	movs	r3, #7
 8000ca0:	e00a      	b.n	8000cb8 <HAL_GPIO_Init+0x24c>
 8000ca2:	2305      	movs	r3, #5
 8000ca4:	e008      	b.n	8000cb8 <HAL_GPIO_Init+0x24c>
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	e006      	b.n	8000cb8 <HAL_GPIO_Init+0x24c>
 8000caa:	2303      	movs	r3, #3
 8000cac:	e004      	b.n	8000cb8 <HAL_GPIO_Init+0x24c>
 8000cae:	2302      	movs	r3, #2
 8000cb0:	e002      	b.n	8000cb8 <HAL_GPIO_Init+0x24c>
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e000      	b.n	8000cb8 <HAL_GPIO_Init+0x24c>
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	f002 0203 	and.w	r2, r2, #3
 8000cbe:	0092      	lsls	r2, r2, #2
 8000cc0:	4093      	lsls	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000cc8:	4936      	ldr	r1, [pc, #216]	; (8000da4 <HAL_GPIO_Init+0x338>)
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	089b      	lsrs	r3, r3, #2
 8000cce:	3302      	adds	r3, #2
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000cd6:	4b3a      	ldr	r3, [pc, #232]	; (8000dc0 <HAL_GPIO_Init+0x354>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d003      	beq.n	8000cfa <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cfa:	4a31      	ldr	r2, [pc, #196]	; (8000dc0 <HAL_GPIO_Init+0x354>)
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000d00:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <HAL_GPIO_Init+0x354>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d24:	4a26      	ldr	r2, [pc, #152]	; (8000dc0 <HAL_GPIO_Init+0x354>)
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d2a:	4b25      	ldr	r3, [pc, #148]	; (8000dc0 <HAL_GPIO_Init+0x354>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	43db      	mvns	r3, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_Init+0x2e2>
        {
          temp |= iocurrent;
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d4e:	4a1c      	ldr	r2, [pc, #112]	; (8000dc0 <HAL_GPIO_Init+0x354>)
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <HAL_GPIO_Init+0x354>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d003      	beq.n	8000d78 <HAL_GPIO_Init+0x30c>
        {
          temp |= iocurrent;
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d78:	4a11      	ldr	r2, [pc, #68]	; (8000dc0 <HAL_GPIO_Init+0x354>)
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3301      	adds	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f47f ae78 	bne.w	8000a84 <HAL_GPIO_Init+0x18>
  }
}
 8000d94:	bf00      	nop
 8000d96:	371c      	adds	r7, #28
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40010000 	.word	0x40010000
 8000da8:	48000400 	.word	0x48000400
 8000dac:	48000800 	.word	0x48000800
 8000db0:	48000c00 	.word	0x48000c00
 8000db4:	48001000 	.word	0x48001000
 8000db8:	48001400 	.word	0x48001400
 8000dbc:	48001800 	.word	0x48001800
 8000dc0:	40010400 	.word	0x40010400

08000dc4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <HAL_PWREx_GetVoltageRange+0x18>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40007000 	.word	0x40007000

08000de0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index = 0;  
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000df2:	d12f      	bne.n	8000e54 <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000df4:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e00:	d037      	beq.n	8000e72 <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e02:	4a1f      	ldr	r2, [pc, #124]	; (8000e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e04:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e10:	6013      	str	r3, [r2, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000e12:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e18:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1c:	0c9b      	lsrs	r3, r3, #18
 8000e1e:	2232      	movs	r2, #50	; 0x32
 8000e20:	fb02 f303 	mul.w	r3, r2, r3
 8000e24:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8000e26:	e002      	b.n	8000e2e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d006      	beq.n	8000e42 <HAL_PWREx_ControlVoltageScaling+0x62>
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e40:	d0f2      	beq.n	8000e28 <HAL_PWREx_ControlVoltageScaling+0x48>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e4e:	d110      	bne.n	8000e72 <HAL_PWREx_ControlVoltageScaling+0x92>
      {
        return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e00f      	b.n	8000e74 <HAL_PWREx_ControlVoltageScaling+0x94>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e60:	d007      	beq.n	8000e72 <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e62:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e70:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
}  
 8000e74:	4618      	mov	r0, r3
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	40007000 	.word	0x40007000
 8000e84:	20000000 	.word	0x20000000
 8000e88:	431bde83 	.word	0x431bde83

08000e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08c      	sub	sp, #48	; 0x30
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 0310 	and.w	r3, r3, #16
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 80db 	beq.w	800105c <HAL_RCC_OscConfig+0x1d0>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000ea6:	4ba2      	ldr	r3, [pc, #648]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f003 030c 	and.w	r3, r3, #12
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f040 8084 	bne.w	8000fbc <HAL_RCC_OscConfig+0x130>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000eb4:	4b9e      	ldr	r3, [pc, #632]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0302 	and.w	r3, r3, #2
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d005      	beq.n	8000ecc <HAL_RCC_OscConfig+0x40>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d101      	bne.n	8000ecc <HAL_RCC_OscConfig+0x40>
      {
        return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e35f      	b.n	800158c <HAL_RCC_OscConfig+0x700>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6a1a      	ldr	r2, [r3, #32]
 8000ed0:	4b97      	ldr	r3, [pc, #604]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0308 	and.w	r3, r3, #8
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d004      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x5a>
 8000edc:	4b94      	ldr	r3, [pc, #592]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ee4:	e005      	b.n	8000ef2 <HAL_RCC_OscConfig+0x66>
 8000ee6:	4b92      	ldr	r3, [pc, #584]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8000ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eec:	091b      	lsrs	r3, r3, #4
 8000eee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d923      	bls.n	8000f3e <HAL_RCC_OscConfig+0xb2>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a1b      	ldr	r3, [r3, #32]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 fdb8 	bl	8001a70 <RCC_SetFlashLatencyFromMSIRange>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e340      	b.n	800158c <HAL_RCC_OscConfig+0x700>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f0a:	4a89      	ldr	r2, [pc, #548]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8000f0c:	4b88      	ldr	r3, [pc, #544]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	4986      	ldr	r1, [pc, #536]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8000f18:	4b85      	ldr	r3, [pc, #532]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a1b      	ldr	r3, [r3, #32]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f28:	4981      	ldr	r1, [pc, #516]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8000f2a:	4b81      	ldr	r3, [pc, #516]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	604b      	str	r3, [r1, #4]
 8000f3c:	e022      	b.n	8000f84 <HAL_RCC_OscConfig+0xf8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f3e:	4a7c      	ldr	r2, [pc, #496]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8000f40:	4b7b      	ldr	r3, [pc, #492]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f043 0308 	orr.w	r3, r3, #8
 8000f48:	6013      	str	r3, [r2, #0]
 8000f4a:	4979      	ldr	r1, [pc, #484]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8000f4c:	4b78      	ldr	r3, [pc, #480]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f5c:	4974      	ldr	r1, [pc, #464]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8000f5e:	4b74      	ldr	r3, [pc, #464]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	021b      	lsls	r3, r3, #8
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 fd7b 	bl	8001a70 <RCC_SetFlashLatencyFromMSIRange>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e303      	b.n	800158c <HAL_RCC_OscConfig+0x700>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000f84:	f000 fc2a 	bl	80017dc <HAL_RCC_GetSysClockFreq>
 8000f88:	4601      	mov	r1, r0
 8000f8a:	4b69      	ldr	r3, [pc, #420]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000f92:	23f0      	movs	r3, #240	; 0xf0
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f98:	fa93 f3a3 	rbit	r3, r3
 8000f9c:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000f9e:	6a3b      	ldr	r3, [r7, #32]
 8000fa0:	fab3 f383 	clz	r3, r3
 8000fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa8:	4a62      	ldr	r2, [pc, #392]	; (8001134 <HAL_RCC_OscConfig+0x2a8>)
 8000faa:	5cd3      	ldrb	r3, [r2, r3]
 8000fac:	fa21 f303 	lsr.w	r3, r1, r3
 8000fb0:	4a61      	ldr	r2, [pc, #388]	; (8001138 <HAL_RCC_OscConfig+0x2ac>)
 8000fb2:	6013      	str	r3, [r2, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f7ff fc15 	bl	80007e4 <HAL_InitTick>
 8000fba:	e04f      	b.n	800105c <HAL_RCC_OscConfig+0x1d0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d032      	beq.n	800102a <HAL_RCC_OscConfig+0x19e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fc4:	4a5a      	ldr	r2, [pc, #360]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8000fc6:	4b5a      	ldr	r3, [pc, #360]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fc32 	bl	8000838 <HAL_GetTick>
 8000fd4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fd8:	f7ff fc2e 	bl	8000838 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e2d0      	b.n	800158c <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000fea:	4b51      	ldr	r3, [pc, #324]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0f0      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x14c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ff6:	4a4e      	ldr	r2, [pc, #312]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8000ff8:	4b4d      	ldr	r3, [pc, #308]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	494b      	ldr	r1, [pc, #300]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8001004:	4b4a      	ldr	r3, [pc, #296]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	4313      	orrs	r3, r2
 8001012:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001014:	4946      	ldr	r1, [pc, #280]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8001016:	4b46      	ldr	r3, [pc, #280]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	4313      	orrs	r3, r2
 8001026:	604b      	str	r3, [r1, #4]
 8001028:	e018      	b.n	800105c <HAL_RCC_OscConfig+0x1d0>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800102a:	4a41      	ldr	r2, [pc, #260]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 800102c:	4b40      	ldr	r3, [pc, #256]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f023 0301 	bic.w	r3, r3, #1
 8001034:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001036:	f7ff fbff 	bl	8000838 <HAL_GetTick>
 800103a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 800103c:	e008      	b.n	8001050 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800103e:	f7ff fbfb 	bl	8000838 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e29d      	b.n	800158c <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001050:	4b37      	ldr	r3, [pc, #220]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1f0      	bne.n	800103e <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	2b00      	cmp	r3, #0
 8001066:	d07a      	beq.n	800115e <HAL_RCC_OscConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8001068:	4b31      	ldr	r3, [pc, #196]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f003 030c 	and.w	r3, r3, #12
 8001070:	2b08      	cmp	r3, #8
 8001072:	d00b      	beq.n	800108c <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001074:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 800107c:	2b0c      	cmp	r3, #12
 800107e:	d111      	bne.n	80010a4 <HAL_RCC_OscConfig+0x218>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001080:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b03      	cmp	r3, #3
 800108a:	d10b      	bne.n	80010a4 <HAL_RCC_OscConfig+0x218>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800108c:	4b28      	ldr	r3, [pc, #160]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d061      	beq.n	800115c <HAL_RCC_OscConfig+0x2d0>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d15d      	bne.n	800115c <HAL_RCC_OscConfig+0x2d0>
      {
        return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e273      	b.n	800158c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ac:	d106      	bne.n	80010bc <HAL_RCC_OscConfig+0x230>
 80010ae:	4a20      	ldr	r2, [pc, #128]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 80010b0:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	e01d      	b.n	80010f8 <HAL_RCC_OscConfig+0x26c>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010c4:	d10c      	bne.n	80010e0 <HAL_RCC_OscConfig+0x254>
 80010c6:	4a1a      	ldr	r2, [pc, #104]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	4a17      	ldr	r2, [pc, #92]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	e00b      	b.n	80010f8 <HAL_RCC_OscConfig+0x26c>
 80010e0:	4a13      	ldr	r2, [pc, #76]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4a10      	ldr	r2, [pc, #64]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d013      	beq.n	8001128 <HAL_RCC_OscConfig+0x29c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001100:	f7ff fb9a 	bl	8000838 <HAL_GetTick>
 8001104:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0x28e>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001108:	f7ff fb96 	bl	8000838 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b64      	cmp	r3, #100	; 0x64
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x28e>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e238      	b.n	800158c <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <HAL_RCC_OscConfig+0x2a4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0f0      	beq.n	8001108 <HAL_RCC_OscConfig+0x27c>
 8001126:	e01a      	b.n	800115e <HAL_RCC_OscConfig+0x2d2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001128:	f7ff fb86 	bl	8000838 <HAL_GetTick>
 800112c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800112e:	e00e      	b.n	800114e <HAL_RCC_OscConfig+0x2c2>
 8001130:	40021000 	.word	0x40021000
 8001134:	08003ddc 	.word	0x08003ddc
 8001138:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800113c:	f7ff fb7c 	bl	8000838 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b64      	cmp	r3, #100	; 0x64
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x2c2>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e21e      	b.n	800158c <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800114e:	4bb0      	ldr	r3, [pc, #704]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f0      	bne.n	800113c <HAL_RCC_OscConfig+0x2b0>
 800115a:	e000      	b.n	800115e <HAL_RCC_OscConfig+0x2d2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800115c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d07f      	beq.n	800126a <HAL_RCC_OscConfig+0x3de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800116a:	4ba9      	ldr	r3, [pc, #676]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 030c 	and.w	r3, r3, #12
 8001172:	2b04      	cmp	r3, #4
 8001174:	d00b      	beq.n	800118e <HAL_RCC_OscConfig+0x302>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001176:	4ba6      	ldr	r3, [pc, #664]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800117e:	2b0c      	cmp	r3, #12
 8001180:	d127      	bne.n	80011d2 <HAL_RCC_OscConfig+0x346>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001182:	4ba3      	ldr	r3, [pc, #652]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d121      	bne.n	80011d2 <HAL_RCC_OscConfig+0x346>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800118e:	4ba0      	ldr	r3, [pc, #640]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001196:	2b00      	cmp	r3, #0
 8001198:	d005      	beq.n	80011a6 <HAL_RCC_OscConfig+0x31a>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_RCC_OscConfig+0x31a>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e1f2      	b.n	800158c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a6:	489a      	ldr	r0, [pc, #616]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 80011a8:	4b99      	ldr	r3, [pc, #612]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6919      	ldr	r1, [r3, #16]
 80011b4:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 80011b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa93 f3a3 	rbit	r3, r3
 80011c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	fab3 f383 	clz	r3, r3
 80011c8:	fa01 f303 	lsl.w	r3, r1, r3
 80011cc:	4313      	orrs	r3, r2
 80011ce:	6043      	str	r3, [r0, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011d0:	e04b      	b.n	800126a <HAL_RCC_OscConfig+0x3de>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d02e      	beq.n	8001238 <HAL_RCC_OscConfig+0x3ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011da:	4a8d      	ldr	r2, [pc, #564]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 80011dc:	4b8c      	ldr	r3, [pc, #560]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e6:	f7ff fb27 	bl	8000838 <HAL_GetTick>
 80011ea:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x374>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ee:	f7ff fb23 	bl	8000838 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x374>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e1c5      	b.n	800158c <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001200:	4b83      	ldr	r3, [pc, #524]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f0      	beq.n	80011ee <HAL_RCC_OscConfig+0x362>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120c:	4880      	ldr	r0, [pc, #512]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 800120e:	4b80      	ldr	r3, [pc, #512]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6919      	ldr	r1, [r3, #16]
 800121a:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 800121e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa93 f3a3 	rbit	r3, r3
 8001226:	613b      	str	r3, [r7, #16]
  return(result);
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	fab3 f383 	clz	r3, r3
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	4313      	orrs	r3, r2
 8001234:	6043      	str	r3, [r0, #4]
 8001236:	e018      	b.n	800126a <HAL_RCC_OscConfig+0x3de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001238:	4a75      	ldr	r2, [pc, #468]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 800123a:	4b75      	ldr	r3, [pc, #468]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001244:	f7ff faf8 	bl	8000838 <HAL_GetTick>
 8001248:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800124c:	f7ff faf4 	bl	8000838 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e196      	b.n	800158c <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800125e:	4b6c      	ldr	r3, [pc, #432]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f0      	bne.n	800124c <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	d03c      	beq.n	80012f0 <HAL_RCC_OscConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d01c      	beq.n	80012b8 <HAL_RCC_OscConfig+0x42c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800127e:	4a64      	ldr	r2, [pc, #400]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 8001280:	4b63      	ldr	r3, [pc, #396]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 8001282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800128e:	f7ff fad3 	bl	8000838 <HAL_GetTick>
 8001292:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001296:	f7ff facf 	bl	8000838 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e171      	b.n	800158c <HAL_RCC_OscConfig+0x700>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80012a8:	4b59      	ldr	r3, [pc, #356]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 80012aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0ef      	beq.n	8001296 <HAL_RCC_OscConfig+0x40a>
 80012b6:	e01b      	b.n	80012f0 <HAL_RCC_OscConfig+0x464>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b8:	4a55      	ldr	r2, [pc, #340]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 80012ba:	4b55      	ldr	r3, [pc, #340]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 80012bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012c0:	f023 0301 	bic.w	r3, r3, #1
 80012c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c8:	f7ff fab6 	bl	8000838 <HAL_GetTick>
 80012cc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d0:	f7ff fab2 	bl	8000838 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e154      	b.n	800158c <HAL_RCC_OscConfig+0x700>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 80012e2:	4b4b      	ldr	r3, [pc, #300]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 80012e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1ef      	bne.n	80012d0 <HAL_RCC_OscConfig+0x444>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 80a9 	beq.w	8001450 <HAL_RCC_OscConfig+0x5c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001304:	4b42      	ldr	r3, [pc, #264]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 8001306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d10e      	bne.n	800132e <HAL_RCC_OscConfig+0x4a2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001310:	4a3f      	ldr	r2, [pc, #252]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 8001312:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131a:	6593      	str	r3, [r2, #88]	; 0x58
 800131c:	4b3c      	ldr	r3, [pc, #240]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 800131e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001328:	2301      	movs	r3, #1
 800132a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800132e:	4b39      	ldr	r3, [pc, #228]	; (8001414 <HAL_RCC_OscConfig+0x588>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001336:	2b00      	cmp	r3, #0
 8001338:	d118      	bne.n	800136c <HAL_RCC_OscConfig+0x4e0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800133a:	4a36      	ldr	r2, [pc, #216]	; (8001414 <HAL_RCC_OscConfig+0x588>)
 800133c:	4b35      	ldr	r3, [pc, #212]	; (8001414 <HAL_RCC_OscConfig+0x588>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001344:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001346:	f7ff fa77 	bl	8000838 <HAL_GetTick>
 800134a:	62b8      	str	r0, [r7, #40]	; 0x28

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800134e:	f7ff fa73 	bl	8000838 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e115      	b.n	800158c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001360:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <HAL_RCC_OscConfig+0x588>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x4c2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d108      	bne.n	8001386 <HAL_RCC_OscConfig+0x4fa>
 8001374:	4a26      	ldr	r2, [pc, #152]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 8001376:	4b26      	ldr	r3, [pc, #152]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 8001378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001384:	e024      	b.n	80013d0 <HAL_RCC_OscConfig+0x544>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b05      	cmp	r3, #5
 800138c:	d110      	bne.n	80013b0 <HAL_RCC_OscConfig+0x524>
 800138e:	4a20      	ldr	r2, [pc, #128]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 8001390:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 8001392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001396:	f043 0304 	orr.w	r3, r3, #4
 800139a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800139e:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 80013a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013ae:	e00f      	b.n	80013d0 <HAL_RCC_OscConfig+0x544>
 80013b0:	4a17      	ldr	r2, [pc, #92]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 80013b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b8:	f023 0301 	bic.w	r3, r3, #1
 80013bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013c0:	4a13      	ldr	r2, [pc, #76]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 80013c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013c8:	f023 0304 	bic.w	r3, r3, #4
 80013cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d016      	beq.n	8001406 <HAL_RCC_OscConfig+0x57a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d8:	f7ff fa2e 	bl	8000838 <HAL_GetTick>
 80013dc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80013de:	e00a      	b.n	80013f6 <HAL_RCC_OscConfig+0x56a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e0:	f7ff fa2a 	bl	8000838 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x56a>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e0ca      	b.n	800158c <HAL_RCC_OscConfig+0x700>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_RCC_OscConfig+0x584>)
 80013f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0ed      	beq.n	80013e0 <HAL_RCC_OscConfig+0x554>
 8001404:	e01a      	b.n	800143c <HAL_RCC_OscConfig+0x5b0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001406:	f7ff fa17 	bl	8000838 <HAL_GetTick>
 800140a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800140c:	e00f      	b.n	800142e <HAL_RCC_OscConfig+0x5a2>
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000
 8001414:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001418:	f7ff fa0e 	bl	8000838 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	f241 3288 	movw	r2, #5000	; 0x1388
 8001426:	4293      	cmp	r3, r2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x5a2>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e0ae      	b.n	800158c <HAL_RCC_OscConfig+0x700>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800142e:	4b59      	ldr	r3, [pc, #356]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 8001430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1ed      	bne.n	8001418 <HAL_RCC_OscConfig+0x58c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800143c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001440:	2b01      	cmp	r3, #1
 8001442:	d105      	bne.n	8001450 <HAL_RCC_OscConfig+0x5c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001444:	4a53      	ldr	r2, [pc, #332]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 8001446:	4b53      	ldr	r3, [pc, #332]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 8001448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800144e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 8098 	beq.w	800158a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800145a:	4b4e      	ldr	r3, [pc, #312]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 030c 	and.w	r3, r3, #12
 8001462:	2b0c      	cmp	r3, #12
 8001464:	f000 808f 	beq.w	8001586 <HAL_RCC_OscConfig+0x6fa>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146c:	2b02      	cmp	r3, #2
 800146e:	d156      	bne.n	800151e <HAL_RCC_OscConfig+0x692>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001470:	4a48      	ldr	r2, [pc, #288]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 8001472:	4b48      	ldr	r3, [pc, #288]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800147a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7ff f9dc 	bl	8000838 <HAL_GetTick>
 8001480:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x60a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001484:	f7ff f9d8 	bl	8000838 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x60a>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e07a      	b.n	800158c <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001496:	4b3f      	ldr	r3, [pc, #252]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x5f8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014a2:	493c      	ldr	r1, [pc, #240]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	3b01      	subs	r3, #1
 80014aa:	011a      	lsls	r2, r3, #4
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b8:	091b      	lsrs	r3, r3, #4
 80014ba:	045b      	lsls	r3, r3, #17
 80014bc:	431a      	orrs	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c8:	085b      	lsrs	r3, r3, #1
 80014ca:	3b01      	subs	r3, #1
 80014cc:	055b      	lsls	r3, r3, #21
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	085b      	lsrs	r3, r3, #1
 80014d6:	3b01      	subs	r3, #1
 80014d8:	065b      	lsls	r3, r3, #25
 80014da:	4313      	orrs	r3, r2
 80014dc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014de:	4a2d      	ldr	r2, [pc, #180]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 80014e0:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014e8:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014ea:	4a2a      	ldr	r2, [pc, #168]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 80014ec:	4b29      	ldr	r3, [pc, #164]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014f4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f6:	f7ff f99f 	bl	8000838 <HAL_GetTick>
 80014fa:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014fe:	f7ff f99b 	bl	8000838 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e03d      	b.n	800158c <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001510:	4b20      	ldr	r3, [pc, #128]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x672>
 800151c:	e035      	b.n	800158a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151e:	4a1d      	ldr	r2, [pc, #116]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 8001520:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001528:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800152a:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10b      	bne.n	800154e <HAL_RCC_OscConfig+0x6c2>
#if defined(RCC_PLLSAI2_SUPPORT)
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8001536:	4b17      	ldr	r3, [pc, #92]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
           && 
 800153e:	2b00      	cmp	r3, #0
 8001540:	d105      	bne.n	800154e <HAL_RCC_OscConfig+0x6c2>
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001542:	4a14      	ldr	r2, [pc, #80]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 8001544:	4b13      	ldr	r3, [pc, #76]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f023 0303 	bic.w	r3, r3, #3
 800154c:	60d3      	str	r3, [r2, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800154e:	4a11      	ldr	r2, [pc, #68]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155e:	f7ff f96b 	bl	8000838 <HAL_GetTick>
 8001562:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x6ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001566:	f7ff f967 	bl	8000838 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x6ec>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e009      	b.n	800158c <HAL_RCC_OscConfig+0x700>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_RCC_OscConfig+0x708>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1f0      	bne.n	8001566 <HAL_RCC_OscConfig+0x6da>
 8001584:	e001      	b.n	800158a <HAL_RCC_OscConfig+0x6fe>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <HAL_RCC_OscConfig+0x700>
    }
  }
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3730      	adds	r7, #48	; 0x30
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40021000 	.word	0x40021000

08001598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80015a6:	4b89      	ldr	r3, [pc, #548]	; (80017cc <HAL_RCC_ClockConfig+0x234>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0207 	and.w	r2, r3, #7
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d210      	bcs.n	80015d6 <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b4:	4985      	ldr	r1, [pc, #532]	; (80017cc <HAL_RCC_ClockConfig+0x234>)
 80015b6:	4b85      	ldr	r3, [pc, #532]	; (80017cc <HAL_RCC_ClockConfig+0x234>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 0207 	bic.w	r2, r3, #7
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015c4:	4b81      	ldr	r3, [pc, #516]	; (80017cc <HAL_RCC_ClockConfig+0x234>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0207 	and.w	r2, r3, #7
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d001      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e0f6      	b.n	80017c4 <HAL_RCC_ClockConfig+0x22c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d008      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015e2:	497b      	ldr	r1, [pc, #492]	; (80017d0 <HAL_RCC_ClockConfig+0x238>)
 80015e4:	4b7a      	ldr	r3, [pc, #488]	; (80017d0 <HAL_RCC_ClockConfig+0x238>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 808e 	beq.w	800171e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d107      	bne.n	800161a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800160a:	4b71      	ldr	r3, [pc, #452]	; (80017d0 <HAL_RCC_ClockConfig+0x238>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d121      	bne.n	800165a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e0d4      	b.n	80017c4 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b03      	cmp	r3, #3
 8001620:	d107      	bne.n	8001632 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001622:	4b6b      	ldr	r3, [pc, #428]	; (80017d0 <HAL_RCC_ClockConfig+0x238>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d115      	bne.n	800165a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e0c8      	b.n	80017c4 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d107      	bne.n	800164a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800163a:	4b65      	ldr	r3, [pc, #404]	; (80017d0 <HAL_RCC_ClockConfig+0x238>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d109      	bne.n	800165a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e0bc      	b.n	80017c4 <HAL_RCC_ClockConfig+0x22c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800164a:	4b61      	ldr	r3, [pc, #388]	; (80017d0 <HAL_RCC_ClockConfig+0x238>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e0b4      	b.n	80017c4 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800165a:	495d      	ldr	r1, [pc, #372]	; (80017d0 <HAL_RCC_ClockConfig+0x238>)
 800165c:	4b5c      	ldr	r3, [pc, #368]	; (80017d0 <HAL_RCC_ClockConfig+0x238>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f023 0203 	bic.w	r2, r3, #3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	4313      	orrs	r3, r2
 800166a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800166c:	f7ff f8e4 	bl	8000838 <HAL_GetTick>
 8001670:	6178      	str	r0, [r7, #20]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d112      	bne.n	80016a0 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800167a:	e00a      	b.n	8001692 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800167c:	f7ff f8dc 	bl	8000838 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f241 3288 	movw	r2, #5000	; 0x1388
 800168a:	4293      	cmp	r3, r2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e098      	b.n	80017c4 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001692:	4b4f      	ldr	r3, [pc, #316]	; (80017d0 <HAL_RCC_ClockConfig+0x238>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	2b08      	cmp	r3, #8
 800169c:	d1ee      	bne.n	800167c <HAL_RCC_ClockConfig+0xe4>
 800169e:	e03e      	b.n	800171e <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d112      	bne.n	80016ce <HAL_RCC_ClockConfig+0x136>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016a8:	e00a      	b.n	80016c0 <HAL_RCC_ClockConfig+0x128>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016aa:	f7ff f8c5 	bl	8000838 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_ClockConfig+0x128>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e081      	b.n	80017c4 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016c0:	4b43      	ldr	r3, [pc, #268]	; (80017d0 <HAL_RCC_ClockConfig+0x238>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 030c 	and.w	r3, r3, #12
 80016c8:	2b0c      	cmp	r3, #12
 80016ca:	d1ee      	bne.n	80016aa <HAL_RCC_ClockConfig+0x112>
 80016cc:	e027      	b.n	800171e <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d11d      	bne.n	8001712 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_ClockConfig+0x156>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d8:	f7ff f8ae 	bl	8000838 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_ClockConfig+0x156>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e06a      	b.n	80017c4 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 80016ee:	4b38      	ldr	r3, [pc, #224]	; (80017d0 <HAL_RCC_ClockConfig+0x238>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1ee      	bne.n	80016d8 <HAL_RCC_ClockConfig+0x140>
 80016fa:	e010      	b.n	800171e <HAL_RCC_ClockConfig+0x186>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016fc:	f7ff f89c 	bl	8000838 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	f241 3288 	movw	r2, #5000	; 0x1388
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e058      	b.n	80017c4 <HAL_RCC_ClockConfig+0x22c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8001712:	4b2f      	ldr	r3, [pc, #188]	; (80017d0 <HAL_RCC_ClockConfig+0x238>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b04      	cmp	r3, #4
 800171c:	d1ee      	bne.n	80016fc <HAL_RCC_ClockConfig+0x164>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800171e:	4b2b      	ldr	r3, [pc, #172]	; (80017cc <HAL_RCC_ClockConfig+0x234>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0207 	and.w	r2, r3, #7
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d910      	bls.n	800174e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172c:	4927      	ldr	r1, [pc, #156]	; (80017cc <HAL_RCC_ClockConfig+0x234>)
 800172e:	4b27      	ldr	r3, [pc, #156]	; (80017cc <HAL_RCC_ClockConfig+0x234>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 0207 	bic.w	r2, r3, #7
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800173c:	4b23      	ldr	r3, [pc, #140]	; (80017cc <HAL_RCC_ClockConfig+0x234>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0207 	and.w	r2, r3, #7
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d001      	beq.n	800174e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e03a      	b.n	80017c4 <HAL_RCC_ClockConfig+0x22c>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	2b00      	cmp	r3, #0
 8001758:	d008      	beq.n	800176c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800175a:	491d      	ldr	r1, [pc, #116]	; (80017d0 <HAL_RCC_ClockConfig+0x238>)
 800175c:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <HAL_RCC_ClockConfig+0x238>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	4313      	orrs	r3, r2
 800176a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	2b00      	cmp	r3, #0
 8001776:	d009      	beq.n	800178c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001778:	4915      	ldr	r1, [pc, #84]	; (80017d0 <HAL_RCC_ClockConfig+0x238>)
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_RCC_ClockConfig+0x238>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	4313      	orrs	r3, r2
 800178a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800178c:	f000 f826 	bl	80017dc <HAL_RCC_GetSysClockFreq>
 8001790:	4601      	mov	r1, r0
 8001792:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <HAL_RCC_ClockConfig+0x238>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800179a:	23f0      	movs	r3, #240	; 0xf0
 800179c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	fa93 f3a3 	rbit	r3, r3
 80017a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	fab3 f383 	clz	r3, r3
 80017ac:	fa22 f303 	lsr.w	r3, r2, r3
 80017b0:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <HAL_RCC_ClockConfig+0x23c>)
 80017b2:	5cd3      	ldrb	r3, [r2, r3]
 80017b4:	fa21 f303 	lsr.w	r3, r1, r3
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <HAL_RCC_ClockConfig+0x240>)
 80017ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80017bc:	2000      	movs	r0, #0
 80017be:	f7ff f811 	bl	80007e4 <HAL_InitTick>

  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40022000 	.word	0x40022000
 80017d0:	40021000 	.word	0x40021000
 80017d4:	08003ddc 	.word	0x08003ddc
 80017d8:	20000000 	.word	0x20000000

080017dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	b095      	sub	sp, #84	; 0x54
 80017e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017e6:	2300      	movs	r3, #0
 80017e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80017ea:	2300      	movs	r3, #0
 80017ec:	643b      	str	r3, [r7, #64]	; 0x40
 80017ee:	2302      	movs	r3, #2
 80017f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017f2:	2302      	movs	r3, #2
 80017f4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t sysclockfreq = 0U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	647b      	str	r3, [r7, #68]	; 0x44

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80017fa:	4b71      	ldr	r3, [pc, #452]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00b      	beq.n	800181e <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001806:	4b6e      	ldr	r3, [pc, #440]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800180e:	2b0c      	cmp	r3, #12
 8001810:	d13c      	bne.n	800188c <HAL_RCC_GetSysClockFreq+0xb0>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001812:	4b6b      	ldr	r3, [pc, #428]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b01      	cmp	r3, #1
 800181c:	d136      	bne.n	800188c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 800181e:	4b68      	ldr	r3, [pc, #416]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d112      	bne.n	8001850 <HAL_RCC_GetSysClockFreq+0x74>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 800182a:	4b65      	ldr	r3, [pc, #404]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800182c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001830:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8001834:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001838:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183c:	fa93 f3a3 	rbit	r3, r3
 8001840:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8001842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001844:	fab3 f383 	clz	r3, r3
 8001848:	fa22 f303 	lsr.w	r3, r2, r3
 800184c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800184e:	e00f      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0x94>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 8001850:	4b5b      	ldr	r3, [pc, #364]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001858:	23f0      	movs	r3, #240	; 0xf0
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185e:	fa93 f3a3 	rbit	r3, r3
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8001864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001866:	fab3 f383 	clz	r3, r3
 800186a:	fa22 f303 	lsr.w	r3, r2, r3
 800186e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001870:	4a54      	ldr	r2, [pc, #336]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x1e8>)
 8001872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001878:	64fb      	str	r3, [r7, #76]	; 0x4c

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 800187a:	4b51      	ldr	r3, [pc, #324]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 030c 	and.w	r3, r3, #12
 8001882:	2b00      	cmp	r3, #0
 8001884:	d113      	bne.n	80018ae <HAL_RCC_GetSysClockFreq+0xd2>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001888:	647b      	str	r3, [r7, #68]	; 0x44
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 800188a:	e010      	b.n	80018ae <HAL_RCC_GetSysClockFreq+0xd2>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800188c:	4b4c      	ldr	r3, [pc, #304]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b04      	cmp	r3, #4
 8001896:	d102      	bne.n	800189e <HAL_RCC_GetSysClockFreq+0xc2>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001898:	4b4b      	ldr	r3, [pc, #300]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x1ec>)
 800189a:	647b      	str	r3, [r7, #68]	; 0x44
 800189c:	e007      	b.n	80018ae <HAL_RCC_GetSysClockFreq+0xd2>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800189e:	4b48      	ldr	r3, [pc, #288]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d101      	bne.n	80018ae <HAL_RCC_GetSysClockFreq+0xd2>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018aa:	4b48      	ldr	r3, [pc, #288]	; (80019cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80018ac:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80018ae:	4b44      	ldr	r3, [pc, #272]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b0c      	cmp	r3, #12
 80018b8:	d17b      	bne.n	80019b2 <HAL_RCC_GetSysClockFreq+0x1d6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80018ba:	4b41      	ldr	r3, [pc, #260]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	643b      	str	r3, [r7, #64]	; 0x40
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 80018c4:	4b3e      	ldr	r3, [pc, #248]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018cc:	2370      	movs	r3, #112	; 0x70
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	fa93 f3a3 	rbit	r3, r3
 80018d6:	623b      	str	r3, [r7, #32]
  return(result);
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	fab3 f383 	clz	r3, r3
 80018de:	fa22 f303 	lsr.w	r3, r2, r3
 80018e2:	3301      	adds	r3, #1
 80018e4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (pllsource)
 80018e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d002      	beq.n	80018f2 <HAL_RCC_GetSysClockFreq+0x116>
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d018      	beq.n	8001922 <HAL_RCC_GetSysClockFreq+0x146>
 80018f0:	e02f      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x176>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80018f2:	4a35      	ldr	r2, [pc, #212]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x1ec>)
 80018f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fa:	4a31      	ldr	r2, [pc, #196]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80018fc:	68d2      	ldr	r2, [r2, #12]
 80018fe:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8001902:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8001906:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001908:	69fa      	ldr	r2, [r7, #28]
 800190a:	fa92 f2a2 	rbit	r2, r2
 800190e:	61ba      	str	r2, [r7, #24]
  return(result);
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	fab2 f282 	clz	r2, r2
 8001916:	fa21 f202 	lsr.w	r2, r1, r2
 800191a:	fb02 f303 	mul.w	r3, r2, r3
 800191e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001920:	e02f      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8001922:	4a2a      	ldr	r2, [pc, #168]	; (80019cc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001926:	fbb2 f3f3 	udiv	r3, r2, r3
 800192a:	4a25      	ldr	r2, [pc, #148]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800192c:	68d2      	ldr	r2, [r2, #12]
 800192e:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8001932:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8001936:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	fa92 f2a2 	rbit	r2, r2
 800193e:	613a      	str	r2, [r7, #16]
  return(result);
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	fab2 f282 	clz	r2, r2
 8001946:	fa21 f202 	lsr.w	r2, r1, r2
 800194a:	fb02 f303 	mul.w	r3, r2, r3
 800194e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001950:	e017      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0x1a6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8001952:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001956:	fbb2 f3f3 	udiv	r3, r2, r3
 800195a:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800195c:	68d2      	ldr	r2, [r2, #12]
 800195e:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8001962:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8001966:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	fa92 f2a2 	rbit	r2, r2
 800196e:	60ba      	str	r2, [r7, #8]
  return(result);
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	fab2 f282 	clz	r2, r2
 8001976:	fa21 f202 	lsr.w	r2, r1, r2
 800197a:	fb02 f303 	mul.w	r3, r2, r3
 800197e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001980:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800198a:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 800198e:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	fa93 f3a3 	rbit	r3, r3
 8001996:	603b      	str	r3, [r7, #0]
  return(result);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	fa22 f303 	lsr.w	r3, r2, r3
 80019a2:	3301      	adds	r3, #1
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    sysclockfreq = pllvco/pllr;
 80019a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80019aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b0:	647b      	str	r3, [r7, #68]	; 0x44
  }

  return sysclockfreq;
 80019b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3754      	adds	r7, #84	; 0x54
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	40021000 	.word	0x40021000
 80019c4:	08003df4 	.word	0x08003df4
 80019c8:	00f42400 	.word	0x00f42400
 80019cc:	007a1200 	.word	0x007a1200

080019d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000000 	.word	0x20000000

080019e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80019ee:	f7ff ffef 	bl	80019d0 <HAL_RCC_GetHCLKFreq>
 80019f2:	4601      	mov	r1, r0
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019fc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001a00:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	603b      	str	r3, [r7, #0]
  return(result);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	fab3 f383 	clz	r3, r3
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001a16:	5cd3      	ldrb	r3, [r2, r3]
 8001a18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000
 8001a28:	08003dec 	.word	0x08003dec

08001a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001a32:	f7ff ffcd 	bl	80019d0 <HAL_RCC_GetHCLKFreq>
 8001a36:	4601      	mov	r1, r0
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001a40:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a44:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	fa93 f3a3 	rbit	r3, r3
 8001a4c:	603b      	str	r3, [r7, #0]
  return(result);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	fab3 f383 	clz	r3, r3
 8001a54:	fa22 f303 	lsr.w	r3, r2, r3
 8001a58:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <HAL_RCC_GetPCLK2Freq+0x40>)
 8001a5a:	5cd3      	ldrb	r3, [r2, r3]
 8001a5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	08003dec 	.word	0x08003dec

08001a70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	613b      	str	r3, [r7, #16]
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a80:	4b2a      	ldr	r3, [pc, #168]	; (8001b2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a8c:	f7ff f99a 	bl	8000dc4 <HAL_PWREx_GetVoltageRange>
 8001a90:	6178      	str	r0, [r7, #20]
 8001a92:	e014      	b.n	8001abe <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a94:	4a25      	ldr	r2, [pc, #148]	; (8001b2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a96:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa0:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001aac:	f7ff f98a 	bl	8000dc4 <HAL_PWREx_GetVoltageRange>
 8001ab0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ab2:	4a1e      	ldr	r2, [pc, #120]	; (8001b2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001abc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ac4:	d10b      	bne.n	8001ade <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b80      	cmp	r3, #128	; 0x80
 8001aca:	d919      	bls.n	8001b00 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2ba0      	cmp	r3, #160	; 0xa0
 8001ad0:	d902      	bls.n	8001ad8 <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	e013      	b.n	8001b00 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ad8:	2301      	movs	r3, #1
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	e010      	b.n	8001b00 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b80      	cmp	r3, #128	; 0x80
 8001ae2:	d902      	bls.n	8001aea <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	e00a      	b.n	8001b00 <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b80      	cmp	r3, #128	; 0x80
 8001aee:	d102      	bne.n	8001af6 <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001af0:	2302      	movs	r3, #2
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	e004      	b.n	8001b00 <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7) 
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b70      	cmp	r3, #112	; 0x70
 8001afa:	d101      	bne.n	8001b00 <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001afc:	2301      	movs	r3, #1
 8001afe:	613b      	str	r3, [r7, #16]
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8001b00:	490b      	ldr	r1, [pc, #44]	; (8001b30 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 0207 	bic.w	r2, r3, #7
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001b10:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0207 	and.w	r2, r3, #7
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d001      	beq.n	8001b22 <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }
  
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40022000 	.word	0x40022000

08001b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001b44:	2300      	movs	r3, #0
 8001b46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b48:	2300      	movs	r3, #0
 8001b4a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d03f      	beq.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b60:	d01c      	beq.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x68>
 8001b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b66:	d802      	bhi.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00e      	beq.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001b6c:	e01f      	b.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001b6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b72:	d003      	beq.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x48>
 8001b74:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001b78:	d01c      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8001b7a:	e018      	b.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001b7c:	4a82      	ldr	r2, [pc, #520]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001b7e:	4b82      	ldr	r3, [pc, #520]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001b88:	e015      	b.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x82>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 fab3 	bl	80020fc <RCCEx_PLLSAI1_Config>
 8001b96:	4603      	mov	r3, r0
 8001b98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001b9a:	e00c      	b.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x82>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3320      	adds	r3, #32
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 fbfe 	bl	80023a4 <RCCEx_PLLSAI2_Config>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001bac:	e003      	b.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	74fb      	strb	r3, [r7, #19]
      break;
 8001bb2:	e000      	b.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      break;
 8001bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001bb6:	7cfb      	ldrb	r3, [r7, #19]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10b      	bne.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001bbc:	4972      	ldr	r1, [pc, #456]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001bbe:	4b72      	ldr	r3, [pc, #456]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001bd2:	e001      	b.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001bd4:	7cfb      	ldrb	r3, [r7, #19]
 8001bd6:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d03f      	beq.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bec:	d01c      	beq.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001bee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf2:	d802      	bhi.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00e      	beq.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001bf8:	e01f      	b.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001bfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bfe:	d003      	beq.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001c00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001c04:	d01c      	beq.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001c06:	e018      	b.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001c08:	4a5f      	ldr	r2, [pc, #380]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001c0a:	4b5f      	ldr	r3, [pc, #380]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c12:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001c14:	e015      	b.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 fa6d 	bl	80020fc <RCCEx_PLLSAI1_Config>
 8001c22:	4603      	mov	r3, r0
 8001c24:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001c26:	e00c      	b.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3320      	adds	r3, #32
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 fbb8 	bl	80023a4 <RCCEx_PLLSAI2_Config>
 8001c34:	4603      	mov	r3, r0
 8001c36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001c38:	e003      	b.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    case RCC_SAI2CLKSOURCE_PIN:      /* External clock is used as source of SAI2 clock*/
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	74fb      	strb	r3, [r7, #19]
      break;
 8001c3e:	e000      	b.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001c40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001c42:	7cfb      	ldrb	r3, [r7, #19]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10b      	bne.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c48:	494f      	ldr	r1, [pc, #316]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001c4a:	4b4f      	ldr	r3, [pc, #316]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c50:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001c5e:	e001      	b.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c60:	7cfb      	ldrb	r3, [r7, #19]
 8001c62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 809a 	beq.w	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c76:	4b44      	ldr	r3, [pc, #272]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10d      	bne.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x16a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c82:	4a41      	ldr	r2, [pc, #260]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001c84:	4b40      	ldr	r3, [pc, #256]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c8e:	4b3e      	ldr	r3, [pc, #248]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c9e:	4a3b      	ldr	r2, [pc, #236]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ca0:	4b3a      	ldr	r3, [pc, #232]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001caa:	f7fe fdc5 	bl	8000838 <HAL_GetTick>
 8001cae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001cb0:	e009      	b.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb2:	f7fe fdc1 	bl	8000838 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d902      	bls.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      {
        ret = HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	74fb      	strb	r3, [r7, #19]
        break;
 8001cc4:	e005      	b.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001cc6:	4b31      	ldr	r3, [pc, #196]	; (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0ef      	beq.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
      }
    }

    if(ret == HAL_OK)
 8001cd2:	7cfb      	ldrb	r3, [r7, #19]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d15b      	bne.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001cd8:	4b2b      	ldr	r3, [pc, #172]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ce2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d01f      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d019      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001cf6:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d00:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d02:	4a21      	ldr	r2, [pc, #132]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001d04:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d12:	4a1d      	ldr	r2, [pc, #116]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001d14:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d22:	4a19      	ldr	r2, [pc, #100]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d016      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x22e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7fe fd80 	bl	8000838 <HAL_GetTick>
 8001d38:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001d3a:	e00b      	b.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x220>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7fe fd7c 	bl	8000838 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d902      	bls.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x220>
          {
            ret = HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	74fb      	strb	r3, [r7, #19]
            break;
 8001d52:	e006      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x22e>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0ec      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x208>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001d62:	7cfb      	ldrb	r3, [r7, #19]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10c      	bne.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x24e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d68:	4907      	ldr	r1, [pc, #28]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001d6a:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001d80:	e008      	b.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x260>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d82:	7cfb      	ldrb	r3, [r7, #19]
 8001d84:	74bb      	strb	r3, [r7, #18]
 8001d86:	e005      	b.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d90:	7cfb      	ldrb	r3, [r7, #19]
 8001d92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d94:	7c7b      	ldrb	r3, [r7, #17]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d105      	bne.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x272>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d9a:	4a9e      	ldr	r2, [pc, #632]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001d9c:	4b9d      	ldr	r3, [pc, #628]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001da4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00a      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001db2:	4998      	ldr	r1, [pc, #608]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001db4:	4b97      	ldr	r3, [pc, #604]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dba:	f023 0203 	bic.w	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00a      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dd4:	498f      	ldr	r1, [pc, #572]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001dd6:	4b8f      	ldr	r3, [pc, #572]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ddc:	f023 020c 	bic.w	r2, r3, #12
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de4:	4313      	orrs	r3, r2
 8001de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00a      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001df6:	4987      	ldr	r1, [pc, #540]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001df8:	4b86      	ldr	r3, [pc, #536]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4313      	orrs	r3, r2
 8001e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00a      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e18:	497e      	ldr	r1, [pc, #504]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001e1a:	4b7e      	ldr	r3, [pc, #504]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e20:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00a      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e3a:	4976      	ldr	r1, [pc, #472]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001e3c:	4b75      	ldr	r3, [pc, #468]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0320 	and.w	r3, r3, #32
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00a      	beq.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x33e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e5c:	496d      	ldr	r1, [pc, #436]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001e5e:	4b6d      	ldr	r3, [pc, #436]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00a      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e7e:	4965      	ldr	r1, [pc, #404]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001e80:	4b64      	ldr	r3, [pc, #400]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e86:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00a      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ea0:	495c      	ldr	r1, [pc, #368]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001ea2:	4b5c      	ldr	r3, [pc, #368]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00a      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ec2:	4954      	ldr	r1, [pc, #336]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001ec4:	4b53      	ldr	r3, [pc, #332]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)  

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00a      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ee4:	494b      	ldr	r1, [pc, #300]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001ee6:	4b4b      	ldr	r3, [pc, #300]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00a      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f06:	4943      	ldr	r1, [pc, #268]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001f08:	4b42      	ldr	r3, [pc, #264]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d028      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f28:	493a      	ldr	r1, [pc, #232]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001f2a:	4b3a      	ldr	r3, [pc, #232]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f46:	d106      	bne.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x422>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f48:	4a32      	ldr	r2, [pc, #200]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001f4a:	4b32      	ldr	r3, [pc, #200]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f52:	60d3      	str	r3, [r2, #12]
 8001f54:	e011      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x446>
    }
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f5e:	d10c      	bne.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x446>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3304      	adds	r3, #4
 8001f64:	2101      	movs	r1, #1
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f8c8 	bl	80020fc <RCCEx_PLLSAI1_Config>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	74fb      	strb	r3, [r7, #19]
      
        if(ret != HAL_OK)
 8001f70:	7cfb      	ldrb	r3, [r7, #19]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x446>
        {
          /* set overall return value */
          status = ret;
 8001f76:	7cfb      	ldrb	r3, [r7, #19]
 8001f78:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d028      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f86:	4923      	ldr	r1, [pc, #140]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001f88:	4b22      	ldr	r3, [pc, #136]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fa4:	d106      	bne.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fa6:	4a1b      	ldr	r2, [pc, #108]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001fa8:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fb0:	60d3      	str	r3, [r2, #12]
 8001fb2:	e011      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    }
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 f899 	bl	80020fc <RCCEx_PLLSAI1_Config>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 8001fce:	7cfb      	ldrb	r3, [r7, #19]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* set overall return value */
        status = ret;
 8001fd4:	7cfb      	ldrb	r3, [r7, #19]
 8001fd6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d02b      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001fe4:	490b      	ldr	r1, [pc, #44]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8001fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ffe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002002:	d109      	bne.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002004:	4a03      	ldr	r2, [pc, #12]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002006:	4b03      	ldr	r3, [pc, #12]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x4e0>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800200e:	60d3      	str	r3, [r2, #12]
 8002010:	e014      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800201c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002020:	d10c      	bne.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3304      	adds	r3, #4
 8002026:	2101      	movs	r1, #1
 8002028:	4618      	mov	r0, r3
 800202a:	f000 f867 	bl	80020fc <RCCEx_PLLSAI1_Config>
 800202e:	4603      	mov	r3, r0
 8002030:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 8002032:	7cfb      	ldrb	r3, [r7, #19]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x508>
      {
        /* set overall return value */
        status = ret;
 8002038:	7cfb      	ldrb	r3, [r7, #19]
 800203a:	74bb      	strb	r3, [r7, #18]
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d02f      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x574>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002048:	492b      	ldr	r1, [pc, #172]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800204a:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800204c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002050:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002066:	d10d      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3304      	adds	r3, #4
 800206c:	2102      	movs	r1, #2
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f844 	bl	80020fc <RCCEx_PLLSAI1_Config>
 8002074:	4603      	mov	r3, r0
 8002076:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002078:	7cfb      	ldrb	r3, [r7, #19]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d014      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 800207e:	7cfb      	ldrb	r3, [r7, #19]
 8002080:	74bb      	strb	r3, [r7, #18]
 8002082:	e011      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x574>
      }
    }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800208c:	d10c      	bne.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3320      	adds	r3, #32
 8002092:	2102      	movs	r1, #2
 8002094:	4618      	mov	r0, r3
 8002096:	f000 f985 	bl	80023a4 <RCCEx_PLLSAI2_Config>
 800209a:	4603      	mov	r3, r0
 800209c:	74fb      	strb	r3, [r7, #19]
      
      if(ret != HAL_OK)
 800209e:	7cfb      	ldrb	r3, [r7, #19]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x574>
      {
        /* set overall return value */
        status = ret;
 80020a4:	7cfb      	ldrb	r3, [r7, #19]
 80020a6:	74bb      	strb	r3, [r7, #18]
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00a      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x596>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80020b4:	4910      	ldr	r1, [pc, #64]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80020b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020bc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00b      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80020d6:	4908      	ldr	r1, [pc, #32]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80020d8:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80020da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* DFSDM1_Filter0 */

  return status;
 80020ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40021000 	.word	0x40021000

080020fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80020fc:	b590      	push	{r4, r7, lr}
 80020fe:	b095      	sub	sp, #84	; 0x54
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	64bb      	str	r3, [r7, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002110:	4ba3      	ldr	r3, [pc, #652]	; (80023a0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d023      	beq.n	8002164 <RCCEx_PLLSAI1_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800211c:	4ba0      	ldr	r3, [pc, #640]	; (80023a0 <RCCEx_PLLSAI1_Config+0x2a4>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0203 	and.w	r2, r3, #3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d117      	bne.n	800215c <RCCEx_PLLSAI1_Config+0x60>
       || 
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
       || 
 8002130:	2b00      	cmp	r3, #0
 8002132:	d013      	beq.n	800215c <RCCEx_PLLSAI1_Config+0x60>
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
 8002134:	4b9a      	ldr	r3, [pc, #616]	; (80023a0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800213c:	2370      	movs	r3, #112	; 0x70
 800213e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8002148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	fa22 f303 	lsr.w	r3, r2, r3
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
       || 
 8002158:	429a      	cmp	r2, r3
 800215a:	d054      	beq.n	8002206 <RCCEx_PLLSAI1_Config+0x10a>
      )
    {
      status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002162:	e050      	b.n	8002206 <RCCEx_PLLSAI1_Config+0x10a>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d00d      	beq.n	8002188 <RCCEx_PLLSAI1_Config+0x8c>
 800216c:	2b03      	cmp	r3, #3
 800216e:	d015      	beq.n	800219c <RCCEx_PLLSAI1_Config+0xa0>
 8002170:	2b01      	cmp	r3, #1
 8002172:	d123      	bne.n	80021bc <RCCEx_PLLSAI1_Config+0xc0>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002174:	4b8a      	ldr	r3, [pc, #552]	; (80023a0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d121      	bne.n	80021c4 <RCCEx_PLLSAI1_Config+0xc8>
      {
        status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 8002186:	e01d      	b.n	80021c4 <RCCEx_PLLSAI1_Config+0xc8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002188:	4b85      	ldr	r3, [pc, #532]	; (80023a0 <RCCEx_PLLSAI1_Config+0x2a4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002190:	2b00      	cmp	r3, #0
 8002192:	d119      	bne.n	80021c8 <RCCEx_PLLSAI1_Config+0xcc>
      {
        status = HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 800219a:	e015      	b.n	80021c8 <RCCEx_PLLSAI1_Config+0xcc>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800219c:	4b80      	ldr	r3, [pc, #512]	; (80023a0 <RCCEx_PLLSAI1_Config+0x2a4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d111      	bne.n	80021cc <RCCEx_PLLSAI1_Config+0xd0>
 80021a8:	4b7d      	ldr	r3, [pc, #500]	; (80023a0 <RCCEx_PLLSAI1_Config+0x2a4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10b      	bne.n	80021cc <RCCEx_PLLSAI1_Config+0xd0>
      {
        status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      }
      break;
 80021ba:	e007      	b.n	80021cc <RCCEx_PLLSAI1_Config+0xd0>
    default:
      status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      break;
 80021c2:	e004      	b.n	80021ce <RCCEx_PLLSAI1_Config+0xd2>
      break;
 80021c4:	bf00      	nop
 80021c6:	e002      	b.n	80021ce <RCCEx_PLLSAI1_Config+0xd2>
      break;
 80021c8:	bf00      	nop
 80021ca:	e000      	b.n	80021ce <RCCEx_PLLSAI1_Config+0xd2>
      break;
 80021cc:	bf00      	nop
    }
    
    if(status == HAL_OK)
 80021ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d117      	bne.n	8002206 <RCCEx_PLLSAI1_Config+0x10a>
    {
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 80021d6:	4c72      	ldr	r4, [pc, #456]	; (80023a0 <RCCEx_PLLSAI1_Config+0x2a4>)
 80021d8:	4b71      	ldr	r3, [pc, #452]	; (80023a0 <RCCEx_PLLSAI1_Config+0x2a4>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6819      	ldr	r1, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	1e58      	subs	r0, r3, #1
 80021ea:	2370      	movs	r3, #112	; 0x70
 80021ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021f0:	fa93 f3a3 	rbit	r3, r3
 80021f4:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80021f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f8:	fab3 f383 	clz	r3, r3
 80021fc:	fa00 f303 	lsl.w	r3, r0, r3
 8002200:	430b      	orrs	r3, r1
 8002202:	4313      	orrs	r3, r2
 8002204:	60e3      	str	r3, [r4, #12]
    }
  }
  
  if(status == HAL_OK)
 8002206:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800220a:	2b00      	cmp	r3, #0
 800220c:	f040 80c2 	bne.w	8002394 <RCCEx_PLLSAI1_Config+0x298>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002210:	4a63      	ldr	r2, [pc, #396]	; (80023a0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002212:	4b63      	ldr	r3, [pc, #396]	; (80023a0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800221a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800221c:	f7fe fb0c 	bl	8000838 <HAL_GetTick>
 8002220:	64b8      	str	r0, [r7, #72]	; 0x48

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8002222:	e00a      	b.n	800223a <RCCEx_PLLSAI1_Config+0x13e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002224:	f7fe fb08 	bl	8000838 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d903      	bls.n	800223a <RCCEx_PLLSAI1_Config+0x13e>
      {
        status = HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        break;
 8002238:	e005      	b.n	8002246 <RCCEx_PLLSAI1_Config+0x14a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800223a:	4b59      	ldr	r3, [pc, #356]	; (80023a0 <RCCEx_PLLSAI1_Config+0x2a4>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1ee      	bne.n	8002224 <RCCEx_PLLSAI1_Config+0x128>
      }
    }

    if(status == HAL_OK)    
 8002246:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800224a:	2b00      	cmp	r3, #0
 800224c:	f040 80a2 	bne.w	8002394 <RCCEx_PLLSAI1_Config+0x298>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d126      	bne.n	80022a4 <RCCEx_PLLSAI1_Config+0x1a8>
        MODIFY_REG(RCC->PLLSAI1CFGR, 
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (PllSai1->PLLSAI1P << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1PDIV)));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8002256:	4c52      	ldr	r4, [pc, #328]	; (80023a0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002258:	4b51      	ldr	r3, [pc, #324]	; (80023a0 <RCCEx_PLLSAI1_Config+0x2a4>)
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6891      	ldr	r1, [r2, #8]
 8002268:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800226c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002270:	fa92 f2a2 	rbit	r2, r2
 8002274:	62ba      	str	r2, [r7, #40]	; 0x28
  return(result);
 8002276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002278:	fab2 f282 	clz	r2, r2
 800227c:	4091      	lsls	r1, r2
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68d2      	ldr	r2, [r2, #12]
 8002282:	0910      	lsrs	r0, r2, #4
 8002284:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002288:	637a      	str	r2, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800228c:	fa92 f2a2 	rbit	r2, r2
 8002290:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 8002292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002294:	fab2 f282 	clz	r2, r2
 8002298:	fa00 f202 	lsl.w	r2, r0, r2
 800229c:	430a      	orrs	r2, r1
 800229e:	4313      	orrs	r3, r2
 80022a0:	6123      	str	r3, [r4, #16]
 80022a2:	e051      	b.n	8002348 <RCCEx_PLLSAI1_Config+0x24c>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d127      	bne.n	80022fa <RCCEx_PLLSAI1_Config+0x1fe>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 80022aa:	4c3d      	ldr	r4, [pc, #244]	; (80023a0 <RCCEx_PLLSAI1_Config+0x2a4>)
 80022ac:	4b3c      	ldr	r3, [pc, #240]	; (80023a0 <RCCEx_PLLSAI1_Config+0x2a4>)
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80022b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6891      	ldr	r1, [r2, #8]
 80022bc:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80022c0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	69fa      	ldr	r2, [r7, #28]
 80022c4:	fa92 f2a2 	rbit	r2, r2
 80022c8:	61ba      	str	r2, [r7, #24]
  return(result);
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	fab2 f282 	clz	r2, r2
 80022d0:	4091      	lsls	r1, r2
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6912      	ldr	r2, [r2, #16]
 80022d6:	0852      	lsrs	r2, r2, #1
 80022d8:	1e50      	subs	r0, r2, #1
 80022da:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 80022de:	627a      	str	r2, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e2:	fa92 f2a2 	rbit	r2, r2
 80022e6:	623a      	str	r2, [r7, #32]
  return(result);
 80022e8:	6a3a      	ldr	r2, [r7, #32]
 80022ea:	fab2 f282 	clz	r2, r2
 80022ee:	fa00 f202 	lsl.w	r2, r0, r2
 80022f2:	430a      	orrs	r2, r1
 80022f4:	4313      	orrs	r3, r2
 80022f6:	6123      	str	r3, [r4, #16]
 80022f8:	e026      	b.n	8002348 <RCCEx_PLLSAI1_Config+0x24c>
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 80022fa:	4c29      	ldr	r4, [pc, #164]	; (80023a0 <RCCEx_PLLSAI1_Config+0x2a4>)
 80022fc:	4b28      	ldr	r3, [pc, #160]	; (80023a0 <RCCEx_PLLSAI1_Config+0x2a4>)
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002304:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6891      	ldr	r1, [r2, #8]
 800230c:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002310:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	fa92 f2a2 	rbit	r2, r2
 8002318:	60ba      	str	r2, [r7, #8]
  return(result);
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	fab2 f282 	clz	r2, r2
 8002320:	4091      	lsls	r1, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6952      	ldr	r2, [r2, #20]
 8002326:	0852      	lsrs	r2, r2, #1
 8002328:	1e50      	subs	r0, r2, #1
 800232a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800232e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	fa92 f2a2 	rbit	r2, r2
 8002336:	613a      	str	r2, [r7, #16]
  return(result);
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	fab2 f282 	clz	r2, r2
 800233e:	fa00 f202 	lsl.w	r2, r0, r2
 8002342:	430a      	orrs	r2, r1
 8002344:	4313      	orrs	r3, r2
 8002346:	6123      	str	r3, [r4, #16]
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1R)));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002348:	4a15      	ldr	r2, [pc, #84]	; (80023a0 <RCCEx_PLLSAI1_Config+0x2a4>)
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <RCCEx_PLLSAI1_Config+0x2a4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002352:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002354:	f7fe fa70 	bl	8000838 <HAL_GetTick>
 8002358:	64b8      	str	r0, [r7, #72]	; 0x48

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800235a:	e00a      	b.n	8002372 <RCCEx_PLLSAI1_Config+0x276>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800235c:	f7fe fa6c 	bl	8000838 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d903      	bls.n	8002372 <RCCEx_PLLSAI1_Config+0x276>
        {
          status = HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8002370:	e005      	b.n	800237e <RCCEx_PLLSAI1_Config+0x282>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8002372:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0ee      	beq.n	800235c <RCCEx_PLLSAI1_Config+0x260>
        }
      }

      if(status == HAL_OK)    
 800237e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002382:	2b00      	cmp	r3, #0
 8002384:	d106      	bne.n	8002394 <RCCEx_PLLSAI1_Config+0x298>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002386:	4906      	ldr	r1, [pc, #24]	; (80023a0 <RCCEx_PLLSAI1_Config+0x2a4>)
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <RCCEx_PLLSAI1_Config+0x2a4>)
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	610b      	str	r3, [r1, #16]
      }
    }
  }
  
  return status;
 8002394:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8002398:	4618      	mov	r0, r3
 800239a:	3754      	adds	r7, #84	; 0x54
 800239c:	46bd      	mov	sp, r7
 800239e:	bd90      	pop	{r4, r7, pc}
 80023a0:	40021000 	.word	0x40021000

080023a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80023a4:	b590      	push	{r4, r7, lr}
 80023a6:	b091      	sub	sp, #68	; 0x44
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
  
  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023b8:	4b8d      	ldr	r3, [pc, #564]	; (80025f0 <RCCEx_PLLSAI2_Config+0x24c>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d023      	beq.n	800240c <RCCEx_PLLSAI2_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80023c4:	4b8a      	ldr	r3, [pc, #552]	; (80025f0 <RCCEx_PLLSAI2_Config+0x24c>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0203 	and.w	r2, r3, #3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d117      	bne.n	8002404 <RCCEx_PLLSAI2_Config+0x60>
       || 
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
       || 
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d013      	beq.n	8002404 <RCCEx_PLLSAI2_Config+0x60>
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai2->PLLSAI2M)
 80023dc:	4b84      	ldr	r3, [pc, #528]	; (80025f0 <RCCEx_PLLSAI2_Config+0x24c>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023e4:	2370      	movs	r3, #112	; 0x70
 80023e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80023f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	fa22 f303 	lsr.w	r3, r2, r3
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
       || 
 8002400:	429a      	cmp	r2, r3
 8002402:	d054      	beq.n	80024ae <RCCEx_PLLSAI2_Config+0x10a>
      )
    {
      status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800240a:	e050      	b.n	80024ae <RCCEx_PLLSAI2_Config+0x10a>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d00d      	beq.n	8002430 <RCCEx_PLLSAI2_Config+0x8c>
 8002414:	2b03      	cmp	r3, #3
 8002416:	d015      	beq.n	8002444 <RCCEx_PLLSAI2_Config+0xa0>
 8002418:	2b01      	cmp	r3, #1
 800241a:	d123      	bne.n	8002464 <RCCEx_PLLSAI2_Config+0xc0>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800241c:	4b74      	ldr	r3, [pc, #464]	; (80025f0 <RCCEx_PLLSAI2_Config+0x24c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d121      	bne.n	800246c <RCCEx_PLLSAI2_Config+0xc8>
      {
        status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 800242e:	e01d      	b.n	800246c <RCCEx_PLLSAI2_Config+0xc8>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002430:	4b6f      	ldr	r3, [pc, #444]	; (80025f0 <RCCEx_PLLSAI2_Config+0x24c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002438:	2b00      	cmp	r3, #0
 800243a:	d119      	bne.n	8002470 <RCCEx_PLLSAI2_Config+0xcc>
      {
        status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 8002442:	e015      	b.n	8002470 <RCCEx_PLLSAI2_Config+0xcc>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002444:	4b6a      	ldr	r3, [pc, #424]	; (80025f0 <RCCEx_PLLSAI2_Config+0x24c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d111      	bne.n	8002474 <RCCEx_PLLSAI2_Config+0xd0>
 8002450:	4b67      	ldr	r3, [pc, #412]	; (80025f0 <RCCEx_PLLSAI2_Config+0x24c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10b      	bne.n	8002474 <RCCEx_PLLSAI2_Config+0xd0>
      {
        status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      }
      break;
 8002462:	e007      	b.n	8002474 <RCCEx_PLLSAI2_Config+0xd0>
    default:
      status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      break;
 800246a:	e004      	b.n	8002476 <RCCEx_PLLSAI2_Config+0xd2>
      break;
 800246c:	bf00      	nop
 800246e:	e002      	b.n	8002476 <RCCEx_PLLSAI2_Config+0xd2>
      break;
 8002470:	bf00      	nop
 8002472:	e000      	b.n	8002476 <RCCEx_PLLSAI2_Config+0xd2>
      break;
 8002474:	bf00      	nop
    }
    
    if(status == HAL_OK)
 8002476:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800247a:	2b00      	cmp	r3, #0
 800247c:	d117      	bne.n	80024ae <RCCEx_PLLSAI2_Config+0x10a>
    {
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 800247e:	4c5c      	ldr	r4, [pc, #368]	; (80025f0 <RCCEx_PLLSAI2_Config+0x24c>)
 8002480:	4b5b      	ldr	r3, [pc, #364]	; (80025f0 <RCCEx_PLLSAI2_Config+0x24c>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6819      	ldr	r1, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	1e58      	subs	r0, r3, #1
 8002492:	2370      	movs	r3, #112	; 0x70
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a0:	fab3 f383 	clz	r3, r3
 80024a4:	fa00 f303 	lsl.w	r3, r0, r3
 80024a8:	430b      	orrs	r3, r1
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60e3      	str	r3, [r4, #12]
    }
  }
  
  if(status == HAL_OK)
 80024ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f040 8096 	bne.w	80025e4 <RCCEx_PLLSAI2_Config+0x240>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80024b8:	4a4d      	ldr	r2, [pc, #308]	; (80025f0 <RCCEx_PLLSAI2_Config+0x24c>)
 80024ba:	4b4d      	ldr	r3, [pc, #308]	; (80025f0 <RCCEx_PLLSAI2_Config+0x24c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c4:	f7fe f9b8 	bl	8000838 <HAL_GetTick>
 80024c8:	63b8      	str	r0, [r7, #56]	; 0x38

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 80024ca:	e00a      	b.n	80024e2 <RCCEx_PLLSAI2_Config+0x13e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80024cc:	f7fe f9b4 	bl	8000838 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d903      	bls.n	80024e2 <RCCEx_PLLSAI2_Config+0x13e>
      {
        status = HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        break;
 80024e0:	e005      	b.n	80024ee <RCCEx_PLLSAI2_Config+0x14a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 80024e2:	4b43      	ldr	r3, [pc, #268]	; (80025f0 <RCCEx_PLLSAI2_Config+0x24c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1ee      	bne.n	80024cc <RCCEx_PLLSAI2_Config+0x128>
      }
    }

    if(status == HAL_OK)    
 80024ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d176      	bne.n	80025e4 <RCCEx_PLLSAI2_Config+0x240>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d126      	bne.n	800254a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR, 
 80024fc:	4c3c      	ldr	r4, [pc, #240]	; (80025f0 <RCCEx_PLLSAI2_Config+0x24c>)
 80024fe:	4b3c      	ldr	r3, [pc, #240]	; (80025f0 <RCCEx_PLLSAI2_Config+0x24c>)
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6891      	ldr	r1, [r2, #8]
 800250e:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002512:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	fa92 f2a2 	rbit	r2, r2
 800251a:	61ba      	str	r2, [r7, #24]
  return(result);
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	fab2 f282 	clz	r2, r2
 8002522:	4091      	lsls	r1, r2
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	68d2      	ldr	r2, [r2, #12]
 8002528:	0910      	lsrs	r0, r2, #4
 800252a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800252e:	627a      	str	r2, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002532:	fa92 f2a2 	rbit	r2, r2
 8002536:	623a      	str	r2, [r7, #32]
  return(result);
 8002538:	6a3a      	ldr	r2, [r7, #32]
 800253a:	fab2 f282 	clz	r2, r2
 800253e:	fa00 f202 	lsl.w	r2, r0, r2
 8002542:	430a      	orrs	r2, r1
 8002544:	4313      	orrs	r3, r2
 8002546:	6163      	str	r3, [r4, #20]
 8002548:	e026      	b.n	8002598 <RCCEx_PLLSAI2_Config+0x1f4>
      }
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR, 
 800254a:	4c29      	ldr	r4, [pc, #164]	; (80025f0 <RCCEx_PLLSAI2_Config+0x24c>)
 800254c:	4b28      	ldr	r3, [pc, #160]	; (80025f0 <RCCEx_PLLSAI2_Config+0x24c>)
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002554:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6891      	ldr	r1, [r2, #8]
 800255c:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002560:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	fa92 f2a2 	rbit	r2, r2
 8002568:	60ba      	str	r2, [r7, #8]
  return(result);
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	fab2 f282 	clz	r2, r2
 8002570:	4091      	lsls	r1, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6912      	ldr	r2, [r2, #16]
 8002576:	0852      	lsrs	r2, r2, #1
 8002578:	1e50      	subs	r0, r2, #1
 800257a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800257e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	fa92 f2a2 	rbit	r2, r2
 8002586:	613a      	str	r2, [r7, #16]
  return(result);
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	fab2 f282 	clz	r2, r2
 800258e:	fa00 f202 	lsl.w	r2, r0, r2
 8002592:	430a      	orrs	r2, r1
 8002594:	4313      	orrs	r3, r2
 8002596:	6163      	str	r3, [r4, #20]
                   (PllSai2->PLLSAI2N << POSITION_VAL(RCC_PLLSAI2CFGR_PLLSAI2N)) | 
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI2CFGR_PLLSAI2R)));
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002598:	4a15      	ldr	r2, [pc, #84]	; (80025f0 <RCCEx_PLLSAI2_Config+0x24c>)
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <RCCEx_PLLSAI2_Config+0x24c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a4:	f7fe f948 	bl	8000838 <HAL_GetTick>
 80025a8:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 80025aa:	e00a      	b.n	80025c2 <RCCEx_PLLSAI2_Config+0x21e>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025ac:	f7fe f944 	bl	8000838 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d903      	bls.n	80025c2 <RCCEx_PLLSAI2_Config+0x21e>
        {
          status = HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
          break;
 80025c0:	e005      	b.n	80025ce <RCCEx_PLLSAI2_Config+0x22a>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <RCCEx_PLLSAI2_Config+0x24c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0ee      	beq.n	80025ac <RCCEx_PLLSAI2_Config+0x208>
        }
      }

      if(status == HAL_OK)    
 80025ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <RCCEx_PLLSAI2_Config+0x240>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80025d6:	4906      	ldr	r1, [pc, #24]	; (80025f0 <RCCEx_PLLSAI2_Config+0x24c>)
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <RCCEx_PLLSAI2_Config+0x24c>)
 80025da:	695a      	ldr	r2, [r3, #20]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	614b      	str	r3, [r1, #20]
      }
    }
  }
  
  return status;
 80025e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3744      	adds	r7, #68	; 0x44
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd90      	pop	{r4, r7, pc}
 80025f0:	40021000 	.word	0x40021000

080025f4 <HAL_RNG_Init>:
  * @brief  Initialize the RNG peripheral and initialize the associated handle.
  * @param  hrng: pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{ 
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if(hrng == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e025      	b.n	8002652 <HAL_RNG_Init+0x5e>
  }
  
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance)); 
  
  __HAL_LOCK(hrng);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	791b      	ldrb	r3, [r3, #4]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_RNG_Init+0x1e>
 800260e:	2302      	movs	r3, #2
 8002610:	e01f      	b.n	8002652 <HAL_RNG_Init+0x5e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	711a      	strb	r2, [r3, #4]
  
  if(hrng->State == HAL_RNG_STATE_RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	795b      	ldrb	r3, [r3, #5]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d105      	bne.n	800262e <HAL_RNG_Init+0x3a>
  {  
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f001 fa1d 	bl	8003a68 <HAL_RNG_MspInit>
  }
  
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2202      	movs	r2, #2
 8002632:	715a      	strb	r2, [r3, #5]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	6812      	ldr	r2, [r2, #0]
 800263e:	f042 0204 	orr.w	r2, r2, #4
 8002642:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	715a      	strb	r2, [r3, #5]
  
  __HAL_UNLOCK(hrng);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit: pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;    
 8002664:	2300      	movs	r3, #0
 8002666:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng); 
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	791b      	ldrb	r3, [r3, #4]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_RNG_GenerateRandomNumber+0x1e>
 8002674:	2302      	movs	r3, #2
 8002676:	e037      	b.n	80026e8 <HAL_RNG_GenerateRandomNumber+0x8e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	711a      	strb	r2, [r3, #4]
  
  /* Check RNS peripheral state */
  if(hrng->State == HAL_RNG_STATE_READY)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	795b      	ldrb	r3, [r3, #5]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b01      	cmp	r3, #1
 8002686:	d129      	bne.n	80026dc <HAL_RNG_GenerateRandomNumber+0x82>
  {
    /* Change RNG peripheral state */  
    hrng->State = HAL_RNG_STATE_BUSY;  
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800268e:	f7fe f8d3 	bl	8000838 <HAL_GetTick>
 8002692:	60b8      	str	r0, [r7, #8]
  
    /* Check if data register contains valid random data */
    while(__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8002694:	e00e      	b.n	80026b4 <HAL_RNG_GenerateRandomNumber+0x5a>
    {
      if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
 8002696:	f7fe f8cf 	bl	8000838 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d907      	bls.n	80026b4 <HAL_RNG_GenerateRandomNumber+0x5a>
      {    
        hrng->State = HAL_RNG_STATE_ERROR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2204      	movs	r2, #4
 80026a8:	715a      	strb	r2, [r3, #5]

        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	711a      	strb	r2, [r3, #4]
      
        return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e019      	b.n	80026e8 <HAL_RNG_GenerateRandomNumber+0x8e>
    while(__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d1e9      	bne.n	8002696 <HAL_RNG_GenerateRandomNumber+0x3c>
      } 
    }
  
    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	609a      	str	r2, [r3, #8]
    *random32bit = hrng->RandomNumber;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	601a      	str	r2, [r3, #0]
  
    hrng->State = HAL_RNG_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	715a      	strb	r2, [r3, #5]
 80026da:	e001      	b.n	80026e0 <HAL_RNG_GenerateRandomNumber+0x86>
  }
  else
  {
    status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	711a      	strb	r2, [r3, #4]

  return status;
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e043      	b.n	800278a <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d106      	bne.n	800271c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f001 f9c6 	bl	8003aa8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2224      	movs	r2, #36	; 0x24
 8002720:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	f022 0201 	bic.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f82d 	bl	8002794 <UART_SetConfig>
 800273a:	4603      	mov	r3, r0
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e022      	b.n	800278a <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 fb45 	bl	8002ddc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	6852      	ldr	r2, [r2, #4]
 800275c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002760:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6812      	ldr	r2, [r2, #0]
 800276a:	6892      	ldr	r2, [r2, #8]
 800276c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002770:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6812      	ldr	r2, [r2, #0]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	f042 0201 	orr.w	r2, r2, #1
 8002780:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fbcc 	bl	8002f20 <UART_CheckIdleState>
 8002788:	4603      	mov	r3, r0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002794:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80027a2:	2310      	movs	r3, #16
 80027a4:	74fb      	strb	r3, [r7, #19]
  uint16_t brrtemp                    = 0x0000;
 80027a6:	2300      	movs	r3, #0
 80027a8:	81bb      	strh	r3, [r7, #12]
  uint16_t usartdiv                   = 0x0000;
 80027aa:	2300      	movs	r3, #0
 80027ac:	823b      	strh	r3, [r7, #16]
  HAL_StatusTypeDef ret               = HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	73fb      	strb	r3, [r7, #15]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6819      	ldr	r1, [r3, #0]
 80027d4:	4bab      	ldr	r3, [pc, #684]	; (8002a84 <UART_SetConfig+0x2f0>)
 80027d6:	400b      	ands	r3, r1
 80027d8:	6979      	ldr	r1, [r7, #20]
 80027da:	430b      	orrs	r3, r1
 80027dc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	6852      	ldr	r2, [r2, #4]
 80027e8:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	68d2      	ldr	r2, [r2, #12]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	617b      	str	r3, [r7, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4aa2      	ldr	r2, [pc, #648]	; (8002a88 <UART_SetConfig+0x2f4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d004      	beq.n	800280e <UART_SetConfig+0x7a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	4313      	orrs	r3, r2
 800280c:	617b      	str	r3, [r7, #20]
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	6892      	ldr	r2, [r2, #8]
 8002818:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	430a      	orrs	r2, r1
 8002820:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a99      	ldr	r2, [pc, #612]	; (8002a8c <UART_SetConfig+0x2f8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d121      	bne.n	8002870 <UART_SetConfig+0xdc>
 800282c:	4b98      	ldr	r3, [pc, #608]	; (8002a90 <UART_SetConfig+0x2fc>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b03      	cmp	r3, #3
 8002838:	d816      	bhi.n	8002868 <UART_SetConfig+0xd4>
 800283a:	a201      	add	r2, pc, #4	; (adr r2, 8002840 <UART_SetConfig+0xac>)
 800283c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002840:	08002851 	.word	0x08002851
 8002844:	0800285d 	.word	0x0800285d
 8002848:	08002857 	.word	0x08002857
 800284c:	08002863 	.word	0x08002863
 8002850:	2301      	movs	r3, #1
 8002852:	74fb      	strb	r3, [r7, #19]
 8002854:	e0e4      	b.n	8002a20 <UART_SetConfig+0x28c>
 8002856:	2302      	movs	r3, #2
 8002858:	74fb      	strb	r3, [r7, #19]
 800285a:	e0e1      	b.n	8002a20 <UART_SetConfig+0x28c>
 800285c:	2304      	movs	r3, #4
 800285e:	74fb      	strb	r3, [r7, #19]
 8002860:	e0de      	b.n	8002a20 <UART_SetConfig+0x28c>
 8002862:	2308      	movs	r3, #8
 8002864:	74fb      	strb	r3, [r7, #19]
 8002866:	e0db      	b.n	8002a20 <UART_SetConfig+0x28c>
 8002868:	2310      	movs	r3, #16
 800286a:	74fb      	strb	r3, [r7, #19]
 800286c:	bf00      	nop
 800286e:	e0d7      	b.n	8002a20 <UART_SetConfig+0x28c>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a87      	ldr	r2, [pc, #540]	; (8002a94 <UART_SetConfig+0x300>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d134      	bne.n	80028e4 <UART_SetConfig+0x150>
 800287a:	4b85      	ldr	r3, [pc, #532]	; (8002a90 <UART_SetConfig+0x2fc>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002880:	f003 030c 	and.w	r3, r3, #12
 8002884:	2b0c      	cmp	r3, #12
 8002886:	d829      	bhi.n	80028dc <UART_SetConfig+0x148>
 8002888:	a201      	add	r2, pc, #4	; (adr r2, 8002890 <UART_SetConfig+0xfc>)
 800288a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288e:	bf00      	nop
 8002890:	080028c5 	.word	0x080028c5
 8002894:	080028dd 	.word	0x080028dd
 8002898:	080028dd 	.word	0x080028dd
 800289c:	080028dd 	.word	0x080028dd
 80028a0:	080028d1 	.word	0x080028d1
 80028a4:	080028dd 	.word	0x080028dd
 80028a8:	080028dd 	.word	0x080028dd
 80028ac:	080028dd 	.word	0x080028dd
 80028b0:	080028cb 	.word	0x080028cb
 80028b4:	080028dd 	.word	0x080028dd
 80028b8:	080028dd 	.word	0x080028dd
 80028bc:	080028dd 	.word	0x080028dd
 80028c0:	080028d7 	.word	0x080028d7
 80028c4:	2300      	movs	r3, #0
 80028c6:	74fb      	strb	r3, [r7, #19]
 80028c8:	e0aa      	b.n	8002a20 <UART_SetConfig+0x28c>
 80028ca:	2302      	movs	r3, #2
 80028cc:	74fb      	strb	r3, [r7, #19]
 80028ce:	e0a7      	b.n	8002a20 <UART_SetConfig+0x28c>
 80028d0:	2304      	movs	r3, #4
 80028d2:	74fb      	strb	r3, [r7, #19]
 80028d4:	e0a4      	b.n	8002a20 <UART_SetConfig+0x28c>
 80028d6:	2308      	movs	r3, #8
 80028d8:	74fb      	strb	r3, [r7, #19]
 80028da:	e0a1      	b.n	8002a20 <UART_SetConfig+0x28c>
 80028dc:	2310      	movs	r3, #16
 80028de:	74fb      	strb	r3, [r7, #19]
 80028e0:	bf00      	nop
 80028e2:	e09d      	b.n	8002a20 <UART_SetConfig+0x28c>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a6b      	ldr	r2, [pc, #428]	; (8002a98 <UART_SetConfig+0x304>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d120      	bne.n	8002930 <UART_SetConfig+0x19c>
 80028ee:	4b68      	ldr	r3, [pc, #416]	; (8002a90 <UART_SetConfig+0x2fc>)
 80028f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80028f8:	2b10      	cmp	r3, #16
 80028fa:	d00f      	beq.n	800291c <UART_SetConfig+0x188>
 80028fc:	2b10      	cmp	r3, #16
 80028fe:	d802      	bhi.n	8002906 <UART_SetConfig+0x172>
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <UART_SetConfig+0x17c>
 8002904:	e010      	b.n	8002928 <UART_SetConfig+0x194>
 8002906:	2b20      	cmp	r3, #32
 8002908:	d005      	beq.n	8002916 <UART_SetConfig+0x182>
 800290a:	2b30      	cmp	r3, #48	; 0x30
 800290c:	d009      	beq.n	8002922 <UART_SetConfig+0x18e>
 800290e:	e00b      	b.n	8002928 <UART_SetConfig+0x194>
 8002910:	2300      	movs	r3, #0
 8002912:	74fb      	strb	r3, [r7, #19]
 8002914:	e084      	b.n	8002a20 <UART_SetConfig+0x28c>
 8002916:	2302      	movs	r3, #2
 8002918:	74fb      	strb	r3, [r7, #19]
 800291a:	e081      	b.n	8002a20 <UART_SetConfig+0x28c>
 800291c:	2304      	movs	r3, #4
 800291e:	74fb      	strb	r3, [r7, #19]
 8002920:	e07e      	b.n	8002a20 <UART_SetConfig+0x28c>
 8002922:	2308      	movs	r3, #8
 8002924:	74fb      	strb	r3, [r7, #19]
 8002926:	e07b      	b.n	8002a20 <UART_SetConfig+0x28c>
 8002928:	2310      	movs	r3, #16
 800292a:	74fb      	strb	r3, [r7, #19]
 800292c:	bf00      	nop
 800292e:	e077      	b.n	8002a20 <UART_SetConfig+0x28c>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a59      	ldr	r2, [pc, #356]	; (8002a9c <UART_SetConfig+0x308>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d120      	bne.n	800297c <UART_SetConfig+0x1e8>
 800293a:	4b55      	ldr	r3, [pc, #340]	; (8002a90 <UART_SetConfig+0x2fc>)
 800293c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002940:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002944:	2b40      	cmp	r3, #64	; 0x40
 8002946:	d00f      	beq.n	8002968 <UART_SetConfig+0x1d4>
 8002948:	2b40      	cmp	r3, #64	; 0x40
 800294a:	d802      	bhi.n	8002952 <UART_SetConfig+0x1be>
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <UART_SetConfig+0x1c8>
 8002950:	e010      	b.n	8002974 <UART_SetConfig+0x1e0>
 8002952:	2b80      	cmp	r3, #128	; 0x80
 8002954:	d005      	beq.n	8002962 <UART_SetConfig+0x1ce>
 8002956:	2bc0      	cmp	r3, #192	; 0xc0
 8002958:	d009      	beq.n	800296e <UART_SetConfig+0x1da>
 800295a:	e00b      	b.n	8002974 <UART_SetConfig+0x1e0>
 800295c:	2300      	movs	r3, #0
 800295e:	74fb      	strb	r3, [r7, #19]
 8002960:	e05e      	b.n	8002a20 <UART_SetConfig+0x28c>
 8002962:	2302      	movs	r3, #2
 8002964:	74fb      	strb	r3, [r7, #19]
 8002966:	e05b      	b.n	8002a20 <UART_SetConfig+0x28c>
 8002968:	2304      	movs	r3, #4
 800296a:	74fb      	strb	r3, [r7, #19]
 800296c:	e058      	b.n	8002a20 <UART_SetConfig+0x28c>
 800296e:	2308      	movs	r3, #8
 8002970:	74fb      	strb	r3, [r7, #19]
 8002972:	e055      	b.n	8002a20 <UART_SetConfig+0x28c>
 8002974:	2310      	movs	r3, #16
 8002976:	74fb      	strb	r3, [r7, #19]
 8002978:	bf00      	nop
 800297a:	e051      	b.n	8002a20 <UART_SetConfig+0x28c>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a47      	ldr	r2, [pc, #284]	; (8002aa0 <UART_SetConfig+0x30c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d124      	bne.n	80029d0 <UART_SetConfig+0x23c>
 8002986:	4b42      	ldr	r3, [pc, #264]	; (8002a90 <UART_SetConfig+0x2fc>)
 8002988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002994:	d012      	beq.n	80029bc <UART_SetConfig+0x228>
 8002996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800299a:	d802      	bhi.n	80029a2 <UART_SetConfig+0x20e>
 800299c:	2b00      	cmp	r3, #0
 800299e:	d007      	beq.n	80029b0 <UART_SetConfig+0x21c>
 80029a0:	e012      	b.n	80029c8 <UART_SetConfig+0x234>
 80029a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029a6:	d006      	beq.n	80029b6 <UART_SetConfig+0x222>
 80029a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029ac:	d009      	beq.n	80029c2 <UART_SetConfig+0x22e>
 80029ae:	e00b      	b.n	80029c8 <UART_SetConfig+0x234>
 80029b0:	2300      	movs	r3, #0
 80029b2:	74fb      	strb	r3, [r7, #19]
 80029b4:	e034      	b.n	8002a20 <UART_SetConfig+0x28c>
 80029b6:	2302      	movs	r3, #2
 80029b8:	74fb      	strb	r3, [r7, #19]
 80029ba:	e031      	b.n	8002a20 <UART_SetConfig+0x28c>
 80029bc:	2304      	movs	r3, #4
 80029be:	74fb      	strb	r3, [r7, #19]
 80029c0:	e02e      	b.n	8002a20 <UART_SetConfig+0x28c>
 80029c2:	2308      	movs	r3, #8
 80029c4:	74fb      	strb	r3, [r7, #19]
 80029c6:	e02b      	b.n	8002a20 <UART_SetConfig+0x28c>
 80029c8:	2310      	movs	r3, #16
 80029ca:	74fb      	strb	r3, [r7, #19]
 80029cc:	bf00      	nop
 80029ce:	e027      	b.n	8002a20 <UART_SetConfig+0x28c>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a2c      	ldr	r2, [pc, #176]	; (8002a88 <UART_SetConfig+0x2f4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d123      	bne.n	8002a22 <UART_SetConfig+0x28e>
 80029da:	4b2d      	ldr	r3, [pc, #180]	; (8002a90 <UART_SetConfig+0x2fc>)
 80029dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e8:	d012      	beq.n	8002a10 <UART_SetConfig+0x27c>
 80029ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ee:	d802      	bhi.n	80029f6 <UART_SetConfig+0x262>
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d007      	beq.n	8002a04 <UART_SetConfig+0x270>
 80029f4:	e012      	b.n	8002a1c <UART_SetConfig+0x288>
 80029f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029fa:	d006      	beq.n	8002a0a <UART_SetConfig+0x276>
 80029fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a00:	d009      	beq.n	8002a16 <UART_SetConfig+0x282>
 8002a02:	e00b      	b.n	8002a1c <UART_SetConfig+0x288>
 8002a04:	2300      	movs	r3, #0
 8002a06:	74fb      	strb	r3, [r7, #19]
 8002a08:	e00a      	b.n	8002a20 <UART_SetConfig+0x28c>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	74fb      	strb	r3, [r7, #19]
 8002a0e:	e007      	b.n	8002a20 <UART_SetConfig+0x28c>
 8002a10:	2304      	movs	r3, #4
 8002a12:	74fb      	strb	r3, [r7, #19]
 8002a14:	e004      	b.n	8002a20 <UART_SetConfig+0x28c>
 8002a16:	2308      	movs	r3, #8
 8002a18:	74fb      	strb	r3, [r7, #19]
 8002a1a:	e001      	b.n	8002a20 <UART_SetConfig+0x28c>
 8002a1c:	2310      	movs	r3, #16
 8002a1e:	74fb      	strb	r3, [r7, #19]
 8002a20:	bf00      	nop

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a18      	ldr	r2, [pc, #96]	; (8002a88 <UART_SetConfig+0x2f4>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	f040 80f0 	bne.w	8002c0e <UART_SetConfig+0x47a>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]

    switch (clocksource)
 8002a32:	7cfb      	ldrb	r3, [r7, #19]
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d837      	bhi.n	8002aa8 <UART_SetConfig+0x314>
 8002a38:	a201      	add	r2, pc, #4	; (adr r2, 8002a40 <UART_SetConfig+0x2ac>)
 8002a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3e:	bf00      	nop
 8002a40:	08002a65 	.word	0x08002a65
 8002a44:	08002aa9 	.word	0x08002aa9
 8002a48:	08002a6d 	.word	0x08002a6d
 8002a4c:	08002aa9 	.word	0x08002aa9
 8002a50:	08002a73 	.word	0x08002a73
 8002a54:	08002aa9 	.word	0x08002aa9
 8002a58:	08002aa9 	.word	0x08002aa9
 8002a5c:	08002aa9 	.word	0x08002aa9
 8002a60:	08002a7b 	.word	0x08002a7b
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8002a64:	f7fe ffc0 	bl	80019e8 <HAL_RCC_GetPCLK1Freq>
 8002a68:	6178      	str	r0, [r7, #20]
      break;
 8002a6a:	e020      	b.n	8002aae <UART_SetConfig+0x31a>
    case UART_CLOCKSOURCE_HSI:
      tmpreg = (uint32_t) HSI_VALUE;
 8002a6c:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <UART_SetConfig+0x310>)
 8002a6e:	617b      	str	r3, [r7, #20]
      break;
 8002a70:	e01d      	b.n	8002aae <UART_SetConfig+0x31a>
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 8002a72:	f7fe feb3 	bl	80017dc <HAL_RCC_GetSysClockFreq>
 8002a76:	6178      	str	r0, [r7, #20]
      break;
 8002a78:	e019      	b.n	8002aae <UART_SetConfig+0x31a>
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 8002a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a7e:	617b      	str	r3, [r7, #20]
      break;
 8002a80:	e015      	b.n	8002aae <UART_SetConfig+0x31a>
 8002a82:	bf00      	nop
 8002a84:	efff69f3 	.word	0xefff69f3
 8002a88:	40008000 	.word	0x40008000
 8002a8c:	40013800 	.word	0x40013800
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40004400 	.word	0x40004400
 8002a98:	40004800 	.word	0x40004800
 8002a9c:	40004c00 	.word	0x40004c00
 8002aa0:	40005000 	.word	0x40005000
 8002aa4:	00f42400 	.word	0x00f42400
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8002aac:	bf00      	nop
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 818a 	beq.w	8002dca <UART_SetConfig+0x636>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	441a      	add	r2, r3
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d805      	bhi.n	8002ad2 <UART_SetConfig+0x33e>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	031a      	lsls	r2, r3, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d202      	bcs.n	8002ad8 <UART_SetConfig+0x344>
      {
        ret = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
 8002ad6:	e178      	b.n	8002dca <UART_SetConfig+0x636>
      }
      else
      {
        switch (clocksource)
 8002ad8:	7cfb      	ldrb	r3, [r7, #19]
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	f200 8084 	bhi.w	8002be8 <UART_SetConfig+0x454>
 8002ae0:	a201      	add	r2, pc, #4	; (adr r2, 8002ae8 <UART_SetConfig+0x354>)
 8002ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae6:	bf00      	nop
 8002ae8:	08002b0d 	.word	0x08002b0d
 8002aec:	08002be9 	.word	0x08002be9
 8002af0:	08002b4d 	.word	0x08002b4d
 8002af4:	08002be9 	.word	0x08002be9
 8002af8:	08002b81 	.word	0x08002b81
 8002afc:	08002be9 	.word	0x08002be9
 8002b00:	08002be9 	.word	0x08002be9
 8002b04:	08002be9 	.word	0x08002be9
 8002b08:	08002bbf 	.word	0x08002bbf
        {
        case UART_CLOCKSOURCE_PCLK1:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002b0c:	f7fe ff6c 	bl	80019e8 <HAL_RCC_GetPCLK1Freq>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f04f 0400 	mov.w	r4, #0
 8002b16:	ea4f 2904 	mov.w	r9, r4, lsl #8
 8002b1a:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 8002b1e:	ea4f 2803 	mov.w	r8, r3, lsl #8
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	085b      	lsrs	r3, r3, #1
 8002b28:	f04f 0400 	mov.w	r4, #0
 8002b2c:	eb18 0003 	adds.w	r0, r8, r3
 8002b30:	eb49 0104 	adc.w	r1, r9, r4
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f04f 0400 	mov.w	r4, #0
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4623      	mov	r3, r4
 8002b40:	f7fd fcba 	bl	80004b8 <__aeabi_uldivmod>
 8002b44:	4603      	mov	r3, r0
 8002b46:	460c      	mov	r4, r1
 8002b48:	617b      	str	r3, [r7, #20]
          break;
 8002b4a:	e050      	b.n	8002bee <UART_SetConfig+0x45a>
        case UART_CLOCKSOURCE_HSI:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	085b      	lsrs	r3, r3, #1
 8002b52:	f04f 0400 	mov.w	r4, #0
 8002b56:	49a0      	ldr	r1, [pc, #640]	; (8002dd8 <UART_SetConfig+0x644>)
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	eb13 0801 	adds.w	r8, r3, r1
 8002b60:	eb44 0902 	adc.w	r9, r4, r2
 8002b64:	4640      	mov	r0, r8
 8002b66:	4649      	mov	r1, r9
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f04f 0400 	mov.w	r4, #0
 8002b70:	461a      	mov	r2, r3
 8002b72:	4623      	mov	r3, r4
 8002b74:	f7fd fca0 	bl	80004b8 <__aeabi_uldivmod>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	460c      	mov	r4, r1
 8002b7c:	617b      	str	r3, [r7, #20]
          break;
 8002b7e:	e036      	b.n	8002bee <UART_SetConfig+0x45a>
        case UART_CLOCKSOURCE_SYSCLK:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002b80:	f7fe fe2c 	bl	80017dc <HAL_RCC_GetSysClockFreq>
 8002b84:	4603      	mov	r3, r0
 8002b86:	461a      	mov	r2, r3
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	021d      	lsls	r5, r3, #8
 8002b8e:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8002b92:	0214      	lsls	r4, r2, #8
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	085b      	lsrs	r3, r3, #1
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	18a0      	adds	r0, r4, r2
 8002ba2:	eb45 0103 	adc.w	r1, r5, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f04f 0400 	mov.w	r4, #0
 8002bae:	461a      	mov	r2, r3
 8002bb0:	4623      	mov	r3, r4
 8002bb2:	f7fd fc81 	bl	80004b8 <__aeabi_uldivmod>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	460c      	mov	r4, r1
 8002bba:	617b      	str	r3, [r7, #20]
          break;
 8002bbc:	e017      	b.n	8002bee <UART_SetConfig+0x45a>
        case UART_CLOCKSOURCE_LSE:
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	085b      	lsrs	r3, r3, #1
 8002bc4:	f04f 0400 	mov.w	r4, #0
 8002bc8:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8002bcc:	f144 0100 	adc.w	r1, r4, #0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f04f 0400 	mov.w	r4, #0
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4623      	mov	r3, r4
 8002bdc:	f7fd fc6c 	bl	80004b8 <__aeabi_uldivmod>
 8002be0:	4603      	mov	r3, r0
 8002be2:	460c      	mov	r4, r1
 8002be4:	617b      	str	r3, [r7, #20]
          break;
 8002be6:	e002      	b.n	8002bee <UART_SetConfig+0x45a>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
          ret = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]
          break;
 8002bec:	bf00      	nop
        }
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bf4:	d308      	bcc.n	8002c08 <UART_SetConfig+0x474>
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bfc:	d204      	bcs.n	8002c08 <UART_SetConfig+0x474>
        {
           huart->Instance->BRR = tmpreg;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	60da      	str	r2, [r3, #12]
 8002c06:	e0e0      	b.n	8002dca <UART_SetConfig+0x636>
        }
        else
        {
          ret = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
 8002c0c:	e0dd      	b.n	8002dca <UART_SetConfig+0x636>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c16:	d16e      	bne.n	8002cf6 <UART_SetConfig+0x562>
  {
    switch (clocksource)
 8002c18:	7cfb      	ldrb	r3, [r7, #19]
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d856      	bhi.n	8002ccc <UART_SetConfig+0x538>
 8002c1e:	a201      	add	r2, pc, #4	; (adr r2, 8002c24 <UART_SetConfig+0x490>)
 8002c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c24:	08002c49 	.word	0x08002c49
 8002c28:	08002c65 	.word	0x08002c65
 8002c2c:	08002c81 	.word	0x08002c81
 8002c30:	08002ccd 	.word	0x08002ccd
 8002c34:	08002c9b 	.word	0x08002c9b
 8002c38:	08002ccd 	.word	0x08002ccd
 8002c3c:	08002ccd 	.word	0x08002ccd
 8002c40:	08002ccd 	.word	0x08002ccd
 8002c44:	08002cb7 	.word	0x08002cb7
    {
    case UART_CLOCKSOURCE_PCLK1:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002c48:	f7fe fece 	bl	80019e8 <HAL_RCC_GetPCLK1Freq>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	005a      	lsls	r2, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	085b      	lsrs	r3, r3, #1
 8002c56:	441a      	add	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c60:	823b      	strh	r3, [r7, #16]
      break;
 8002c62:	e036      	b.n	8002cd2 <UART_SetConfig+0x53e>
    case UART_CLOCKSOURCE_PCLK2:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002c64:	f7fe fee2 	bl	8001a2c <HAL_RCC_GetPCLK2Freq>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	005a      	lsls	r2, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	085b      	lsrs	r3, r3, #1
 8002c72:	441a      	add	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7c:	823b      	strh	r3, [r7, #16]
      break;
 8002c7e:	e028      	b.n	8002cd2 <UART_SetConfig+0x53e>
    case UART_CLOCKSOURCE_HSI:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	085b      	lsrs	r3, r3, #1
 8002c86:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002c8a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6852      	ldr	r2, [r2, #4]
 8002c92:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c96:	823b      	strh	r3, [r7, #16]
      break;
 8002c98:	e01b      	b.n	8002cd2 <UART_SetConfig+0x53e>
    case UART_CLOCKSOURCE_SYSCLK:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c9a:	f7fe fd9f 	bl	80017dc <HAL_RCC_GetSysClockFreq>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	005a      	lsls	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	085b      	lsrs	r3, r3, #1
 8002ca8:	441a      	add	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb2:	823b      	strh	r3, [r7, #16]
      break;
 8002cb4:	e00d      	b.n	8002cd2 <UART_SetConfig+0x53e>
    case UART_CLOCKSOURCE_LSE:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	085b      	lsrs	r3, r3, #1
 8002cbc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc8:	823b      	strh	r3, [r7, #16]
      break;
 8002cca:	e002      	b.n	8002cd2 <UART_SetConfig+0x53e>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd0:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0;
 8002cd2:	8a3b      	ldrh	r3, [r7, #16]
 8002cd4:	f023 030f 	bic.w	r3, r3, #15
 8002cd8:	81bb      	strh	r3, [r7, #12]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8002cda:	8a3b      	ldrh	r3, [r7, #16]
 8002cdc:	105b      	asrs	r3, r3, #1
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	89bb      	ldrh	r3, [r7, #12]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	81bb      	strh	r3, [r7, #12]
    huart->Instance->BRR = brrtemp;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	89ba      	ldrh	r2, [r7, #12]
 8002cf2:	60da      	str	r2, [r3, #12]
 8002cf4:	e069      	b.n	8002dca <UART_SetConfig+0x636>
  }
  else
  {
    switch (clocksource)
 8002cf6:	7cfb      	ldrb	r3, [r7, #19]
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	d863      	bhi.n	8002dc4 <UART_SetConfig+0x630>
 8002cfc:	a201      	add	r2, pc, #4	; (adr r2, 8002d04 <UART_SetConfig+0x570>)
 8002cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d02:	bf00      	nop
 8002d04:	08002d29 	.word	0x08002d29
 8002d08:	08002d49 	.word	0x08002d49
 8002d0c:	08002d69 	.word	0x08002d69
 8002d10:	08002dc5 	.word	0x08002dc5
 8002d14:	08002d89 	.word	0x08002d89
 8002d18:	08002dc5 	.word	0x08002dc5
 8002d1c:	08002dc5 	.word	0x08002dc5
 8002d20:	08002dc5 	.word	0x08002dc5
 8002d24:	08002da9 	.word	0x08002da9
    {
    case UART_CLOCKSOURCE_PCLK1:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681c      	ldr	r4, [r3, #0]
 8002d2c:	f7fe fe5c 	bl	80019e8 <HAL_RCC_GetPCLK1Freq>
 8002d30:	4602      	mov	r2, r0
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	085b      	lsrs	r3, r3, #1
 8002d38:	441a      	add	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	60e3      	str	r3, [r4, #12]
      break;
 8002d46:	e040      	b.n	8002dca <UART_SetConfig+0x636>
    case UART_CLOCKSOURCE_PCLK2:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681c      	ldr	r4, [r3, #0]
 8002d4c:	f7fe fe6e 	bl	8001a2c <HAL_RCC_GetPCLK2Freq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	085b      	lsrs	r3, r3, #1
 8002d58:	441a      	add	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	60e3      	str	r3, [r4, #12]
      break;
 8002d66:	e030      	b.n	8002dca <UART_SetConfig+0x636>
    case UART_CLOCKSOURCE_HSI:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	085b      	lsrs	r3, r3, #1
 8002d72:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002d76:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	6849      	ldr	r1, [r1, #4]
 8002d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	60d3      	str	r3, [r2, #12]
      break;
 8002d86:	e020      	b.n	8002dca <UART_SetConfig+0x636>
    case UART_CLOCKSOURCE_SYSCLK:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681c      	ldr	r4, [r3, #0]
 8002d8c:	f7fe fd26 	bl	80017dc <HAL_RCC_GetSysClockFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	085b      	lsrs	r3, r3, #1
 8002d98:	441a      	add	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	60e3      	str	r3, [r4, #12]
      break;
 8002da6:	e010      	b.n	8002dca <UART_SetConfig+0x636>
    case UART_CLOCKSOURCE_LSE:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6852      	ldr	r2, [r2, #4]
 8002db0:	0852      	lsrs	r2, r2, #1
 8002db2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6852      	ldr	r2, [r2, #4]
 8002dba:	fbb1 f2f2 	udiv	r2, r1, r2
 8002dbe:	b292      	uxth	r2, r2
 8002dc0:	60da      	str	r2, [r3, #12]
      break;
 8002dc2:	e002      	b.n	8002dca <UART_SetConfig+0x636>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002dc8:	bf00      	nop
    }
  }

  return ret;
 8002dca:	7bfb      	ldrb	r3, [r7, #15]

}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002dd6:	bf00      	nop
 8002dd8:	f4240000 	.word	0xf4240000

08002ddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	6852      	ldr	r2, [r2, #4]
 8002dfa:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002e02:	430a      	orrs	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6812      	ldr	r2, [r2, #0]
 8002e1a:	6852      	ldr	r2, [r2, #4]
 8002e1c:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e24:	430a      	orrs	r2, r1
 8002e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	6852      	ldr	r2, [r2, #4]
 8002e3e:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e46:	430a      	orrs	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6812      	ldr	r2, [r2, #0]
 8002e5e:	6852      	ldr	r2, [r2, #4]
 8002e60:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	6892      	ldr	r2, [r2, #8]
 8002e82:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	6892      	ldr	r2, [r2, #8]
 8002ea4:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002eac:	430a      	orrs	r2, r1
 8002eae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d01a      	beq.n	8002ef2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	6852      	ldr	r2, [r2, #4]
 8002ec6:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eda:	d10a      	bne.n	8002ef2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	6852      	ldr	r2, [r2, #4]
 8002ee6:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	6852      	ldr	r2, [r2, #4]
 8002f08:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f10:	430a      	orrs	r2, r1
 8002f12:	605a      	str	r2, [r3, #4]
  }
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002f32:	f7fd fc81 	bl	8000838 <HAL_GetTick>
 8002f36:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b08      	cmp	r3, #8
 8002f44:	d10e      	bne.n	8002f64 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f82c 	bl	8002fb2 <UART_WaitOnFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e022      	b.n	8002faa <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d10e      	bne.n	8002f90 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f816 	bl	8002fb2 <UART_WaitOnFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e00c      	b.n	8002faa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	603b      	str	r3, [r7, #0]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fc2:	e02c      	b.n	800301e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fca:	d028      	beq.n	800301e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d007      	beq.n	8002fe2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fd2:	f7fd fc31 	bl	8000838 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	1ad2      	subs	r2, r2, r3
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d91d      	bls.n	800301e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ff0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	6812      	ldr	r2, [r2, #0]
 8002ffa:	6892      	ldr	r2, [r2, #8]
 8002ffc:	f022 0201 	bic.w	r2, r2, #1
 8003000:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e00f      	b.n	800303e <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	69da      	ldr	r2, [r3, #28]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	401a      	ands	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	429a      	cmp	r2, r3
 800302c:	bf0c      	ite	eq
 800302e:	2301      	moveq	r3, #1
 8003030:	2300      	movne	r3, #0
 8003032:	b2db      	uxtb	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	429a      	cmp	r2, r3
 800303a:	d0c3      	beq.n	8002fc4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <Dice_HMAC_SHA256_Init>:
Dice_HMAC_SHA256_Init(
    DICE_HMAC_SHA256_CTX *ctx,
    const uint8_t *key,
    size_t keyLen
)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b088      	sub	sp, #32
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
    size_t cnt;

    assert(ctx && key);

    // if keyLen > 64, hash it and use it as key
    if (keyLen > HMAC_SHA256_BLOCK_LENGTH) {
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b40      	cmp	r3, #64	; 0x40
 8003056:	d909      	bls.n	800306c <Dice_HMAC_SHA256_Init+0x26>
        Dice_SHA256_Block_ctx(&ctx->hashCtx, key, keyLen, ctx->opad);
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	3370      	adds	r3, #112	; 0x70
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	68b9      	ldr	r1, [r7, #8]
 8003062:	f000 fc5d 	bl	8003920 <Dice_SHA256_Block_ctx>
        keyLen = SHA256_DIGEST_LENGTH;
 8003066:	2320      	movs	r3, #32
 8003068:	607b      	str	r3, [r7, #4]
 800306a:	e013      	b.n	8003094 <Dice_HMAC_SHA256_Init+0x4e>
    } else {
        MEMCPY_BCOPY(ctx->opad, key, keyLen);
 800306c:	2300      	movs	r3, #0
 800306e:	61bb      	str	r3, [r7, #24]
 8003070:	e00c      	b.n	800308c <Dice_HMAC_SHA256_Init+0x46>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	4413      	add	r3, r2
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	440a      	add	r2, r1
 8003082:	7812      	ldrb	r2, [r2, #0]
 8003084:	701a      	strb	r2, [r3, #0]
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	3301      	adds	r3, #1
 800308a:	61bb      	str	r3, [r7, #24]
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	429a      	cmp	r2, r3
 8003092:	d3ee      	bcc.n	8003072 <Dice_HMAC_SHA256_Init+0x2c>

    //
    // prepare inner hash SHA256((K XOR ipad) || msg)
    // K XOR ipad
    //
    for (cnt = 0; cnt < keyLen; cnt++) {
 8003094:	2300      	movs	r3, #0
 8003096:	61fb      	str	r3, [r7, #28]
 8003098:	e010      	b.n	80030bc <Dice_HMAC_SHA256_Init+0x76>
        ctx->opad[cnt] ^= 0x36;
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	4413      	add	r3, r2
 80030a0:	3370      	adds	r3, #112	; 0x70
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	f083 0336 	eor.w	r3, r3, #54	; 0x36
 80030a8:	b2d9      	uxtb	r1, r3
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	4413      	add	r3, r2
 80030b0:	3370      	adds	r3, #112	; 0x70
 80030b2:	460a      	mov	r2, r1
 80030b4:	701a      	strb	r2, [r3, #0]
    for (cnt = 0; cnt < keyLen; cnt++) {
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	3301      	adds	r3, #1
 80030ba:	61fb      	str	r3, [r7, #28]
 80030bc:	69fa      	ldr	r2, [r7, #28]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d3ea      	bcc.n	800309a <Dice_HMAC_SHA256_Init+0x54>
    }
    MEMSET_BZERO(&ctx->opad[keyLen], 0x36, sizeof(ctx->opad) - keyLen);
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	e00a      	b.n	80030e0 <Dice_HMAC_SHA256_Init+0x9a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3370      	adds	r3, #112	; 0x70
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	441a      	add	r2, r3
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	4413      	add	r3, r2
 80030d6:	2200      	movs	r2, #0
 80030d8:	701a      	strb	r2, [r3, #0]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	3301      	adds	r3, #1
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d8ee      	bhi.n	80030ca <Dice_HMAC_SHA256_Init+0x84>

    Dice_SHA256_Init(&ctx->hashCtx);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 f856 	bl	80031a0 <Dice_SHA256_Init>
    Dice_SHA256_Update(&ctx->hashCtx, ctx->opad, HMAC_SHA256_BLOCK_LENGTH);
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	3370      	adds	r3, #112	; 0x70
 80030fa:	2240      	movs	r2, #64	; 0x40
 80030fc:	4619      	mov	r1, r3
 80030fe:	f000 fa0f 	bl	8003520 <Dice_SHA256_Update>

    // Turn ipad into opad
    for (cnt = 0; cnt < sizeof(ctx->opad); cnt++) {
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	e010      	b.n	800312a <Dice_HMAC_SHA256_Init+0xe4>
        ctx->opad[cnt] ^= (0x5c ^ 0x36);
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	4413      	add	r3, r2
 800310e:	3370      	adds	r3, #112	; 0x70
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	f083 036a 	eor.w	r3, r3, #106	; 0x6a
 8003116:	b2d9      	uxtb	r1, r3
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	4413      	add	r3, r2
 800311e:	3370      	adds	r3, #112	; 0x70
 8003120:	460a      	mov	r2, r1
 8003122:	701a      	strb	r2, [r3, #0]
    for (cnt = 0; cnt < sizeof(ctx->opad); cnt++) {
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	3301      	adds	r3, #1
 8003128:	61fb      	str	r3, [r7, #28]
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	2b3f      	cmp	r3, #63	; 0x3f
 800312e:	d9eb      	bls.n	8003108 <Dice_HMAC_SHA256_Init+0xc2>
    }
}
 8003130:	bf00      	nop
 8003132:	3720      	adds	r7, #32
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <Dice_HMAC_SHA256_Update>:
Dice_HMAC_SHA256_Update(
    DICE_HMAC_SHA256_CTX *ctx,
    const uint8_t *data,
    size_t dataLen
)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
    Dice_SHA256_Update(&ctx->hashCtx, data, dataLen);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	68b9      	ldr	r1, [r7, #8]
 800314a:	4618      	mov	r0, r3
 800314c:	f000 f9e8 	bl	8003520 <Dice_SHA256_Update>
    return;
 8003150:	bf00      	nop
}
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <Dice_HMAC_SHA256_Final>:
void
Dice_HMAC_SHA256_Final(
    DICE_HMAC_SHA256_CTX *ctx,
    uint8_t *digest
)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
    // complete inner hash SHA256(K XOR ipad, msg)
    Dice_SHA256_Final(&ctx->hashCtx, digest);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6839      	ldr	r1, [r7, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fa9a 	bl	80036a0 <Dice_SHA256_Final>

    // perform outer hash SHA256(K XOR opad, SHA256(K XOR ipad, msg))
    Dice_SHA256_Init(&ctx->hashCtx);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4618      	mov	r0, r3
 8003170:	f000 f816 	bl	80031a0 <Dice_SHA256_Init>
    Dice_SHA256_Update(&ctx->hashCtx, ctx->opad, HMAC_SHA256_BLOCK_LENGTH);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3370      	adds	r3, #112	; 0x70
 800317a:	2240      	movs	r2, #64	; 0x40
 800317c:	4619      	mov	r1, r3
 800317e:	f000 f9cf 	bl	8003520 <Dice_SHA256_Update>
    Dice_SHA256_Update(&ctx->hashCtx, digest, SHA256_DIGEST_LENGTH);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2220      	movs	r2, #32
 8003186:	6839      	ldr	r1, [r7, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f000 f9c9 	bl	8003520 <Dice_SHA256_Update>
    Dice_SHA256_Final(&ctx->hashCtx, digest);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6839      	ldr	r1, [r7, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fa84 	bl	80036a0 <Dice_SHA256_Final>
    return;
 8003198:	bf00      	nop
}
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <Dice_SHA256_Init>:
 */
//static const char *sha2_hex_digits = "0123456789abcdef";

/*** SHA-256: *********************************************************/
void Dice_SHA256_Init(DICE_SHA256_CONTEXT *context)
{
 80031a0:	b490      	push	{r4, r7}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
    if (context == (DICE_SHA256_CONTEXT *)0) {
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d02d      	beq.n	800320a <Dice_SHA256_Init+0x6a>
        return;
    }
    context->magic = HASH_MAGIC_VALUE;
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	a41a      	add	r4, pc, #104	; (adr r4, 800321c <Dice_SHA256_Init+0x7c>)
 80031b2:	cc18      	ldmia	r4, {r3, r4}
 80031b4:	e9c2 3408 	strd	r3, r4, [r2, #32]
    MEMCPY_BCOPY(context->state, sha256_initial_hash_value, SHA256_DIGEST_LENGTH);
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	e00a      	b.n	80031d4 <Dice_SHA256_Init+0x34>
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4413      	add	r3, r2
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4914      	ldr	r1, [pc, #80]	; (8003218 <Dice_SHA256_Init+0x78>)
 80031c8:	440a      	add	r2, r1
 80031ca:	7812      	ldrb	r2, [r2, #0]
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	3301      	adds	r3, #1
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2b1f      	cmp	r3, #31
 80031d8:	d9f1      	bls.n	80031be <Dice_SHA256_Init+0x1e>
    MEMSET_BZERO(context->buffer, 0x00, SHA256_BLOCK_LENGTH);
 80031da:	2300      	movs	r3, #0
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	e009      	b.n	80031f4 <Dice_SHA256_Init+0x54>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	4413      	add	r3, r2
 80031ea:	2200      	movs	r2, #0
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	3301      	adds	r3, #1
 80031f2:	60bb      	str	r3, [r7, #8]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b3f      	cmp	r3, #63	; 0x3f
 80031f8:	d9f2      	bls.n	80031e0 <Dice_SHA256_Init+0x40>
    context->bitcount = 0;
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	f04f 0300 	mov.w	r3, #0
 8003200:	f04f 0400 	mov.w	r4, #0
 8003204:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8003208:	e000      	b.n	800320c <Dice_SHA256_Init+0x6c>
        return;
 800320a:	bf00      	nop
}
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bc90      	pop	{r4, r7}
 8003212:	4770      	bx	lr
 8003214:	f3af 8000 	nop.w
 8003218:	08003dbc 	.word	0x08003dbc
 800321c:	68736168 	.word	0x68736168
 8003220:	40787463 	.word	0x40787463

08003224 <SHA256_Transform>:

static void SHA256_Transform(DICE_SHA256_CONTEXT *context, const sha2_word32 *data)
{
 8003224:	b490      	push	{r4, r7}
 8003226:	b092      	sub	sp, #72	; 0x48
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
    sha2_word32 a, b, c, d, e, f, g, h, s0, s1;
    sha2_word32 T1, T2, *W256;
    int     j;

    W256 = (sha2_word32 *)context->buffer;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3330      	adds	r3, #48	; 0x30
 8003232:	623b      	str	r3, [r7, #32]

    /* Initialize registers with the prev. intermediate value */
    a = context->state[0];
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	647b      	str	r3, [r7, #68]	; 0x44
    b = context->state[1];
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	643b      	str	r3, [r7, #64]	; 0x40
    c = context->state[2];
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	63fb      	str	r3, [r7, #60]	; 0x3c
    d = context->state[3];
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	63bb      	str	r3, [r7, #56]	; 0x38
    e = context->state[4];
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	637b      	str	r3, [r7, #52]	; 0x34
    f = context->state[5];
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	633b      	str	r3, [r7, #48]	; 0x30
    g = context->state[6];
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	62fb      	str	r3, [r7, #44]	; 0x2c
    h = context->state[7];
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	62bb      	str	r3, [r7, #40]	; 0x28

    j = 0;
 8003264:	2300      	movs	r3, #0
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
    do {
#if BYTE_ORDER == LITTLE_ENDIAN
        /* Copy data while converting to host uint8_t order */
        REVERSE32(*data++,W256[j]);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	1d1a      	adds	r2, r3, #4
 800326c:	603a      	str	r2, [r7, #0]
 800326e:	61fb      	str	r3, [r7, #28]
 8003270:	2300      	movs	r3, #0
 8003272:	61bb      	str	r3, [r7, #24]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	61fa      	str	r2, [r7, #28]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	021a      	lsls	r2, r3, #8
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	1c59      	adds	r1, r3, #1
 8003286:	61f9      	str	r1, [r7, #28]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	021a      	lsls	r2, r3, #8
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	1c59      	adds	r1, r3, #1
 8003296:	61f9      	str	r1, [r7, #28]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	021a      	lsls	r2, r3, #8
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	1c59      	adds	r1, r3, #1
 80032a6:	61f9      	str	r1, [r7, #28]
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	6a3a      	ldr	r2, [r7, #32]
 80032b4:	4413      	add	r3, r2
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	601a      	str	r2, [r3, #0]
        /* Apply the SHA-256 compression function to update a..h */
        T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + W256[j];
 80032ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032bc:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80032c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c2:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80032c6:	405a      	eors	r2, r3
 80032c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ca:	ea4f 6373 	mov.w	r3, r3, ror #25
 80032ce:	405a      	eors	r2, r3
 80032d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d2:	441a      	add	r2, r3
 80032d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80032d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d8:	4019      	ands	r1, r3
 80032da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032dc:	43d8      	mvns	r0, r3
 80032de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e0:	4003      	ands	r3, r0
 80032e2:	404b      	eors	r3, r1
 80032e4:	441a      	add	r2, r3
 80032e6:	498d      	ldr	r1, [pc, #564]	; (800351c <SHA256_Transform+0x2f8>)
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032ee:	441a      	add	r2, r3
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	6a39      	ldr	r1, [r7, #32]
 80032f6:	440b      	add	r3, r1
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4413      	add	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]
#else /* BYTE_ORDER == LITTLE_ENDIAN */
        /* Apply the SHA-256 compression function to update a..h with copy */
        T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] + (W256[j] = *data++);
#endif /* BYTE_ORDER == LITTLE_ENDIAN */
        T2 = Sigma0_256(a) + Maj(a, b, c);
 80032fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003300:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8003304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003306:	ea4f 3373 	mov.w	r3, r3, ror #13
 800330a:	405a      	eors	r2, r3
 800330c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800330e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003312:	405a      	eors	r2, r3
 8003314:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003318:	4019      	ands	r1, r3
 800331a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800331c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800331e:	4003      	ands	r3, r0
 8003320:	4059      	eors	r1, r3
 8003322:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003326:	4003      	ands	r3, r0
 8003328:	404b      	eors	r3, r1
 800332a:	4413      	add	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
        h = g;
 800332e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003330:	62bb      	str	r3, [r7, #40]	; 0x28
        g = f;
 8003332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003334:	62fb      	str	r3, [r7, #44]	; 0x2c
        f = e;
 8003336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003338:	633b      	str	r3, [r7, #48]	; 0x30
        e = d + T1;
 800333a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	4413      	add	r3, r2
 8003340:	637b      	str	r3, [r7, #52]	; 0x34
        d = c;
 8003342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003344:	63bb      	str	r3, [r7, #56]	; 0x38
        c = b;
 8003346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003348:	63fb      	str	r3, [r7, #60]	; 0x3c
        b = a;
 800334a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800334c:	643b      	str	r3, [r7, #64]	; 0x40
        a = T1 + T2;
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	4413      	add	r3, r2
 8003354:	647b      	str	r3, [r7, #68]	; 0x44

        j++;
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	3301      	adds	r3, #1
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
    } while (j < 16);
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	2b0f      	cmp	r3, #15
 8003360:	dd82      	ble.n	8003268 <SHA256_Transform+0x44>

    do {
        /* Part of the message block expansion: */
        s0 = W256[(j+1)&0x0f];
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	3301      	adds	r3, #1
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	6a3a      	ldr	r2, [r7, #32]
 800336e:	4413      	add	r3, r2
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]
        s0 = sigma0_256(s0);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	ea4f 12f3 	mov.w	r2, r3, ror #7
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8003380:	405a      	eors	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	08db      	lsrs	r3, r3, #3
 8003386:	4053      	eors	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]
        s1 = W256[(j+14)&0x0f];
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	330e      	adds	r3, #14
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	6a3a      	ldr	r2, [r7, #32]
 8003396:	4413      	add	r3, r2
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	60bb      	str	r3, [r7, #8]
        s1 = sigma1_256(s1);
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	ea4f 4273 	mov.w	r2, r3, ror #17
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80033a8:	405a      	eors	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	0a9b      	lsrs	r3, r3, #10
 80033ae:	4053      	eors	r3, r2
 80033b0:	60bb      	str	r3, [r7, #8]

        /* Apply the SHA-256 compression function to update a..h */
        T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] +
 80033b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b4:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80033b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ba:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80033be:	405a      	eors	r2, r3
 80033c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c2:	ea4f 6373 	mov.w	r3, r3, ror #25
 80033c6:	405a      	eors	r2, r3
 80033c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ca:	441a      	add	r2, r3
 80033cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d0:	4019      	ands	r1, r3
 80033d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d4:	43d8      	mvns	r0, r3
 80033d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d8:	4003      	ands	r3, r0
 80033da:	404b      	eors	r3, r1
 80033dc:	441a      	add	r2, r3
 80033de:	494f      	ldr	r1, [pc, #316]	; (800351c <SHA256_Transform+0x2f8>)
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033e6:	441a      	add	r2, r3
             (W256[j&0x0f] += s1 + W256[(j+9)&0x0f] + s0);
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	6a39      	ldr	r1, [r7, #32]
 80033f2:	440b      	add	r3, r1
 80033f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033f6:	f001 010f 	and.w	r1, r1, #15
 80033fa:	0089      	lsls	r1, r1, #2
 80033fc:	6a38      	ldr	r0, [r7, #32]
 80033fe:	4401      	add	r1, r0
 8003400:	6808      	ldr	r0, [r1, #0]
 8003402:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003404:	3109      	adds	r1, #9
 8003406:	f001 010f 	and.w	r1, r1, #15
 800340a:	0089      	lsls	r1, r1, #2
 800340c:	6a3c      	ldr	r4, [r7, #32]
 800340e:	4421      	add	r1, r4
 8003410:	680c      	ldr	r4, [r1, #0]
 8003412:	68b9      	ldr	r1, [r7, #8]
 8003414:	440c      	add	r4, r1
 8003416:	68f9      	ldr	r1, [r7, #12]
 8003418:	4421      	add	r1, r4
 800341a:	4401      	add	r1, r0
 800341c:	6019      	str	r1, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
        T1 = h + Sigma1_256(e) + Ch(e, f, g) + K256[j] +
 8003420:	4413      	add	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
        T2 = Sigma0_256(a) + Maj(a, b, c);
 8003424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003426:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800342a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800342c:	ea4f 3373 	mov.w	r3, r3, ror #13
 8003430:	405a      	eors	r2, r3
 8003432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003434:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8003438:	405a      	eors	r2, r3
 800343a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800343c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800343e:	4019      	ands	r1, r3
 8003440:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003444:	4003      	ands	r3, r0
 8003446:	4059      	eors	r1, r3
 8003448:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800344a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800344c:	4003      	ands	r3, r0
 800344e:	404b      	eors	r3, r1
 8003450:	4413      	add	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
        h = g;
 8003454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003456:	62bb      	str	r3, [r7, #40]	; 0x28
        g = f;
 8003458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345a:	62fb      	str	r3, [r7, #44]	; 0x2c
        f = e;
 800345c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345e:	633b      	str	r3, [r7, #48]	; 0x30
        e = d + T1;
 8003460:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	4413      	add	r3, r2
 8003466:	637b      	str	r3, [r7, #52]	; 0x34
        d = c;
 8003468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800346a:	63bb      	str	r3, [r7, #56]	; 0x38
        c = b;
 800346c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800346e:	63fb      	str	r3, [r7, #60]	; 0x3c
        b = a;
 8003470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003472:	643b      	str	r3, [r7, #64]	; 0x40
        a = T1 + T2;
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4413      	add	r3, r2
 800347a:	647b      	str	r3, [r7, #68]	; 0x44

        j++;
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	3301      	adds	r3, #1
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
    } while (j < 64);
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	2b3f      	cmp	r3, #63	; 0x3f
 8003486:	f77f af6c 	ble.w	8003362 <SHA256_Transform+0x13e>

    /* Compute the current intermediate hash value */
    context->state[0] += a;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003490:	441a      	add	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	601a      	str	r2, [r3, #0]
    context->state[1] += b;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800349c:	441a      	add	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	605a      	str	r2, [r3, #4]
    context->state[2] += c;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034a8:	441a      	add	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	609a      	str	r2, [r3, #8]
    context->state[3] += d;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b4:	441a      	add	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	60da      	str	r2, [r3, #12]
    context->state[4] += e;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691a      	ldr	r2, [r3, #16]
 80034be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c0:	441a      	add	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	611a      	str	r2, [r3, #16]
    context->state[5] += f;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	441a      	add	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	615a      	str	r2, [r3, #20]
    context->state[6] += g;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699a      	ldr	r2, [r3, #24]
 80034d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d8:	441a      	add	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	619a      	str	r2, [r3, #24]
    context->state[7] += h;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69da      	ldr	r2, [r3, #28]
 80034e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e4:	441a      	add	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	61da      	str	r2, [r3, #28]

    /* Clean up */
    a = b = c = d = e = f = g = h = T1 = T2 = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	617b      	str	r3, [r7, #20]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fc:	633b      	str	r3, [r7, #48]	; 0x30
 80034fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003500:	637b      	str	r3, [r7, #52]	; 0x34
 8003502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003504:	63bb      	str	r3, [r7, #56]	; 0x38
 8003506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003508:	63fb      	str	r3, [r7, #60]	; 0x3c
 800350a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800350c:	643b      	str	r3, [r7, #64]	; 0x40
 800350e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003510:	647b      	str	r3, [r7, #68]	; 0x44
}
 8003512:	bf00      	nop
 8003514:	3748      	adds	r7, #72	; 0x48
 8003516:	46bd      	mov	sp, r7
 8003518:	bc90      	pop	{r4, r7}
 800351a:	4770      	bx	lr
 800351c:	08003cbc 	.word	0x08003cbc

08003520 <Dice_SHA256_Update>:

void Dice_SHA256_Update(DICE_SHA256_CONTEXT *context, const sha2_uint8_t *data, size_t len)
{
 8003520:	b590      	push	{r4, r7, lr}
 8003522:	b08b      	sub	sp, #44	; 0x2c
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
    unsigned int    freespace, usedspace;

    if (len == 0) {
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	2a00      	cmp	r2, #0
 8003530:	f000 80af 	beq.w	8003692 <Dice_SHA256_Update+0x172>

    /* Sanity check: */
    assert(context != (DICE_SHA256_CONTEXT *)0 && data != (sha2_uint8_t *)0 && context->magic == HASH_MAGIC_VALUE);

//    usedspace = (context->bitcount >> 3) % SHA256_BLOCK_LENGTH; // LordOfDorks: STM32L082KZ really doesn't like this behind the firewall
    usedspace = (unsigned int)(context->bitcount >> 3);
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	e9d2 120a 	ldrd	r1, r2, [r2, #40]	; 0x28
 800353a:	08cb      	lsrs	r3, r1, #3
 800353c:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
 8003540:	08d4      	lsrs	r4, r2, #3
 8003542:	61bb      	str	r3, [r7, #24]
    usedspace %= SHA256_BLOCK_LENGTH;
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800354a:	61bb      	str	r3, [r7, #24]
    if (usedspace > 0) {
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d073      	beq.n	800363a <Dice_SHA256_Update+0x11a>
        /* Calculate how much free space is available in the buffer */
        freespace = SHA256_BLOCK_LENGTH - usedspace;
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003558:	617b      	str	r3, [r7, #20]

        if (len >= freespace) {
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	429a      	cmp	r2, r3
 8003560:	d330      	bcc.n	80035c4 <Dice_SHA256_Update+0xa4>
            /* Fill the buffer completely and process it */
            MEMCPY_BCOPY(&context->buffer[usedspace], data, freespace);
 8003562:	2300      	movs	r3, #0
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
 8003566:	e00d      	b.n	8003584 <Dice_SHA256_Update+0x64>
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	3330      	adds	r3, #48	; 0x30
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	441a      	add	r2, r3
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	4413      	add	r3, r2
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003578:	440a      	add	r2, r1
 800357a:	7812      	ldrb	r2, [r2, #0]
 800357c:	701a      	strb	r2, [r3, #0]
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	3301      	adds	r3, #1
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
 8003584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	429a      	cmp	r2, r3
 800358a:	d3ed      	bcc.n	8003568 <Dice_SHA256_Update+0x48>
            context->bitcount += freespace << 3;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	f04f 0400 	mov.w	r4, #0
 800359a:	185b      	adds	r3, r3, r1
 800359c:	eb44 0402 	adc.w	r4, r4, r2
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
            len -= freespace;
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	607b      	str	r3, [r7, #4]
            data += freespace;
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	4413      	add	r3, r2
 80035b4:	60bb      	str	r3, [r7, #8]
            SHA256_Transform(context, (sha2_word32 *)context->buffer);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3330      	adds	r3, #48	; 0x30
 80035ba:	4619      	mov	r1, r3
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f7ff fe31 	bl	8003224 <SHA256_Transform>
 80035c2:	e03a      	b.n	800363a <Dice_SHA256_Update+0x11a>
        } else {
            /* The buffer is not yet full */
            MEMCPY_BCOPY(&context->buffer[usedspace], data, len);
 80035c4:	2300      	movs	r3, #0
 80035c6:	623b      	str	r3, [r7, #32]
 80035c8:	e00d      	b.n	80035e6 <Dice_SHA256_Update+0xc6>
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	3330      	adds	r3, #48	; 0x30
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	441a      	add	r2, r3
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	4413      	add	r3, r2
 80035d6:	68b9      	ldr	r1, [r7, #8]
 80035d8:	6a3a      	ldr	r2, [r7, #32]
 80035da:	440a      	add	r2, r1
 80035dc:	7812      	ldrb	r2, [r2, #0]
 80035de:	701a      	strb	r2, [r3, #0]
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	3301      	adds	r3, #1
 80035e4:	623b      	str	r3, [r7, #32]
 80035e6:	6a3a      	ldr	r2, [r7, #32]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d3ed      	bcc.n	80035ca <Dice_SHA256_Update+0xaa>
            context->bitcount += len << 3;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	f04f 0400 	mov.w	r4, #0
 80035fc:	185b      	adds	r3, r3, r1
 80035fe:	eb44 0402 	adc.w	r4, r4, r2
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
            /* Clean up: */
            usedspace = freespace = 0;
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	61bb      	str	r3, [r7, #24]
            return;
 8003610:	e040      	b.n	8003694 <Dice_SHA256_Update+0x174>
        }
    }
    while (len >= SHA256_BLOCK_LENGTH) {
        /* Process as many complete blocks as we can */
        SHA256_Transform(context, (sha2_word32 *)data);
 8003612:	68b9      	ldr	r1, [r7, #8]
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f7ff fe05 	bl	8003224 <SHA256_Transform>
        context->bitcount += SHA256_BLOCK_LENGTH << 3;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8003620:	f513 7300 	adds.w	r3, r3, #512	; 0x200
 8003624:	f144 0400 	adc.w	r4, r4, #0
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
        len -= SHA256_BLOCK_LENGTH;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3b40      	subs	r3, #64	; 0x40
 8003632:	607b      	str	r3, [r7, #4]
        data += SHA256_BLOCK_LENGTH;
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	3340      	adds	r3, #64	; 0x40
 8003638:	60bb      	str	r3, [r7, #8]
    while (len >= SHA256_BLOCK_LENGTH) {
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b3f      	cmp	r3, #63	; 0x3f
 800363e:	d8e8      	bhi.n	8003612 <Dice_SHA256_Update+0xf2>
    }
    if (len > 0) {
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d020      	beq.n	8003688 <Dice_SHA256_Update+0x168>
        /* There's left-overs, so save 'em */
        MEMCPY_BCOPY(context->buffer, data, len);
 8003646:	2300      	movs	r3, #0
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	e00c      	b.n	8003666 <Dice_SHA256_Update+0x146>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	4413      	add	r3, r2
 8003656:	68b9      	ldr	r1, [r7, #8]
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	440a      	add	r2, r1
 800365c:	7812      	ldrb	r2, [r2, #0]
 800365e:	701a      	strb	r2, [r3, #0]
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	3301      	adds	r3, #1
 8003664:	61fb      	str	r3, [r7, #28]
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	429a      	cmp	r2, r3
 800366c:	d3ee      	bcc.n	800364c <Dice_SHA256_Update+0x12c>
        context->bitcount += len << 3;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	e9d3 120a 	ldrd	r1, r2, [r3, #40]	; 0x28
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	f04f 0400 	mov.w	r4, #0
 800367c:	185b      	adds	r3, r3, r1
 800367e:	eb44 0402 	adc.w	r4, r4, r2
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    }
    /* Clean up: */
    usedspace = freespace = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	61bb      	str	r3, [r7, #24]
 8003690:	e000      	b.n	8003694 <Dice_SHA256_Update+0x174>
        return;
 8003692:	bf00      	nop
}
 8003694:	372c      	adds	r7, #44	; 0x2c
 8003696:	46bd      	mov	sp, r7
 8003698:	bd90      	pop	{r4, r7, pc}
 800369a:	0000      	movs	r0, r0
 800369c:	0000      	movs	r0, r0
	...

080036a0 <Dice_SHA256_Final>:

void Dice_SHA256_Final(DICE_SHA256_CONTEXT *context, sha2_uint8_t *digest)
{
 80036a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a4:	b095      	sub	sp, #84	; 0x54
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	61f8      	str	r0, [r7, #28]
 80036aa:	61b9      	str	r1, [r7, #24]
    sha2_word32 *d = (sha2_word32 *)digest;
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Sanity check: */
    assert(context != (DICE_SHA256_CONTEXT *)0 && context->magic == HASH_MAGIC_VALUE);

    /* If no digest buffer is passed, we don't bother doing this: */
    if (digest != (sha2_uint8_t *)0) {
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 8118 	beq.w	80038e8 <Dice_SHA256_Final+0x248>
//        usedspace = (context->bitcount >> 3) % SHA256_BLOCK_LENGTH; // LordOfDorks: STM32L082KZ really doesn't like this behind the firewall
        usedspace = (unsigned int)(context->bitcount >> 3);
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80036be:	08da      	lsrs	r2, r3, #3
 80036c0:	613a      	str	r2, [r7, #16]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	ea42 7244 	orr.w	r2, r2, r4, lsl #29
 80036c8:	613a      	str	r2, [r7, #16]
 80036ca:	08e3      	lsrs	r3, r4, #3
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	633b      	str	r3, [r7, #48]	; 0x30
        usedspace %= SHA256_BLOCK_LENGTH;
 80036d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036d8:	633b      	str	r3, [r7, #48]	; 0x30
#if BYTE_ORDER == LITTLE_ENDIAN
        /* Convert FROM host uint8_t order */
        REVERSE64(context->bitcount,context->bitcount);
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80036e0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 80036e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ea:	607b      	str	r3, [r7, #4]
 80036ec:	e897 0018 	ldmia.w	r7, {r3, r4}
 80036f0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 80036f4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80036f8:	0a1a      	lsrs	r2, r3, #8
 80036fa:	60ba      	str	r2, [r7, #8]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8003702:	60ba      	str	r2, [r7, #8]
 8003704:	0a23      	lsrs	r3, r4, #8
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 800370c:	f04f 14ff 	mov.w	r4, #16711935	; 0xff00ff
 8003710:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003714:	ea01 0103 	and.w	r1, r1, r3
 8003718:	ea02 0204 	and.w	r2, r2, r4
 800371c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003720:	ea4f 2b04 	mov.w	fp, r4, lsl #8
 8003724:	ea4b 6b13 	orr.w	fp, fp, r3, lsr #24
 8003728:	ea4f 2a03 	mov.w	sl, r3, lsl #8
 800372c:	f04f 23ff 	mov.w	r3, #4278255360	; 0xff00ff00
 8003730:	f04f 24ff 	mov.w	r4, #4278255360	; 0xff00ff00
 8003734:	ea03 030a 	and.w	r3, r3, sl
 8003738:	ea04 040b 	and.w	r4, r4, fp
 800373c:	ea43 0301 	orr.w	r3, r3, r1
 8003740:	ea44 0402 	orr.w	r4, r4, r2
 8003744:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8003748:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800374c:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8003750:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 8003754:	ea4f 4914 	mov.w	r9, r4, lsr #16
 8003758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800375c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003760:	ea08 0103 	and.w	r1, r8, r3
 8003764:	ea09 0204 	and.w	r2, r9, r4
 8003768:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800376c:	0426      	lsls	r6, r4, #16
 800376e:	ea46 4613 	orr.w	r6, r6, r3, lsr #16
 8003772:	041d      	lsls	r5, r3, #16
 8003774:	a468      	add	r4, pc, #416	; (adr r4, 8003918 <Dice_SHA256_Final+0x278>)
 8003776:	cc18      	ldmia	r4, {r3, r4}
 8003778:	ea03 0305 	and.w	r3, r3, r5
 800377c:	ea04 0406 	and.w	r4, r4, r6
 8003780:	ea43 0301 	orr.w	r3, r3, r1
 8003784:	ea44 0402 	orr.w	r4, r4, r2
 8003788:	69fa      	ldr	r2, [r7, #28]
 800378a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
#endif
        if (usedspace > 0) {
 800378e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003790:	2b00      	cmp	r3, #0
 8003792:	d04d      	beq.n	8003830 <Dice_SHA256_Final+0x190>
            /* Begin padding with a 1 bit: */
            context->buffer[usedspace++] = 0x80;
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	633a      	str	r2, [r7, #48]	; 0x30
 800379a:	69fa      	ldr	r2, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	2280      	movs	r2, #128	; 0x80
 80037a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

            if (usedspace <= SHA256_SHORT_BLOCK_LENGTH) {
 80037a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a6:	2b38      	cmp	r3, #56	; 0x38
 80037a8:	d814      	bhi.n	80037d4 <Dice_SHA256_Final+0x134>
                /* Set-up for the last transform: */
                MEMSET_BZERO(&context->buffer[usedspace], 0x00, SHA256_SHORT_BLOCK_LENGTH - usedspace);
 80037aa:	2300      	movs	r3, #0
 80037ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80037ae:	e00a      	b.n	80037c6 <Dice_SHA256_Final+0x126>
 80037b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b2:	3330      	adds	r3, #48	; 0x30
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	441a      	add	r2, r3
 80037b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ba:	4413      	add	r3, r2
 80037bc:	2200      	movs	r2, #0
 80037be:	701a      	strb	r2, [r3, #0]
 80037c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037c2:	3301      	adds	r3, #1
 80037c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80037cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d8ee      	bhi.n	80037b0 <Dice_SHA256_Final+0x110>
 80037d2:	e041      	b.n	8003858 <Dice_SHA256_Final+0x1b8>
            } else {
                if (usedspace < SHA256_BLOCK_LENGTH) {
 80037d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d6:	2b3f      	cmp	r3, #63	; 0x3f
 80037d8:	d813      	bhi.n	8003802 <Dice_SHA256_Final+0x162>
                    MEMSET_BZERO(&context->buffer[usedspace], 0x00, SHA256_BLOCK_LENGTH - usedspace);
 80037da:	2300      	movs	r3, #0
 80037dc:	647b      	str	r3, [r7, #68]	; 0x44
 80037de:	e00a      	b.n	80037f6 <Dice_SHA256_Final+0x156>
 80037e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e2:	3330      	adds	r3, #48	; 0x30
 80037e4:	69fa      	ldr	r2, [r7, #28]
 80037e6:	441a      	add	r2, r3
 80037e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ea:	4413      	add	r3, r2
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037f2:	3301      	adds	r3, #1
 80037f4:	647b      	str	r3, [r7, #68]	; 0x44
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 80037fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037fe:	429a      	cmp	r2, r3
 8003800:	d8ee      	bhi.n	80037e0 <Dice_SHA256_Final+0x140>
                }
                /* Do second-to-last transform: */
                SHA256_Transform(context, (sha2_word32 *)context->buffer);
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	3330      	adds	r3, #48	; 0x30
 8003806:	4619      	mov	r1, r3
 8003808:	69f8      	ldr	r0, [r7, #28]
 800380a:	f7ff fd0b 	bl	8003224 <SHA256_Transform>

                /* And set-up for the last transform: */
                MEMSET_BZERO(context->buffer, 0x00, SHA256_SHORT_BLOCK_LENGTH);
 800380e:	2300      	movs	r3, #0
 8003810:	643b      	str	r3, [r7, #64]	; 0x40
 8003812:	e009      	b.n	8003828 <Dice_SHA256_Final+0x188>
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800381a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800381c:	4413      	add	r3, r2
 800381e:	2200      	movs	r2, #0
 8003820:	701a      	strb	r2, [r3, #0]
 8003822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003824:	3301      	adds	r3, #1
 8003826:	643b      	str	r3, [r7, #64]	; 0x40
 8003828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800382a:	2b37      	cmp	r3, #55	; 0x37
 800382c:	d9f2      	bls.n	8003814 <Dice_SHA256_Final+0x174>
 800382e:	e013      	b.n	8003858 <Dice_SHA256_Final+0x1b8>
            }
        } else {
            /* Set-up for the last transform: */
            MEMSET_BZERO(context->buffer, 0x00, SHA256_SHORT_BLOCK_LENGTH);
 8003830:	2300      	movs	r3, #0
 8003832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003834:	e009      	b.n	800384a <Dice_SHA256_Final+0x1aa>
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800383c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800383e:	4413      	add	r3, r2
 8003840:	2200      	movs	r2, #0
 8003842:	701a      	strb	r2, [r3, #0]
 8003844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003846:	3301      	adds	r3, #1
 8003848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800384a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800384c:	2b37      	cmp	r3, #55	; 0x37
 800384e:	d9f2      	bls.n	8003836 <Dice_SHA256_Final+0x196>

            /* Begin padding with a 1 bit: */
            *context->buffer = 0x80;
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	2280      	movs	r2, #128	; 0x80
 8003854:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        }
        /* Set the bit count: */
        *(sha2_word64 *)&context->buffer[SHA256_SHORT_BLOCK_LENGTH] = context->bitcount;
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8003864:	e882 0018 	stmia.w	r2, {r3, r4}

        /* Final transform: */
        SHA256_Transform(context, (sha2_word32 *)context->buffer);
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	3330      	adds	r3, #48	; 0x30
 800386c:	4619      	mov	r1, r3
 800386e:	69f8      	ldr	r0, [r7, #28]
 8003870:	f7ff fcd8 	bl	8003224 <SHA256_Transform>

#if BYTE_ORDER == LITTLE_ENDIAN
        {
            /* Convert TO host uint8_t order */
            int j;
            for (j = 0; j < 8; j++) {
 8003874:	2300      	movs	r3, #0
 8003876:	63bb      	str	r3, [r7, #56]	; 0x38
 8003878:	e033      	b.n	80038e2 <Dice_SHA256_Final+0x242>
                REVERSE32(context->state[j],context->state[j]);
 800387a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	4413      	add	r3, r2
 8003882:	627b      	str	r3, [r7, #36]	; 0x24
 8003884:	2300      	movs	r3, #0
 8003886:	623b      	str	r3, [r7, #32]
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	627a      	str	r2, [r7, #36]	; 0x24
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	623b      	str	r3, [r7, #32]
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	021a      	lsls	r2, r3, #8
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	1c59      	adds	r1, r3, #1
 800389a:	6279      	str	r1, [r7, #36]	; 0x24
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	4313      	orrs	r3, r2
 80038a0:	623b      	str	r3, [r7, #32]
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	021a      	lsls	r2, r3, #8
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	1c59      	adds	r1, r3, #1
 80038aa:	6279      	str	r1, [r7, #36]	; 0x24
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	623b      	str	r3, [r7, #32]
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	021a      	lsls	r2, r3, #8
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	1c59      	adds	r1, r3, #1
 80038ba:	6279      	str	r1, [r7, #36]	; 0x24
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	4313      	orrs	r3, r2
 80038c0:	623b      	str	r3, [r7, #32]
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038c6:	6a39      	ldr	r1, [r7, #32]
 80038c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                *d++ = context->state[j];
 80038cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ce:	1d1a      	adds	r2, r3, #4
 80038d0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80038d2:	69fa      	ldr	r2, [r7, #28]
 80038d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038d6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80038da:	601a      	str	r2, [r3, #0]
            for (j = 0; j < 8; j++) {
 80038dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038de:	3301      	adds	r3, #1
 80038e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80038e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e4:	2b07      	cmp	r3, #7
 80038e6:	ddc8      	ble.n	800387a <Dice_SHA256_Final+0x1da>
        MEMCPY_BCOPY(d, context->state, SHA256_DIGEST_LENGTH);
#endif
    }

    /* Clean up state data: */
    MEMSET_BZERO(context, 0x00, sizeof(DICE_SHA256_CONTEXT));
 80038e8:	2300      	movs	r3, #0
 80038ea:	637b      	str	r3, [r7, #52]	; 0x34
 80038ec:	e007      	b.n	80038fe <Dice_SHA256_Final+0x25e>
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f2:	4413      	add	r3, r2
 80038f4:	2200      	movs	r2, #0
 80038f6:	701a      	strb	r2, [r3, #0]
 80038f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fa:	3301      	adds	r3, #1
 80038fc:	637b      	str	r3, [r7, #52]	; 0x34
 80038fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003900:	2b6f      	cmp	r3, #111	; 0x6f
 8003902:	d9f4      	bls.n	80038ee <Dice_SHA256_Final+0x24e>
    usedspace = 0;
 8003904:	2300      	movs	r3, #0
 8003906:	633b      	str	r3, [r7, #48]	; 0x30
}
 8003908:	bf00      	nop
 800390a:	3754      	adds	r7, #84	; 0x54
 800390c:	46bd      	mov	sp, r7
 800390e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003912:	bf00      	nop
 8003914:	f3af 8000 	nop.w
 8003918:	ffff0000 	.word	0xffff0000
 800391c:	ffff0000 	.word	0xffff0000

08003920 <Dice_SHA256_Block_ctx>:

void Dice_SHA256_Block_ctx(DICE_SHA256_CONTEXT *context, const uint8_t *buf, size_t bufSize, uint8_t *digest)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
    Dice_SHA256_Init(context);
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f7ff fc36 	bl	80031a0 <Dice_SHA256_Init>
    Dice_SHA256_Update(context, buf, bufSize);
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f7ff fdf1 	bl	8003520 <Dice_SHA256_Update>
    Dice_SHA256_Final(context, digest);
 800393e:	6839      	ldr	r1, [r7, #0]
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f7ff fead 	bl	80036a0 <Dice_SHA256_Final>
}
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <GetRandom>:
#include "DiceSha256.h"

extern DICE_HAL DiceHAL;

DICE_RC GetRandom(unsigned char* entropy, unsigned int size)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
    uint32_t entropyWord;
    if(DiceHAL.phRng == NULL) return DICE_RC_Hardware_Error;
 800395a:	4b18      	ldr	r3, [pc, #96]	; (80039bc <GetRandom+0x6c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <GetRandom+0x16>
 8003962:	2304      	movs	r3, #4
 8003964:	e026      	b.n	80039b4 <GetRandom+0x64>
    for(uint32_t n = 0; n < size; n += sizeof(entropyWord))
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	e01e      	b.n	80039aa <GetRandom+0x5a>
    {
        if(HAL_RNG_GenerateRandomNumber(DiceHAL.phRng, &entropyWord) != HAL_OK)
 800396c:	4b13      	ldr	r3, [pc, #76]	; (80039bc <GetRandom+0x6c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f107 0208 	add.w	r2, r7, #8
 8003974:	4611      	mov	r1, r2
 8003976:	4618      	mov	r0, r3
 8003978:	f7fe fe6f 	bl	800265a <HAL_RNG_GenerateRandomNumber>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <GetRandom+0x36>
        {
            return DICE_RC_Hardware_Error;
 8003982:	2304      	movs	r3, #4
 8003984:	e016      	b.n	80039b4 <GetRandom+0x64>
        }
        memcpy(&entropy[n], &entropyWord, MIN(sizeof(entropyWord), size - n));
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	18d0      	adds	r0, r2, r3
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b04      	cmp	r3, #4
 8003994:	bf28      	it	cs
 8003996:	2304      	movcs	r3, #4
 8003998:	461a      	mov	r2, r3
 800399a:	f107 0308 	add.w	r3, r7, #8
 800399e:	4619      	mov	r1, r3
 80039a0:	f000 f964 	bl	8003c6c <memcpy>
    for(uint32_t n = 0; n < size; n += sizeof(entropyWord))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	3304      	adds	r3, #4
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d3dc      	bcc.n	800396c <GetRandom+0x1c>
    }
    return DICE_RC_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20000020 	.word	0x20000020

080039c0 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 80039ca:	e7fe      	b.n	80039ca <_Error_Handler+0xa>

080039cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d2:	4a24      	ldr	r2, [pc, #144]	; (8003a64 <HAL_MspInit+0x98>)
 80039d4:	4b23      	ldr	r3, [pc, #140]	; (8003a64 <HAL_MspInit+0x98>)
 80039d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	6613      	str	r3, [r2, #96]	; 0x60
 80039de:	4b21      	ldr	r3, [pc, #132]	; (8003a64 <HAL_MspInit+0x98>)
 80039e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039ea:	4a1e      	ldr	r2, [pc, #120]	; (8003a64 <HAL_MspInit+0x98>)
 80039ec:	4b1d      	ldr	r3, [pc, #116]	; (8003a64 <HAL_MspInit+0x98>)
 80039ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f4:	6593      	str	r3, [r2, #88]	; 0x58
 80039f6:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <HAL_MspInit+0x98>)
 80039f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a02:	2003      	movs	r0, #3
 8003a04:	f7fc ffd4 	bl	80009b0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	f06f 000b 	mvn.w	r0, #11
 8003a10:	f7fc ffd9 	bl	80009c6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003a14:	2200      	movs	r2, #0
 8003a16:	2100      	movs	r1, #0
 8003a18:	f06f 000a 	mvn.w	r0, #10
 8003a1c:	f7fc ffd3 	bl	80009c6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003a20:	2200      	movs	r2, #0
 8003a22:	2100      	movs	r1, #0
 8003a24:	f06f 0009 	mvn.w	r0, #9
 8003a28:	f7fc ffcd 	bl	80009c6 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2100      	movs	r1, #0
 8003a30:	f06f 0004 	mvn.w	r0, #4
 8003a34:	f7fc ffc7 	bl	80009c6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	f06f 0003 	mvn.w	r0, #3
 8003a40:	f7fc ffc1 	bl	80009c6 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003a44:	2200      	movs	r2, #0
 8003a46:	2100      	movs	r1, #0
 8003a48:	f06f 0001 	mvn.w	r0, #1
 8003a4c:	f7fc ffbb 	bl	80009c6 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003a50:	2200      	movs	r2, #0
 8003a52:	2100      	movs	r1, #0
 8003a54:	f04f 30ff 	mov.w	r0, #4294967295
 8003a58:	f7fc ffb5 	bl	80009c6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a5c:	bf00      	nop
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40021000 	.word	0x40021000

08003a68 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]

  if(hrng->Instance==RNG)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a0a      	ldr	r2, [pc, #40]	; (8003aa0 <HAL_RNG_MspInit+0x38>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d10b      	bne.n	8003a92 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003a7a:	4a0a      	ldr	r2, [pc, #40]	; (8003aa4 <HAL_RNG_MspInit+0x3c>)
 8003a7c:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <HAL_RNG_MspInit+0x3c>)
 8003a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a86:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <HAL_RNG_MspInit+0x3c>)
 8003a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8003a92:	bf00      	nop
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	50060800 	.word	0x50060800
 8003aa4:	40021000 	.word	0x40021000

08003aa8 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a11      	ldr	r2, [pc, #68]	; (8003afc <HAL_UART_MspInit+0x54>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d11c      	bne.n	8003af4 <HAL_UART_MspInit+0x4c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003aba:	4a11      	ldr	r2, [pc, #68]	; (8003b00 <HAL_UART_MspInit+0x58>)
 8003abc:	4b10      	ldr	r3, [pc, #64]	; (8003b00 <HAL_UART_MspInit+0x58>)
 8003abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac4:	6593      	str	r3, [r2, #88]	; 0x58
 8003ac6:	4b0e      	ldr	r3, [pc, #56]	; (8003b00 <HAL_UART_MspInit+0x58>)
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003ad2:	230c      	movs	r3, #12
 8003ad4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ada:	2301      	movs	r3, #1
 8003adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ae2:	2307      	movs	r3, #7
 8003ae4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae6:	f107 030c 	add.w	r3, r7, #12
 8003aea:	4619      	mov	r1, r3
 8003aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003af0:	f7fc ffbc 	bl	8000a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003af4:	bf00      	nop
 8003af6:	3720      	adds	r7, #32
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40004400 	.word	0x40004400
 8003b00:	40021000 	.word	0x40021000

08003b04 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b08:	bf00      	nop
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003b12:	b480      	push	{r7}
 8003b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b16:	e7fe      	b.n	8003b16 <HardFault_Handler+0x4>

08003b18 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b1c:	e7fe      	b.n	8003b1c <MemManage_Handler+0x4>

08003b1e <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b22:	e7fe      	b.n	8003b22 <BusFault_Handler+0x4>

08003b24 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b28:	e7fe      	b.n	8003b28 <UsageFault_Handler+0x4>

08003b2a <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b2e:	bf00      	nop
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b3c:	bf00      	nop
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003b46:	b480      	push	{r7}
 8003b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b58:	f7fc fe60 	bl	800081c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003b5c:	f7fc ff78 	bl	8000a50 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b60:	bf00      	nop
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b68:	4a17      	ldr	r2, [pc, #92]	; (8003bc8 <SystemInit+0x64>)
 8003b6a:	4b17      	ldr	r3, [pc, #92]	; (8003bc8 <SystemInit+0x64>)
 8003b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003b78:	4a14      	ldr	r2, [pc, #80]	; (8003bcc <SystemInit+0x68>)
 8003b7a:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <SystemInit+0x68>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f043 0301 	orr.w	r3, r3, #1
 8003b82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003b84:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <SystemInit+0x68>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8003b8a:	4a10      	ldr	r2, [pc, #64]	; (8003bcc <SystemInit+0x68>)
 8003b8c:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <SystemInit+0x68>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003b94:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003b98:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <SystemInit+0x68>)
 8003b9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ba0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003ba2:	4a0a      	ldr	r2, [pc, #40]	; (8003bcc <SystemInit+0x68>)
 8003ba4:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <SystemInit+0x68>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003bae:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <SystemInit+0x68>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003bb4:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <SystemInit+0x64>)
 8003bb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003bba:	609a      	str	r2, [r3, #8]
#endif
}
 8003bbc:	bf00      	nop
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	e000ed00 	.word	0xe000ed00
 8003bcc:	40021000 	.word	0x40021000

08003bd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c08 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003bd4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003bd6:	e003      	b.n	8003be0 <LoopCopyDataInit>

08003bd8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003bd8:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003bda:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003bdc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003bde:	3104      	adds	r1, #4

08003be0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003be0:	480b      	ldr	r0, [pc, #44]	; (8003c10 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003be2:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003be4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003be6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003be8:	d3f6      	bcc.n	8003bd8 <CopyDataInit>
	ldr	r2, =_sbss
 8003bea:	4a0b      	ldr	r2, [pc, #44]	; (8003c18 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003bec:	e002      	b.n	8003bf4 <LoopFillZerobss>

08003bee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003bee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003bf0:	f842 3b04 	str.w	r3, [r2], #4

08003bf4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003bf4:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <LoopForever+0x16>)
	cmp	r2, r3
 8003bf6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003bf8:	d3f9      	bcc.n	8003bee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003bfa:	f7ff ffb3 	bl	8003b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bfe:	f000 f811 	bl	8003c24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c02:	f000 f97d 	bl	8003f00 <main>

08003c06 <LoopForever>:

LoopForever:
    b LoopForever
 8003c06:	e7fe      	b.n	8003c06 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003c08:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003c0c:	08003e34 	.word	0x08003e34
	ldr	r0, =_sdata
 8003c10:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003c14:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8003c18:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8003c1c:	20000434 	.word	0x20000434

08003c20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c20:	e7fe      	b.n	8003c20 <ADC1_2_IRQHandler>
	...

08003c24 <__libc_init_array>:
 8003c24:	b570      	push	{r4, r5, r6, lr}
 8003c26:	4e0d      	ldr	r6, [pc, #52]	; (8003c5c <__libc_init_array+0x38>)
 8003c28:	4c0d      	ldr	r4, [pc, #52]	; (8003c60 <__libc_init_array+0x3c>)
 8003c2a:	1ba4      	subs	r4, r4, r6
 8003c2c:	10a4      	asrs	r4, r4, #2
 8003c2e:	2500      	movs	r5, #0
 8003c30:	42a5      	cmp	r5, r4
 8003c32:	d109      	bne.n	8003c48 <__libc_init_array+0x24>
 8003c34:	4e0b      	ldr	r6, [pc, #44]	; (8003c64 <__libc_init_array+0x40>)
 8003c36:	4c0c      	ldr	r4, [pc, #48]	; (8003c68 <__libc_init_array+0x44>)
 8003c38:	f000 f82c 	bl	8003c94 <_init>
 8003c3c:	1ba4      	subs	r4, r4, r6
 8003c3e:	10a4      	asrs	r4, r4, #2
 8003c40:	2500      	movs	r5, #0
 8003c42:	42a5      	cmp	r5, r4
 8003c44:	d105      	bne.n	8003c52 <__libc_init_array+0x2e>
 8003c46:	bd70      	pop	{r4, r5, r6, pc}
 8003c48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c4c:	4798      	blx	r3
 8003c4e:	3501      	adds	r5, #1
 8003c50:	e7ee      	b.n	8003c30 <__libc_init_array+0xc>
 8003c52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c56:	4798      	blx	r3
 8003c58:	3501      	adds	r5, #1
 8003c5a:	e7f2      	b.n	8003c42 <__libc_init_array+0x1e>
 8003c5c:	08003e2c 	.word	0x08003e2c
 8003c60:	08003e2c 	.word	0x08003e2c
 8003c64:	08003e2c 	.word	0x08003e2c
 8003c68:	08003e30 	.word	0x08003e30

08003c6c <memcpy>:
 8003c6c:	b510      	push	{r4, lr}
 8003c6e:	1e43      	subs	r3, r0, #1
 8003c70:	440a      	add	r2, r1
 8003c72:	4291      	cmp	r1, r2
 8003c74:	d100      	bne.n	8003c78 <memcpy+0xc>
 8003c76:	bd10      	pop	{r4, pc}
 8003c78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c80:	e7f7      	b.n	8003c72 <memcpy+0x6>

08003c82 <memset>:
 8003c82:	4402      	add	r2, r0
 8003c84:	4603      	mov	r3, r0
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d100      	bne.n	8003c8c <memset+0xa>
 8003c8a:	4770      	bx	lr
 8003c8c:	f803 1b01 	strb.w	r1, [r3], #1
 8003c90:	e7f9      	b.n	8003c86 <memset+0x4>
	...

08003c94 <_init>:
 8003c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c96:	bf00      	nop
 8003c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c9a:	bc08      	pop	{r3}
 8003c9c:	469e      	mov	lr, r3
 8003c9e:	4770      	bx	lr

08003ca0 <_fini>:
 8003ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ca2:	bf00      	nop
 8003ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ca6:	bc08      	pop	{r3}
 8003ca8:	469e      	mov	lr, r3
 8003caa:	4770      	bx	lr

Disassembly of section .unittest:

08003e38 <main-0xc8>:
	...

08003f00 <main>:
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b0ac      	sub	sp, #176	; 0xb0
 8003f04:	af00      	add	r7, sp, #0
    unsigned int result = 0;
 8003f06:	2300      	movs	r3, #0
 8003f08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    DICE_Context ctx = {0};
 8003f0c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003f10:	2230      	movs	r2, #48	; 0x30
 8003f12:	2100      	movs	r1, #0
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff feb4 	bl	8003c82 <memset>
    uint8_t key[9] = {0};
 8003f1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	605a      	str	r2, [r3, #4]
 8003f24:	721a      	strb	r2, [r3, #8]
    uint8_t data[50] = {0};
 8003f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f2a:	2232      	movs	r2, #50	; 0x32
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff fea7 	bl	8003c82 <memset>
    uint8_t digest[32] = {0};
 8003f34:	1d3b      	adds	r3, r7, #4
 8003f36:	2220      	movs	r2, #32
 8003f38:	2100      	movs	r1, #0
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff fea1 	bl	8003c82 <memset>
  HAL_Init();
 8003f40:	f7fc fc42 	bl	80007c8 <HAL_Init>
  SystemClock_Config();
 8003f44:	f000 f8ca 	bl	80040dc <SystemClock_Config>
  MX_GPIO_Init();
 8003f48:	f000 f998 	bl	800427c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003f4c:	f000 f962 	bl	8004214 <MX_USART2_UART_Init>
  MX_RNG_Init();
 8003f50:	f000 f948 	bl	80041e4 <MX_RNG_Init>
  ctx.fid = DICE_FID_NOOP;
 8003f54:	2300      	movs	r3, #0
 8003f56:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  ctx.magic = DICE_MAGIC;
 8003f5a:	4b5c      	ldr	r3, [pc, #368]	; (80040cc <main+0x1cc>)
 8003f5c:	67fb      	str	r3, [r7, #124]	; 0x7c
  ctx.paramSize = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  result = FWCALLGATE(&ctx);
 8003f64:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003f68:	4b59      	ldr	r3, [pc, #356]	; (80040d0 <main+0x1d0>)
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	4798      	blx	r3
 8003f6e:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
  ctx.fid = DICE_FID_HalHandleTable;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  ctx.magic = DICE_MAGIC;
 8003f78:	4b54      	ldr	r3, [pc, #336]	; (80040cc <main+0x1cc>)
 8003f7a:	67fb      	str	r3, [r7, #124]	; 0x7c
  ctx.paramSize = sizeof(DICE_PARAM_HalHandleTable);
 8003f7c:	2308      	movs	r3, #8
 8003f7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  ctx.u.HalHandleTable.in.handleTable.phRng = &hrng;
 8003f82:	4b54      	ldr	r3, [pc, #336]	; (80040d4 <main+0x1d4>)
 8003f84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  ctx.u.HalHandleTable.in.handleTable.phUart = &huart2;
 8003f88:	4b53      	ldr	r3, [pc, #332]	; (80040d8 <main+0x1d8>)
 8003f8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  result = FWCALLGATE(&ctx);
 8003f8e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003f92:	4b4f      	ldr	r3, [pc, #316]	; (80040d0 <main+0x1d0>)
 8003f94:	4610      	mov	r0, r2
 8003f96:	4798      	blx	r3
 8003f98:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
  ctx.fid = DICE_FID_GetRandom;
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  ctx.magic = DICE_MAGIC;
 8003fa2:	4b4a      	ldr	r3, [pc, #296]	; (80040cc <main+0x1cc>)
 8003fa4:	67fb      	str	r3, [r7, #124]	; 0x7c
  ctx.paramSize = sizeof(DICE_PARAM_GetRandom);
 8003fa6:	2308      	movs	r3, #8
 8003fa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  ctx.u.GetRandom.in.entropy = data;
 8003fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  ctx.u.GetRandom.in.size = sizeof(data);
 8003fb4:	2332      	movs	r3, #50	; 0x32
 8003fb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  result = FWCALLGATE(&ctx);
 8003fba:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8003fbe:	4b44      	ldr	r3, [pc, #272]	; (80040d0 <main+0x1d0>)
 8003fc0:	4610      	mov	r0, r2
 8003fc2:	4798      	blx	r3
 8003fc4:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
  ctx.fid = DICE_FID_SHA256;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  ctx.magic = DICE_MAGIC;
 8003fce:	4b3f      	ldr	r3, [pc, #252]	; (80040cc <main+0x1cc>)
 8003fd0:	67fb      	str	r3, [r7, #124]	; 0x7c
  ctx.paramSize = sizeof(DICE_PARAM_SHA256);
 8003fd2:	2320      	movs	r3, #32
 8003fd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  ctx.u.SHA256.in.segments = 3;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  dataTab[0] = data;
 8003fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fe2:	667b      	str	r3, [r7, #100]	; 0x64
  sizeTab[0] = sizeof(data);
 8003fe4:	2332      	movs	r3, #50	; 0x32
 8003fe6:	673b      	str	r3, [r7, #112]	; 0x70
  dataTab[1] = data;
 8003fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fec:	66bb      	str	r3, [r7, #104]	; 0x68
  sizeTab[1] = sizeof(data);
 8003fee:	2332      	movs	r3, #50	; 0x32
 8003ff0:	677b      	str	r3, [r7, #116]	; 0x74
  dataTab[2] = data;
 8003ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ff6:	66fb      	str	r3, [r7, #108]	; 0x6c
  sizeTab[2] = sizeof(data);
 8003ff8:	2332      	movs	r3, #50	; 0x32
 8003ffa:	67bb      	str	r3, [r7, #120]	; 0x78
  ctx.u.SHA256.in.data = dataTab;
 8003ffc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004000:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ctx.u.SHA256.in.size = sizeTab;
 8004004:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004008:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  ctx.u.SHA256.in.digest = digest;
 800400c:	1d3b      	adds	r3, r7, #4
 800400e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  memset(digest, 0x00, sizeof(digest));
 8004012:	1d3b      	adds	r3, r7, #4
 8004014:	2220      	movs	r2, #32
 8004016:	2100      	movs	r1, #0
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff fe32 	bl	8003c82 <memset>
  result = FWCALLGATE(&ctx);
 800401e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8004022:	4b2b      	ldr	r3, [pc, #172]	; (80040d0 <main+0x1d0>)
 8004024:	4610      	mov	r0, r2
 8004026:	4798      	blx	r3
 8004028:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
  ctx.fid = DICE_FID_GetRandom;
 800402c:	2302      	movs	r3, #2
 800402e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  ctx.magic = DICE_MAGIC;
 8004032:	4b26      	ldr	r3, [pc, #152]	; (80040cc <main+0x1cc>)
 8004034:	67fb      	str	r3, [r7, #124]	; 0x7c
  ctx.paramSize = sizeof(DICE_PARAM_GetRandom);
 8004036:	2308      	movs	r3, #8
 8004038:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  ctx.u.GetRandom.in.entropy = key;
 800403c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004040:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  ctx.u.GetRandom.in.size = sizeof(key);
 8004044:	2309      	movs	r3, #9
 8004046:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  result = FWCALLGATE(&ctx);
 800404a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800404e:	4b20      	ldr	r3, [pc, #128]	; (80040d0 <main+0x1d0>)
 8004050:	4610      	mov	r0, r2
 8004052:	4798      	blx	r3
 8004054:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
  ctx.fid = DICE_FID_HMACSHA256;
 8004058:	2304      	movs	r3, #4
 800405a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  ctx.magic = DICE_MAGIC;
 800405e:	4b1b      	ldr	r3, [pc, #108]	; (80040cc <main+0x1cc>)
 8004060:	67fb      	str	r3, [r7, #124]	; 0x7c
  ctx.paramSize = sizeof(DICE_PARAM_HMACSHA256);
 8004062:	2320      	movs	r3, #32
 8004064:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  ctx.u.HMACSHA256.in.key = key;
 8004068:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800406c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  ctx.u.HMACSHA256.in.keySize = sizeof(key);
 8004070:	2309      	movs	r3, #9
 8004072:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ctx.u.HMACSHA256.in.segments = 3;
 8004076:	2303      	movs	r3, #3
 8004078:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  dataTab[0] = data;
 800407c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004080:	667b      	str	r3, [r7, #100]	; 0x64
  sizeTab[0] = sizeof(data);
 8004082:	2332      	movs	r3, #50	; 0x32
 8004084:	673b      	str	r3, [r7, #112]	; 0x70
  dataTab[1] = data;
 8004086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800408a:	66bb      	str	r3, [r7, #104]	; 0x68
  sizeTab[1] = sizeof(data);
 800408c:	2332      	movs	r3, #50	; 0x32
 800408e:	677b      	str	r3, [r7, #116]	; 0x74
  dataTab[2] = data;
 8004090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004094:	66fb      	str	r3, [r7, #108]	; 0x6c
  sizeTab[2] = sizeof(data);
 8004096:	2332      	movs	r3, #50	; 0x32
 8004098:	67bb      	str	r3, [r7, #120]	; 0x78
  ctx.u.HMACSHA256.in.data = dataTab;
 800409a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800409e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ctx.u.HMACSHA256.in.dataSize = sizeTab;
 80040a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80040a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  ctx.u.HMACSHA256.in.hmac = digest;
 80040aa:	1d3b      	adds	r3, r7, #4
 80040ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  memset(digest, 0x00, sizeof(digest));
 80040b0:	1d3b      	adds	r3, r7, #4
 80040b2:	2220      	movs	r2, #32
 80040b4:	2100      	movs	r1, #0
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff fde3 	bl	8003c82 <memset>
  result = FWCALLGATE(&ctx);
 80040bc:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80040c0:	4b03      	ldr	r3, [pc, #12]	; (80040d0 <main+0x1d0>)
 80040c2:	4610      	mov	r0, r2
 80040c4:	4798      	blx	r3
 80040c6:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
  while (1)
 80040ca:	e7fe      	b.n	80040ca <main+0x1ca>
 80040cc:	65636944 	.word	0x65636944
 80040d0:	08000205 	.word	0x08000205
 80040d4:	20000b00 	.word	0x20000b00
 80040d8:	20000b0c 	.word	0x20000b0c

080040dc <SystemClock_Config>:
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b0b8      	sub	sp, #224	; 0xe0
 80040e0:	af00      	add	r7, sp, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80040e2:	2310      	movs	r3, #16
 80040e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80040e8:	2301      	movs	r3, #1
 80040ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80040f4:	2360      	movs	r3, #96	; 0x60
 80040f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004100:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004104:	4618      	mov	r0, r3
 8004106:	f7fc fec1 	bl	8000e8c <HAL_RCC_OscConfig>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <SystemClock_Config+0x3c>
    _Error_Handler(__FILE__, __LINE__);
 8004110:	21c7      	movs	r1, #199	; 0xc7
 8004112:	4831      	ldr	r0, [pc, #196]	; (80041d8 <SystemClock_Config+0xfc>)
 8004114:	f7ff fc54 	bl	80039c0 <_Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004118:	230f      	movs	r3, #15
 800411a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800411e:	2300      	movs	r3, #0
 8004120:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004124:	2300      	movs	r3, #0
 8004126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800412a:	2300      	movs	r3, #0
 800412c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004130:	2300      	movs	r3, #0
 8004132:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004136:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800413a:	2100      	movs	r1, #0
 800413c:	4618      	mov	r0, r3
 800413e:	f7fd fa2b 	bl	8001598 <HAL_RCC_ClockConfig>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <SystemClock_Config+0x74>
    _Error_Handler(__FILE__, __LINE__);
 8004148:	21d5      	movs	r1, #213	; 0xd5
 800414a:	4823      	ldr	r0, [pc, #140]	; (80041d8 <SystemClock_Config+0xfc>)
 800414c:	f7ff fc38 	bl	80039c0 <_Error_Handler>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RNG;
 8004150:	4b22      	ldr	r3, [pc, #136]	; (80041dc <SystemClock_Config+0x100>)
 8004152:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004154:	2300      	movs	r3, #0
 8004156:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8004158:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800415c:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800415e:	2301      	movs	r3, #1
 8004160:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004162:	2301      	movs	r3, #1
 8004164:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8004166:	2318      	movs	r3, #24
 8004168:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800416a:	2307      	movs	r3, #7
 800416c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800416e:	2302      	movs	r3, #2
 8004170:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004172:	2302      	movs	r3, #2
 8004174:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8004176:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800417a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800417c:	463b      	mov	r3, r7
 800417e:	4618      	mov	r0, r3
 8004180:	f7fd fcd8 	bl	8001b34 <HAL_RCCEx_PeriphCLKConfig>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <SystemClock_Config+0xb6>
    _Error_Handler(__FILE__, __LINE__);
 800418a:	21e4      	movs	r1, #228	; 0xe4
 800418c:	4812      	ldr	r0, [pc, #72]	; (80041d8 <SystemClock_Config+0xfc>)
 800418e:	f7ff fc17 	bl	80039c0 <_Error_Handler>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004192:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004196:	f7fc fe23 	bl	8000de0 <HAL_PWREx_ControlVoltageScaling>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <SystemClock_Config+0xcc>
    _Error_Handler(__FILE__, __LINE__);
 80041a0:	21eb      	movs	r1, #235	; 0xeb
 80041a2:	480d      	ldr	r0, [pc, #52]	; (80041d8 <SystemClock_Config+0xfc>)
 80041a4:	f7ff fc0c 	bl	80039c0 <_Error_Handler>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80041a8:	f7fd fc12 	bl	80019d0 <HAL_RCC_GetHCLKFreq>
 80041ac:	4602      	mov	r2, r0
 80041ae:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <SystemClock_Config+0x104>)
 80041b0:	fba3 2302 	umull	r2, r3, r3, r2
 80041b4:	099b      	lsrs	r3, r3, #6
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fc fc21 	bl	80009fe <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80041bc:	2004      	movs	r0, #4
 80041be:	f7fc fc2b 	bl	8000a18 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80041c2:	2200      	movs	r2, #0
 80041c4:	2100      	movs	r1, #0
 80041c6:	f04f 30ff 	mov.w	r0, #4294967295
 80041ca:	f7fc fbfc 	bl	80009c6 <HAL_NVIC_SetPriority>
}
 80041ce:	bf00      	nop
 80041d0:	37e0      	adds	r7, #224	; 0xe0
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	08003cac 	.word	0x08003cac
 80041dc:	00040002 	.word	0x00040002
 80041e0:	10624dd3 	.word	0x10624dd3

080041e4 <MX_RNG_Init>:
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  hrng.Instance = RNG;
 80041e8:	4b07      	ldr	r3, [pc, #28]	; (8004208 <MX_RNG_Init+0x24>)
 80041ea:	4a08      	ldr	r2, [pc, #32]	; (800420c <MX_RNG_Init+0x28>)
 80041ec:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80041ee:	4806      	ldr	r0, [pc, #24]	; (8004208 <MX_RNG_Init+0x24>)
 80041f0:	f7fe fa00 	bl	80025f4 <HAL_RNG_Init>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d004      	beq.n	8004204 <MX_RNG_Init+0x20>
    _Error_Handler(__FILE__, __LINE__);
 80041fa:	f240 1101 	movw	r1, #257	; 0x101
 80041fe:	4804      	ldr	r0, [pc, #16]	; (8004210 <MX_RNG_Init+0x2c>)
 8004200:	f7ff fbde 	bl	80039c0 <_Error_Handler>
}
 8004204:	bf00      	nop
 8004206:	bd80      	pop	{r7, pc}
 8004208:	20000b00 	.word	0x20000b00
 800420c:	50060800 	.word	0x50060800
 8004210:	08003cac 	.word	0x08003cac

08004214 <MX_USART2_UART_Init>:
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8004218:	4b15      	ldr	r3, [pc, #84]	; (8004270 <MX_USART2_UART_Init+0x5c>)
 800421a:	4a16      	ldr	r2, [pc, #88]	; (8004274 <MX_USART2_UART_Init+0x60>)
 800421c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800421e:	4b14      	ldr	r3, [pc, #80]	; (8004270 <MX_USART2_UART_Init+0x5c>)
 8004220:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004224:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004226:	4b12      	ldr	r3, [pc, #72]	; (8004270 <MX_USART2_UART_Init+0x5c>)
 8004228:	2200      	movs	r2, #0
 800422a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800422c:	4b10      	ldr	r3, [pc, #64]	; (8004270 <MX_USART2_UART_Init+0x5c>)
 800422e:	2200      	movs	r2, #0
 8004230:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004232:	4b0f      	ldr	r3, [pc, #60]	; (8004270 <MX_USART2_UART_Init+0x5c>)
 8004234:	2200      	movs	r2, #0
 8004236:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004238:	4b0d      	ldr	r3, [pc, #52]	; (8004270 <MX_USART2_UART_Init+0x5c>)
 800423a:	220c      	movs	r2, #12
 800423c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800423e:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <MX_USART2_UART_Init+0x5c>)
 8004240:	2200      	movs	r2, #0
 8004242:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004244:	4b0a      	ldr	r3, [pc, #40]	; (8004270 <MX_USART2_UART_Init+0x5c>)
 8004246:	2200      	movs	r2, #0
 8004248:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800424a:	4b09      	ldr	r3, [pc, #36]	; (8004270 <MX_USART2_UART_Init+0x5c>)
 800424c:	2200      	movs	r2, #0
 800424e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004250:	4b07      	ldr	r3, [pc, #28]	; (8004270 <MX_USART2_UART_Init+0x5c>)
 8004252:	2200      	movs	r2, #0
 8004254:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004256:	4806      	ldr	r0, [pc, #24]	; (8004270 <MX_USART2_UART_Init+0x5c>)
 8004258:	f7fe fa4a 	bl	80026f0 <HAL_UART_Init>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d004      	beq.n	800426c <MX_USART2_UART_Init+0x58>
    _Error_Handler(__FILE__, __LINE__);
 8004262:	f44f 718b 	mov.w	r1, #278	; 0x116
 8004266:	4804      	ldr	r0, [pc, #16]	; (8004278 <MX_USART2_UART_Init+0x64>)
 8004268:	f7ff fbaa 	bl	80039c0 <_Error_Handler>
}
 800426c:	bf00      	nop
 800426e:	bd80      	pop	{r7, pc}
 8004270:	20000b0c 	.word	0x20000b0c
 8004274:	40004400 	.word	0x40004400
 8004278:	08003cac 	.word	0x08003cac

0800427c <MX_GPIO_Init>:
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004282:	4a0f      	ldr	r2, [pc, #60]	; (80042c0 <MX_GPIO_Init+0x44>)
 8004284:	4b0e      	ldr	r3, [pc, #56]	; (80042c0 <MX_GPIO_Init+0x44>)
 8004286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800428e:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <MX_GPIO_Init+0x44>)
 8004290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	607b      	str	r3, [r7, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800429a:	4a09      	ldr	r2, [pc, #36]	; (80042c0 <MX_GPIO_Init+0x44>)
 800429c:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <MX_GPIO_Init+0x44>)
 800429e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a0:	f043 0302 	orr.w	r3, r3, #2
 80042a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042a6:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <MX_GPIO_Init+0x44>)
 80042a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	603b      	str	r3, [r7, #0]
 80042b0:	683b      	ldr	r3, [r7, #0]
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40021000 	.word	0x40021000
