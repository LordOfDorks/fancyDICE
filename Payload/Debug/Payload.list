
C:\Git\fancyDICE\Payload\Debug\Payload.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002228  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080023b0  080023b0  000123b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800240c  0800240c  0001240c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002414  08002414  00012414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002418  08002418  00012418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  0800241c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000130  20000004  08002420  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000134  08002420  00020134  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013d63  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000279c  00000000  00000000  00033d97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005520  00000000  00000000  00036533  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000918  00000000  00000000  0003ba58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ab0  00000000  00000000  0003c370  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000054d9  00000000  00000000  0003ce20  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003cbd  00000000  00000000  000422f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00045fb6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000017b4  00000000  00000000  00046034  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002398 	.word	0x08002398

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002398 	.word	0x08002398

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <HAL_InitTick+0x24>)
{
 80004dc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80004de:	6818      	ldr	r0, [r3, #0]
 80004e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80004e8:	f000 f870 	bl	80005cc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80004ec:	2200      	movs	r2, #0
 80004ee:	4621      	mov	r1, r4
 80004f0:	f04f 30ff 	mov.w	r0, #4294967295
 80004f4:	f000 f836 	bl	8000564 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80004f8:	2000      	movs	r0, #0
 80004fa:	bd10      	pop	{r4, pc}
 80004fc:	20000000 	.word	0x20000000

08000500 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000500:	4a07      	ldr	r2, [pc, #28]	; (8000520 <HAL_Init+0x20>)
{
 8000502:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000504:	6813      	ldr	r3, [r2, #0]
 8000506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800050a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f817 	bl	8000540 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	2000      	movs	r0, #0
 8000514:	f7ff ffe0 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000518:	f001 fe1c 	bl	8002154 <HAL_MspInit>
}
 800051c:	2000      	movs	r0, #0
 800051e:	bd08      	pop	{r3, pc}
 8000520:	40022000 	.word	0x40022000

08000524 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000524:	4a02      	ldr	r2, [pc, #8]	; (8000530 <HAL_IncTick+0xc>)
 8000526:	6813      	ldr	r3, [r2, #0]
 8000528:	3301      	adds	r3, #1
 800052a:	6013      	str	r3, [r2, #0]
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000020 	.word	0x20000020

08000534 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000534:	4b01      	ldr	r3, [pc, #4]	; (800053c <HAL_GetTick+0x8>)
 8000536:	6818      	ldr	r0, [r3, #0]
}
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000020 	.word	0x20000020

08000540 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000540:	4a07      	ldr	r2, [pc, #28]	; (8000560 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000542:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000544:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000548:	041b      	lsls	r3, r3, #16
 800054a:	0c1b      	lsrs	r3, r3, #16
 800054c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000550:	0200      	lsls	r0, r0, #8
 8000552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000556:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800055a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800055c:	60d3      	str	r3, [r2, #12]
 800055e:	4770      	bx	lr
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000564:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	68dc      	ldr	r4, [r3, #12]
 800056a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800056e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000572:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000574:	2b04      	cmp	r3, #4
 8000576:	bf28      	it	cs
 8000578:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800057a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800057c:	f04f 0501 	mov.w	r5, #1
 8000580:	fa05 f303 	lsl.w	r3, r5, r3
 8000584:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000588:	bf8c      	ite	hi
 800058a:	3c03      	subhi	r4, #3
 800058c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800058e:	4019      	ands	r1, r3
 8000590:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000592:	fa05 f404 	lsl.w	r4, r5, r4
 8000596:	3c01      	subs	r4, #1
 8000598:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800059a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800059c:	ea42 0201 	orr.w	r2, r2, r1
 80005a0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a4:	bfaf      	iteee	ge
 80005a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005aa:	f000 000f 	andlt.w	r0, r0, #15
 80005ae:	4b06      	ldrlt	r3, [pc, #24]	; (80005c8 <HAL_NVIC_SetPriority+0x64>)
 80005b0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b2:	bfa5      	ittet	ge
 80005b4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005b8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ba:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005bc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop
 80005c4:	e000ed00 	.word	0xe000ed00
 80005c8:	e000ed14 	.word	0xe000ed14

080005cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005cc:	3801      	subs	r0, #1
 80005ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005d2:	d20a      	bcs.n	80005ea <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005d8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005da:	21f0      	movs	r1, #240	; 0xf0
 80005dc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005e0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005e2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005e4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80005ea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000e010 	.word	0xe000e010
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80005fa:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80005fc:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80005fe:	bf0c      	ite	eq
 8000600:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000604:	f022 0204 	bicne.w	r2, r2, #4
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	4770      	bx	lr
 800060c:	e000e010 	.word	0xe000e010

08000610 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000610:	4770      	bx	lr

08000612 <HAL_SYSTICK_IRQHandler>:
{
 8000612:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000614:	f7ff fffc 	bl	8000610 <HAL_SYSTICK_Callback>
 8000618:	bd08      	pop	{r3, pc}
	...

0800061c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800061c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000620:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000622:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000624:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80007d0 <HAL_GPIO_Init+0x1b4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000628:	4c67      	ldr	r4, [pc, #412]	; (80007c8 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 800062a:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00;
 800062c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800062e:	9a01      	ldr	r2, [sp, #4]
 8000630:	40da      	lsrs	r2, r3
 8000632:	d102      	bne.n	800063a <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8000634:	b005      	add	sp, #20
 8000636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800063a:	2601      	movs	r6, #1
    if(iocurrent)
 800063c:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800063e:	409e      	lsls	r6, r3
    if(iocurrent)
 8000640:	ea12 0e06 	ands.w	lr, r2, r6
 8000644:	f000 80b1 	beq.w	80007aa <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000648:	684a      	ldr	r2, [r1, #4]
 800064a:	f022 0710 	bic.w	r7, r2, #16
 800064e:	2f02      	cmp	r7, #2
 8000650:	d116      	bne.n	8000680 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8000652:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8000656:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800065a:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800065e:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000662:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000666:	f04f 0c0f 	mov.w	ip, #15
 800066a:	fa0c fc0a 	lsl.w	ip, ip, sl
 800066e:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000672:	690d      	ldr	r5, [r1, #16]
 8000674:	fa05 f50a 	lsl.w	r5, r5, sl
 8000678:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 800067c:	f8c9 5020 	str.w	r5, [r9, #32]
 8000680:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000684:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000686:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800068a:	fa05 f50c 	lsl.w	r5, r5, ip
 800068e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000690:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000694:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000698:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800069c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800069e:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006a2:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80006a4:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006a8:	d811      	bhi.n	80006ce <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80006aa:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 80006ac:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 80006b0:	68cf      	ldr	r7, [r1, #12]
 80006b2:	fa07 f70c 	lsl.w	r7, r7, ip
 80006b6:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 80006ba:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006bc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80006be:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80006c2:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80006c6:	409f      	lsls	r7, r3
 80006c8:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80006cc:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80006ce:	f1ba 0f03 	cmp.w	sl, #3
 80006d2:	d107      	bne.n	80006e4 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 80006d4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80006d6:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80006da:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 80006de:	409f      	lsls	r7, r3
 80006e0:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 80006e2:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 80006e4:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80006e6:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80006e8:	688e      	ldr	r6, [r1, #8]
 80006ea:	fa06 f60c 	lsl.w	r6, r6, ip
 80006ee:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 80006f0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006f2:	00d5      	lsls	r5, r2, #3
 80006f4:	d559      	bpl.n	80007aa <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f6:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80006fa:	f045 0501 	orr.w	r5, r5, #1
 80006fe:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8000702:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000706:	f023 0603 	bic.w	r6, r3, #3
 800070a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800070e:	f005 0501 	and.w	r5, r5, #1
 8000712:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000716:	9503      	str	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000718:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071c:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800071e:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000720:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000724:	270f      	movs	r7, #15
 8000726:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800072a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800072e:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000732:	d03c      	beq.n	80007ae <HAL_GPIO_Init+0x192>
 8000734:	4d25      	ldr	r5, [pc, #148]	; (80007cc <HAL_GPIO_Init+0x1b0>)
 8000736:	42a8      	cmp	r0, r5
 8000738:	d03b      	beq.n	80007b2 <HAL_GPIO_Init+0x196>
 800073a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800073e:	42a8      	cmp	r0, r5
 8000740:	d039      	beq.n	80007b6 <HAL_GPIO_Init+0x19a>
 8000742:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000746:	42a8      	cmp	r0, r5
 8000748:	d037      	beq.n	80007ba <HAL_GPIO_Init+0x19e>
 800074a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800074e:	42a8      	cmp	r0, r5
 8000750:	d035      	beq.n	80007be <HAL_GPIO_Init+0x1a2>
 8000752:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000756:	42a8      	cmp	r0, r5
 8000758:	d033      	beq.n	80007c2 <HAL_GPIO_Init+0x1a6>
 800075a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800075e:	42a8      	cmp	r0, r5
 8000760:	bf14      	ite	ne
 8000762:	2507      	movne	r5, #7
 8000764:	2506      	moveq	r5, #6
 8000766:	fa05 f50c 	lsl.w	r5, r5, ip
 800076a:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 800076c:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 800076e:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000770:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000774:	03d7      	lsls	r7, r2, #15
        temp &= ~((uint32_t)iocurrent);
 8000776:	bf54      	ite	pl
 8000778:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800077a:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 800077e:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8000780:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000782:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 8000784:	bf54      	ite	pl
 8000786:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000788:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 800078c:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 800078e:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000790:	02d7      	lsls	r7, r2, #11
        temp &= ~((uint32_t)iocurrent);
 8000792:	bf54      	ite	pl
 8000794:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000796:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 800079a:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 800079c:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800079e:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 80007a0:	bf54      	ite	pl
 80007a2:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007a4:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 80007a8:	60e5      	str	r5, [r4, #12]
    position++;
 80007aa:	3301      	adds	r3, #1
 80007ac:	e73f      	b.n	800062e <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80007ae:	2500      	movs	r5, #0
 80007b0:	e7d9      	b.n	8000766 <HAL_GPIO_Init+0x14a>
 80007b2:	2501      	movs	r5, #1
 80007b4:	e7d7      	b.n	8000766 <HAL_GPIO_Init+0x14a>
 80007b6:	2502      	movs	r5, #2
 80007b8:	e7d5      	b.n	8000766 <HAL_GPIO_Init+0x14a>
 80007ba:	2503      	movs	r5, #3
 80007bc:	e7d3      	b.n	8000766 <HAL_GPIO_Init+0x14a>
 80007be:	2504      	movs	r5, #4
 80007c0:	e7d1      	b.n	8000766 <HAL_GPIO_Init+0x14a>
 80007c2:	2505      	movs	r5, #5
 80007c4:	e7cf      	b.n	8000766 <HAL_GPIO_Init+0x14a>
 80007c6:	bf00      	nop
 80007c8:	40010400 	.word	0x40010400
 80007cc:	48000400 	.word	0x48000400
 80007d0:	40021000 	.word	0x40021000

080007d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007d4:	b10a      	cbz	r2, 80007da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007d6:	6181      	str	r1, [r0, #24]
 80007d8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007da:	6281      	str	r1, [r0, #40]	; 0x28
 80007dc:	4770      	bx	lr
	...

080007e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 80007e0:	4b02      	ldr	r3, [pc, #8]	; (80007ec <HAL_PWREx_GetVoltageRange+0xc>)
 80007e2:	6818      	ldr	r0, [r3, #0]
}
 80007e4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40007000 	.word	0x40007000

080007f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80007f0:	4b16      	ldr	r3, [pc, #88]	; (800084c <HAL_PWREx_ControlVoltageScaling+0x5c>)
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80007f2:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80007f4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80007f8:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80007fc:	d11a      	bne.n	8000834 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80007fe:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000802:	d013      	beq.n	800082c <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000804:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000806:	4912      	ldr	r1, [pc, #72]	; (8000850 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000808:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 800080c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000810:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000812:	4a10      	ldr	r2, [pc, #64]	; (8000854 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8000814:	6812      	ldr	r2, [r2, #0]
 8000816:	fbb2 f1f1 	udiv	r1, r2, r1
 800081a:	2232      	movs	r2, #50	; 0x32
 800081c:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 800081e:	b112      	cbz	r2, 8000826 <HAL_PWREx_ControlVoltageScaling+0x36>
 8000820:	6959      	ldr	r1, [r3, #20]
 8000822:	0549      	lsls	r1, r1, #21
 8000824:	d404      	bmi.n	8000830 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	055b      	lsls	r3, r3, #21
 800082a:	d40d      	bmi.n	8000848 <HAL_PWREx_ControlVoltageScaling+0x58>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 800082c:	2000      	movs	r0, #0
 800082e:	4770      	bx	lr
        wait_loop_index--;
 8000830:	3a01      	subs	r2, #1
 8000832:	e7f4      	b.n	800081e <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000834:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000838:	bf1f      	itttt	ne
 800083a:	681a      	ldrne	r2, [r3, #0]
 800083c:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000840:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8000844:	601a      	strne	r2, [r3, #0]
 8000846:	e7f1      	b.n	800082c <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8000848:	2003      	movs	r0, #3
}  
 800084a:	4770      	bx	lr
 800084c:	40007000 	.word	0x40007000
 8000850:	000f4240 	.word	0x000f4240
 8000854:	20000000 	.word	0x20000000

08000858 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000858:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800085a:	4d1e      	ldr	r5, [pc, #120]	; (80008d4 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800085c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800085e:	00da      	lsls	r2, r3, #3
{
 8000860:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000862:	d518      	bpl.n	8000896 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000864:	f7ff ffbc 	bl	80007e0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000868:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800086c:	d123      	bne.n	80008b6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800086e:	2c80      	cmp	r4, #128	; 0x80
 8000870:	d929      	bls.n	80008c6 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000872:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000874:	bf8c      	ite	hi
 8000876:	2002      	movhi	r0, #2
 8000878:	2001      	movls	r0, #1
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 800087a:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800087c:	6813      	ldr	r3, [r2, #0]
 800087e:	f023 0307 	bic.w	r3, r3, #7
 8000882:	4303      	orrs	r3, r0
 8000884:	6013      	str	r3, [r2, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8000886:	6813      	ldr	r3, [r2, #0]
 8000888:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 800088c:	1a18      	subs	r0, r3, r0
 800088e:	bf18      	it	ne
 8000890:	2001      	movne	r0, #1
 8000892:	b003      	add	sp, #12
 8000894:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	65ab      	str	r3, [r5, #88]	; 0x58
 800089e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80008a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a4:	9301      	str	r3, [sp, #4]
 80008a6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80008a8:	f7ff ff9a 	bl	80007e0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80008ac:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80008ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80008b2:	65ab      	str	r3, [r5, #88]	; 0x58
 80008b4:	e7d8      	b.n	8000868 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80008b6:	2c80      	cmp	r4, #128	; 0x80
 80008b8:	d807      	bhi.n	80008ca <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80008ba:	d008      	beq.n	80008ce <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7) 
 80008bc:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80008c0:	4258      	negs	r0, r3
 80008c2:	4158      	adcs	r0, r3
 80008c4:	e7d9      	b.n	800087a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80008c6:	2000      	movs	r0, #0
 80008c8:	e7d7      	b.n	800087a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80008ca:	2003      	movs	r0, #3
 80008cc:	e7d5      	b.n	800087a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80008ce:	2002      	movs	r0, #2
 80008d0:	e7d3      	b.n	800087a <RCC_SetFlashLatencyFromMSIRange+0x22>
 80008d2:	bf00      	nop
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40022000 	.word	0x40022000

080008dc <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80008dc:	4b46      	ldr	r3, [pc, #280]	; (80009f8 <HAL_RCC_GetSysClockFreq+0x11c>)
 80008de:	689a      	ldr	r2, [r3, #8]
 80008e0:	f012 0f0c 	tst.w	r2, #12
{
 80008e4:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80008e6:	d009      	beq.n	80008fc <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80008e8:	689a      	ldr	r2, [r3, #8]
 80008ea:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80008ee:	2a0c      	cmp	r2, #12
 80008f0:	d148      	bne.n	8000984 <HAL_RCC_GetSysClockFreq+0xa8>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80008f2:	68da      	ldr	r2, [r3, #12]
 80008f4:	f002 0203 	and.w	r2, r2, #3
 80008f8:	2a01      	cmp	r2, #1
 80008fa:	d143      	bne.n	8000984 <HAL_RCC_GetSysClockFreq+0xa8>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	0712      	lsls	r2, r2, #28
 8000900:	d437      	bmi.n	8000972 <HAL_RCC_GetSysClockFreq+0x96>
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 8000902:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000906:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800090a:	fa91 f1a1 	rbit	r1, r1
 800090e:	fab1 f181 	clz	r1, r1
 8000912:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 8000916:	40ca      	lsrs	r2, r1
    msirange = MSIRangeTable[msirange];
 8000918:	4938      	ldr	r1, [pc, #224]	; (80009fc <HAL_RCC_GetSysClockFreq+0x120>)
 800091a:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 800091e:	689a      	ldr	r2, [r3, #8]
      sysclockfreq = msirange;
 8000920:	f012 0f0c 	tst.w	r2, #12
 8000924:	bf0c      	ite	eq
 8000926:	4620      	moveq	r0, r4
 8000928:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800092a:	689a      	ldr	r2, [r3, #8]
 800092c:	f002 020c 	and.w	r2, r2, #12
 8000930:	2a0c      	cmp	r2, #12
 8000932:	d154      	bne.n	80009de <HAL_RCC_GetSysClockFreq+0x102>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000934:	68da      	ldr	r2, [r3, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8000936:	68d8      	ldr	r0, [r3, #12]
 8000938:	2170      	movs	r1, #112	; 0x70
 800093a:	fa91 f1a1 	rbit	r1, r1
 800093e:	fab1 f181 	clz	r1, r1
 8000942:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8000946:	40c8      	lsrs	r0, r1
 8000948:	1c41      	adds	r1, r0, #1
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800094a:	f002 0003 	and.w	r0, r2, #3
    switch (pllsource)
 800094e:	2802      	cmp	r0, #2
 8000950:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8000954:	d028      	beq.n	80009a8 <HAL_RCC_GetSysClockFreq+0xcc>
 8000956:	2803      	cmp	r0, #3
 8000958:	d042      	beq.n	80009e0 <HAL_RCC_GetSysClockFreq+0x104>
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 800095a:	68d8      	ldr	r0, [r3, #12]
 800095c:	fa92 f2a2 	rbit	r2, r2
 8000960:	fab2 f282 	clz	r2, r2
 8000964:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 8000968:	40d0      	lsrs	r0, r2
 800096a:	fbb4 f1f1 	udiv	r1, r4, r1
 800096e:	4348      	muls	r0, r1
      break;
 8000970:	e027      	b.n	80009c2 <HAL_RCC_GetSysClockFreq+0xe6>
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	21f0      	movs	r1, #240	; 0xf0
 8000976:	fa91 f1a1 	rbit	r1, r1
 800097a:	fab1 f181 	clz	r1, r1
 800097e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000982:	e7c8      	b.n	8000916 <HAL_RCC_GetSysClockFreq+0x3a>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8000984:	689a      	ldr	r2, [r3, #8]
 8000986:	f002 020c 	and.w	r2, r2, #12
 800098a:	2a04      	cmp	r2, #4
 800098c:	d007      	beq.n	800099e <HAL_RCC_GetSysClockFreq+0xc2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800098e:	689a      	ldr	r2, [r3, #8]
 8000990:	f002 020c 	and.w	r2, r2, #12
 8000994:	2a08      	cmp	r2, #8
 8000996:	d104      	bne.n	80009a2 <HAL_RCC_GetSysClockFreq+0xc6>
    sysclockfreq = HSE_VALUE;
 8000998:	4819      	ldr	r0, [pc, #100]	; (8000a00 <HAL_RCC_GetSysClockFreq+0x124>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 800099a:	2400      	movs	r4, #0
 800099c:	e7c5      	b.n	800092a <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 800099e:	4819      	ldr	r0, [pc, #100]	; (8000a04 <HAL_RCC_GetSysClockFreq+0x128>)
 80009a0:	e7fb      	b.n	800099a <HAL_RCC_GetSysClockFreq+0xbe>
  uint32_t sysclockfreq = 0U;
 80009a2:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80009a4:	4604      	mov	r4, r0
 80009a6:	e7c0      	b.n	800092a <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80009a8:	68d8      	ldr	r0, [r3, #12]
 80009aa:	fa92 f2a2 	rbit	r2, r2
 80009ae:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 80009b2:	fab2 f282 	clz	r2, r2
 80009b6:	fa20 f202 	lsr.w	r2, r0, r2
 80009ba:	4812      	ldr	r0, [pc, #72]	; (8000a04 <HAL_RCC_GetSysClockFreq+0x128>)
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80009bc:	fbb0 f0f1 	udiv	r0, r0, r1
 80009c0:	4350      	muls	r0, r2
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80009c8:	fa92 f2a2 	rbit	r2, r2
 80009cc:	fab2 f282 	clz	r2, r2
 80009d0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80009d4:	40d3      	lsrs	r3, r2
 80009d6:	3301      	adds	r3, #1
 80009d8:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80009da:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80009de:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80009e0:	68d8      	ldr	r0, [r3, #12]
 80009e2:	fa92 f2a2 	rbit	r2, r2
 80009e6:	f400 40fe 	and.w	r0, r0, #32512	; 0x7f00
 80009ea:	fab2 f282 	clz	r2, r2
 80009ee:	fa20 f202 	lsr.w	r2, r0, r2
 80009f2:	4803      	ldr	r0, [pc, #12]	; (8000a00 <HAL_RCC_GetSysClockFreq+0x124>)
 80009f4:	e7e2      	b.n	80009bc <HAL_RCC_GetSysClockFreq+0xe0>
 80009f6:	bf00      	nop
 80009f8:	40021000 	.word	0x40021000
 80009fc:	080023dc 	.word	0x080023dc
 8000a00:	007a1200 	.word	0x007a1200
 8000a04:	00f42400 	.word	0x00f42400

08000a08 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000a08:	6803      	ldr	r3, [r0, #0]
{
 8000a0a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000a0e:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000a10:	06d8      	lsls	r0, r3, #27
 8000a12:	d541      	bpl.n	8000a98 <HAL_RCC_OscConfig+0x90>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000a14:	4ca5      	ldr	r4, [pc, #660]	; (8000cac <HAL_RCC_OscConfig+0x2a4>)
 8000a16:	68a3      	ldr	r3, [r4, #8]
 8000a18:	f013 0f0c 	tst.w	r3, #12
 8000a1c:	d166      	bne.n	8000aec <HAL_RCC_OscConfig+0xe4>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000a1e:	6823      	ldr	r3, [r4, #0]
 8000a20:	0799      	lsls	r1, r3, #30
 8000a22:	d505      	bpl.n	8000a30 <HAL_RCC_OscConfig+0x28>
 8000a24:	69ab      	ldr	r3, [r5, #24]
 8000a26:	b91b      	cbnz	r3, 8000a30 <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 8000a28:	2001      	movs	r0, #1
}
 8000a2a:	b002      	add	sp, #8
 8000a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000a30:	6823      	ldr	r3, [r4, #0]
 8000a32:	6a28      	ldr	r0, [r5, #32]
 8000a34:	071a      	lsls	r2, r3, #28
 8000a36:	bf56      	itet	pl
 8000a38:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8000a3c:	6823      	ldrmi	r3, [r4, #0]
 8000a3e:	091b      	lsrpl	r3, r3, #4
 8000a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a44:	4283      	cmp	r3, r0
 8000a46:	d23c      	bcs.n	8000ac2 <HAL_RCC_OscConfig+0xba>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a48:	f7ff ff06 	bl	8000858 <RCC_SetFlashLatencyFromMSIRange>
 8000a4c:	2800      	cmp	r0, #0
 8000a4e:	d1eb      	bne.n	8000a28 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a50:	6823      	ldr	r3, [r4, #0]
 8000a52:	f043 0308 	orr.w	r3, r3, #8
 8000a56:	6023      	str	r3, [r4, #0]
 8000a58:	6823      	ldr	r3, [r4, #0]
 8000a5a:	6a2a      	ldr	r2, [r5, #32]
 8000a5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a60:	4313      	orrs	r3, r2
 8000a62:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a64:	6863      	ldr	r3, [r4, #4]
 8000a66:	69ea      	ldr	r2, [r5, #28]
 8000a68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000a6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a70:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000a72:	f7ff ff33 	bl	80008dc <HAL_RCC_GetSysClockFreq>
 8000a76:	68a3      	ldr	r3, [r4, #8]
 8000a78:	22f0      	movs	r2, #240	; 0xf0
 8000a7a:	fa92 f2a2 	rbit	r2, r2
 8000a7e:	fab2 f282 	clz	r2, r2
 8000a82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a86:	40d3      	lsrs	r3, r2
 8000a88:	4a89      	ldr	r2, [pc, #548]	; (8000cb0 <HAL_RCC_OscConfig+0x2a8>)
 8000a8a:	5cd3      	ldrb	r3, [r2, r3]
 8000a8c:	40d8      	lsrs	r0, r3
 8000a8e:	4b89      	ldr	r3, [pc, #548]	; (8000cb4 <HAL_RCC_OscConfig+0x2ac>)
 8000a90:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000a92:	2000      	movs	r0, #0
 8000a94:	f7ff fd20 	bl	80004d8 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a98:	682b      	ldr	r3, [r5, #0]
 8000a9a:	07de      	lsls	r6, r3, #31
 8000a9c:	d45b      	bmi.n	8000b56 <HAL_RCC_OscConfig+0x14e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a9e:	682b      	ldr	r3, [r5, #0]
 8000aa0:	079c      	lsls	r4, r3, #30
 8000aa2:	f100 80a3 	bmi.w	8000bec <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000aa6:	682b      	ldr	r3, [r5, #0]
 8000aa8:	0719      	lsls	r1, r3, #28
 8000aaa:	f100 80e7 	bmi.w	8000c7c <HAL_RCC_OscConfig+0x274>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000aae:	682b      	ldr	r3, [r5, #0]
 8000ab0:	075a      	lsls	r2, r3, #29
 8000ab2:	f100 8115 	bmi.w	8000ce0 <HAL_RCC_OscConfig+0x2d8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000ab6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000ab8:	2a00      	cmp	r2, #0
 8000aba:	f040 817c 	bne.w	8000db6 <HAL_RCC_OscConfig+0x3ae>
  return HAL_OK;
 8000abe:	2000      	movs	r0, #0
 8000ac0:	e7b3      	b.n	8000a2a <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ac2:	6823      	ldr	r3, [r4, #0]
 8000ac4:	f043 0308 	orr.w	r3, r3, #8
 8000ac8:	6023      	str	r3, [r4, #0]
 8000aca:	6823      	ldr	r3, [r4, #0]
 8000acc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ad0:	4303      	orrs	r3, r0
 8000ad2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ad4:	6863      	ldr	r3, [r4, #4]
 8000ad6:	69ea      	ldr	r2, [r5, #28]
 8000ad8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000adc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000ae0:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ae2:	f7ff feb9 	bl	8000858 <RCC_SetFlashLatencyFromMSIRange>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	d0c3      	beq.n	8000a72 <HAL_RCC_OscConfig+0x6a>
 8000aea:	e79d      	b.n	8000a28 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000aec:	69ab      	ldr	r3, [r5, #24]
 8000aee:	b313      	cbz	r3, 8000b36 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_ENABLE();
 8000af0:	6823      	ldr	r3, [r4, #0]
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000af8:	f7ff fd1c 	bl	8000534 <HAL_GetTick>
 8000afc:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000afe:	6823      	ldr	r3, [r4, #0]
 8000b00:	079b      	lsls	r3, r3, #30
 8000b02:	d511      	bpl.n	8000b28 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b04:	6823      	ldr	r3, [r4, #0]
 8000b06:	f043 0308 	orr.w	r3, r3, #8
 8000b0a:	6023      	str	r3, [r4, #0]
 8000b0c:	6823      	ldr	r3, [r4, #0]
 8000b0e:	6a2a      	ldr	r2, [r5, #32]
 8000b10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b14:	4313      	orrs	r3, r2
 8000b16:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b18:	6863      	ldr	r3, [r4, #4]
 8000b1a:	69ea      	ldr	r2, [r5, #28]
 8000b1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b24:	6063      	str	r3, [r4, #4]
 8000b26:	e7b7      	b.n	8000a98 <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b28:	f7ff fd04 	bl	8000534 <HAL_GetTick>
 8000b2c:	1b80      	subs	r0, r0, r6
 8000b2e:	2802      	cmp	r0, #2
 8000b30:	d9e5      	bls.n	8000afe <HAL_RCC_OscConfig+0xf6>
            return HAL_TIMEOUT;
 8000b32:	2003      	movs	r0, #3
 8000b34:	e779      	b.n	8000a2a <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 8000b36:	6823      	ldr	r3, [r4, #0]
 8000b38:	f023 0301 	bic.w	r3, r3, #1
 8000b3c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b3e:	f7ff fcf9 	bl	8000534 <HAL_GetTick>
 8000b42:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	079f      	lsls	r7, r3, #30
 8000b48:	d5a6      	bpl.n	8000a98 <HAL_RCC_OscConfig+0x90>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b4a:	f7ff fcf3 	bl	8000534 <HAL_GetTick>
 8000b4e:	1b80      	subs	r0, r0, r6
 8000b50:	2802      	cmp	r0, #2
 8000b52:	d9f7      	bls.n	8000b44 <HAL_RCC_OscConfig+0x13c>
 8000b54:	e7ed      	b.n	8000b32 <HAL_RCC_OscConfig+0x12a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8000b56:	4c55      	ldr	r4, [pc, #340]	; (8000cac <HAL_RCC_OscConfig+0x2a4>)
 8000b58:	68a3      	ldr	r3, [r4, #8]
 8000b5a:	f003 030c 	and.w	r3, r3, #12
 8000b5e:	2b08      	cmp	r3, #8
 8000b60:	d009      	beq.n	8000b76 <HAL_RCC_OscConfig+0x16e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b62:	68a3      	ldr	r3, [r4, #8]
 8000b64:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8000b68:	2b0c      	cmp	r3, #12
 8000b6a:	d10b      	bne.n	8000b84 <HAL_RCC_OscConfig+0x17c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b6c:	68e3      	ldr	r3, [r4, #12]
 8000b6e:	f003 0303 	and.w	r3, r3, #3
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	d106      	bne.n	8000b84 <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b76:	6823      	ldr	r3, [r4, #0]
 8000b78:	0398      	lsls	r0, r3, #14
 8000b7a:	d590      	bpl.n	8000a9e <HAL_RCC_OscConfig+0x96>
 8000b7c:	686b      	ldr	r3, [r5, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d18d      	bne.n	8000a9e <HAL_RCC_OscConfig+0x96>
 8000b82:	e751      	b.n	8000a28 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b84:	686b      	ldr	r3, [r5, #4]
 8000b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b8a:	d110      	bne.n	8000bae <HAL_RCC_OscConfig+0x1a6>
 8000b8c:	6823      	ldr	r3, [r4, #0]
 8000b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b92:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b94:	f7ff fcce 	bl	8000534 <HAL_GetTick>
 8000b98:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000b9a:	6823      	ldr	r3, [r4, #0]
 8000b9c:	0399      	lsls	r1, r3, #14
 8000b9e:	f53f af7e 	bmi.w	8000a9e <HAL_RCC_OscConfig+0x96>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ba2:	f7ff fcc7 	bl	8000534 <HAL_GetTick>
 8000ba6:	1b80      	subs	r0, r0, r6
 8000ba8:	2864      	cmp	r0, #100	; 0x64
 8000baa:	d9f6      	bls.n	8000b9a <HAL_RCC_OscConfig+0x192>
 8000bac:	e7c1      	b.n	8000b32 <HAL_RCC_OscConfig+0x12a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bb2:	d104      	bne.n	8000bbe <HAL_RCC_OscConfig+0x1b6>
 8000bb4:	6823      	ldr	r3, [r4, #0]
 8000bb6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bba:	6023      	str	r3, [r4, #0]
 8000bbc:	e7e6      	b.n	8000b8c <HAL_RCC_OscConfig+0x184>
 8000bbe:	6822      	ldr	r2, [r4, #0]
 8000bc0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000bc4:	6022      	str	r2, [r4, #0]
 8000bc6:	6822      	ldr	r2, [r4, #0]
 8000bc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000bcc:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d1e0      	bne.n	8000b94 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8000bd2:	f7ff fcaf 	bl	8000534 <HAL_GetTick>
 8000bd6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000bd8:	6823      	ldr	r3, [r4, #0]
 8000bda:	039a      	lsls	r2, r3, #14
 8000bdc:	f57f af5f 	bpl.w	8000a9e <HAL_RCC_OscConfig+0x96>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000be0:	f7ff fca8 	bl	8000534 <HAL_GetTick>
 8000be4:	1b80      	subs	r0, r0, r6
 8000be6:	2864      	cmp	r0, #100	; 0x64
 8000be8:	d9f6      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x1d0>
 8000bea:	e7a2      	b.n	8000b32 <HAL_RCC_OscConfig+0x12a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000bec:	4c2f      	ldr	r4, [pc, #188]	; (8000cac <HAL_RCC_OscConfig+0x2a4>)
 8000bee:	68a3      	ldr	r3, [r4, #8]
 8000bf0:	f003 030c 	and.w	r3, r3, #12
 8000bf4:	2b04      	cmp	r3, #4
 8000bf6:	d009      	beq.n	8000c0c <HAL_RCC_OscConfig+0x204>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bf8:	68a3      	ldr	r3, [r4, #8]
 8000bfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000bfe:	2b0c      	cmp	r3, #12
 8000c00:	d119      	bne.n	8000c36 <HAL_RCC_OscConfig+0x22e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c02:	68e3      	ldr	r3, [r4, #12]
 8000c04:	f003 0303 	and.w	r3, r3, #3
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d114      	bne.n	8000c36 <HAL_RCC_OscConfig+0x22e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c0c:	6823      	ldr	r3, [r4, #0]
 8000c0e:	055b      	lsls	r3, r3, #21
 8000c10:	d503      	bpl.n	8000c1a <HAL_RCC_OscConfig+0x212>
 8000c12:	68eb      	ldr	r3, [r5, #12]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	f43f af07 	beq.w	8000a28 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c1a:	6861      	ldr	r1, [r4, #4]
 8000c1c:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 8000c20:	fa93 f3a3 	rbit	r3, r3
 8000c24:	fab3 f283 	clz	r2, r3
 8000c28:	692b      	ldr	r3, [r5, #16]
 8000c2a:	4093      	lsls	r3, r2
 8000c2c:	f021 52f8 	bic.w	r2, r1, #520093696	; 0x1f000000
 8000c30:	4313      	orrs	r3, r2
 8000c32:	6063      	str	r3, [r4, #4]
 8000c34:	e737      	b.n	8000aa6 <HAL_RCC_OscConfig+0x9e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c36:	68eb      	ldr	r3, [r5, #12]
 8000c38:	b17b      	cbz	r3, 8000c5a <HAL_RCC_OscConfig+0x252>
        __HAL_RCC_HSI_ENABLE();
 8000c3a:	6823      	ldr	r3, [r4, #0]
 8000c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c40:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c42:	f7ff fc77 	bl	8000534 <HAL_GetTick>
 8000c46:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000c48:	6823      	ldr	r3, [r4, #0]
 8000c4a:	055f      	lsls	r7, r3, #21
 8000c4c:	d4e5      	bmi.n	8000c1a <HAL_RCC_OscConfig+0x212>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c4e:	f7ff fc71 	bl	8000534 <HAL_GetTick>
 8000c52:	1b80      	subs	r0, r0, r6
 8000c54:	2802      	cmp	r0, #2
 8000c56:	d9f7      	bls.n	8000c48 <HAL_RCC_OscConfig+0x240>
 8000c58:	e76b      	b.n	8000b32 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_DISABLE();
 8000c5a:	6823      	ldr	r3, [r4, #0]
 8000c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c60:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c62:	f7ff fc67 	bl	8000534 <HAL_GetTick>
 8000c66:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8000c68:	6823      	ldr	r3, [r4, #0]
 8000c6a:	0558      	lsls	r0, r3, #21
 8000c6c:	f57f af1b 	bpl.w	8000aa6 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c70:	f7ff fc60 	bl	8000534 <HAL_GetTick>
 8000c74:	1b80      	subs	r0, r0, r6
 8000c76:	2802      	cmp	r0, #2
 8000c78:	d9f6      	bls.n	8000c68 <HAL_RCC_OscConfig+0x260>
 8000c7a:	e75a      	b.n	8000b32 <HAL_RCC_OscConfig+0x12a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c7c:	696b      	ldr	r3, [r5, #20]
 8000c7e:	4c0b      	ldr	r4, [pc, #44]	; (8000cac <HAL_RCC_OscConfig+0x2a4>)
 8000c80:	b1d3      	cbz	r3, 8000cb8 <HAL_RCC_OscConfig+0x2b0>
      __HAL_RCC_LSI_ENABLE();
 8000c82:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000c8e:	f7ff fc51 	bl	8000534 <HAL_GetTick>
 8000c92:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8000c94:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000c98:	079b      	lsls	r3, r3, #30
 8000c9a:	f53f af08 	bmi.w	8000aae <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c9e:	f7ff fc49 	bl	8000534 <HAL_GetTick>
 8000ca2:	1b80      	subs	r0, r0, r6
 8000ca4:	2802      	cmp	r0, #2
 8000ca6:	d9f5      	bls.n	8000c94 <HAL_RCC_OscConfig+0x28c>
 8000ca8:	e743      	b.n	8000b32 <HAL_RCC_OscConfig+0x12a>
 8000caa:	bf00      	nop
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	080023c1 	.word	0x080023c1
 8000cb4:	20000000 	.word	0x20000000
      __HAL_RCC_LSI_DISABLE();
 8000cb8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000cbc:	f023 0301 	bic.w	r3, r3, #1
 8000cc0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000cc4:	f7ff fc36 	bl	8000534 <HAL_GetTick>
 8000cc8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8000cca:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000cce:	079f      	lsls	r7, r3, #30
 8000cd0:	f57f aeed 	bpl.w	8000aae <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cd4:	f7ff fc2e 	bl	8000534 <HAL_GetTick>
 8000cd8:	1b80      	subs	r0, r0, r6
 8000cda:	2802      	cmp	r0, #2
 8000cdc:	d9f5      	bls.n	8000cca <HAL_RCC_OscConfig+0x2c2>
 8000cde:	e728      	b.n	8000b32 <HAL_RCC_OscConfig+0x12a>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000ce0:	4c66      	ldr	r4, [pc, #408]	; (8000e7c <HAL_RCC_OscConfig+0x474>)
 8000ce2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000ce4:	00de      	lsls	r6, r3, #3
 8000ce6:	d427      	bmi.n	8000d38 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ce8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cee:	65a3      	str	r3, [r4, #88]	; 0x58
 8000cf0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	9301      	str	r3, [sp, #4]
 8000cf8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000cfa:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000cfc:	4e60      	ldr	r6, [pc, #384]	; (8000e80 <HAL_RCC_OscConfig+0x478>)
 8000cfe:	6833      	ldr	r3, [r6, #0]
 8000d00:	05d8      	lsls	r0, r3, #23
 8000d02:	d51b      	bpl.n	8000d3c <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d04:	68ab      	ldr	r3, [r5, #8]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d129      	bne.n	8000d5e <HAL_RCC_OscConfig+0x356>
 8000d0a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000d16:	f7ff fc0d 	bl	8000534 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d1a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d1e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8000d20:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d24:	079a      	lsls	r2, r3, #30
 8000d26:	d540      	bpl.n	8000daa <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8000d28:	2f00      	cmp	r7, #0
 8000d2a:	f43f aec4 	beq.w	8000ab6 <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d34:	65a3      	str	r3, [r4, #88]	; 0x58
 8000d36:	e6be      	b.n	8000ab6 <HAL_RCC_OscConfig+0xae>
    FlagStatus       pwrclkchanged = RESET;
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e7df      	b.n	8000cfc <HAL_RCC_OscConfig+0x2f4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d3c:	6833      	ldr	r3, [r6, #0]
 8000d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d42:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000d44:	f7ff fbf6 	bl	8000534 <HAL_GetTick>
 8000d48:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d4a:	6833      	ldr	r3, [r6, #0]
 8000d4c:	05d9      	lsls	r1, r3, #23
 8000d4e:	d4d9      	bmi.n	8000d04 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d50:	f7ff fbf0 	bl	8000534 <HAL_GetTick>
 8000d54:	eba0 0008 	sub.w	r0, r0, r8
 8000d58:	2802      	cmp	r0, #2
 8000d5a:	d9f6      	bls.n	8000d4a <HAL_RCC_OscConfig+0x342>
 8000d5c:	e6e9      	b.n	8000b32 <HAL_RCC_OscConfig+0x12a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d5e:	2b05      	cmp	r3, #5
 8000d60:	d106      	bne.n	8000d70 <HAL_RCC_OscConfig+0x368>
 8000d62:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d66:	f043 0304 	orr.w	r3, r3, #4
 8000d6a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8000d6e:	e7cc      	b.n	8000d0a <HAL_RCC_OscConfig+0x302>
 8000d70:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000d74:	f022 0201 	bic.w	r2, r2, #1
 8000d78:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000d7c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000d80:	f022 0204 	bic.w	r2, r2, #4
 8000d84:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d1c4      	bne.n	8000d16 <HAL_RCC_OscConfig+0x30e>
      tickstart = HAL_GetTick();
 8000d8c:	f7ff fbd2 	bl	8000534 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d90:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d94:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8000d96:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000d9a:	079b      	lsls	r3, r3, #30
 8000d9c:	d5c4      	bpl.n	8000d28 <HAL_RCC_OscConfig+0x320>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d9e:	f7ff fbc9 	bl	8000534 <HAL_GetTick>
 8000da2:	1b80      	subs	r0, r0, r6
 8000da4:	4540      	cmp	r0, r8
 8000da6:	d9f6      	bls.n	8000d96 <HAL_RCC_OscConfig+0x38e>
 8000da8:	e6c3      	b.n	8000b32 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000daa:	f7ff fbc3 	bl	8000534 <HAL_GetTick>
 8000dae:	1b80      	subs	r0, r0, r6
 8000db0:	4540      	cmp	r0, r8
 8000db2:	d9b5      	bls.n	8000d20 <HAL_RCC_OscConfig+0x318>
 8000db4:	e6bd      	b.n	8000b32 <HAL_RCC_OscConfig+0x12a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000db6:	4c31      	ldr	r4, [pc, #196]	; (8000e7c <HAL_RCC_OscConfig+0x474>)
 8000db8:	68a3      	ldr	r3, [r4, #8]
 8000dba:	f003 030c 	and.w	r3, r3, #12
 8000dbe:	2b0c      	cmp	r3, #12
 8000dc0:	f43f ae32 	beq.w	8000a28 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8000dc4:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000dc6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000dc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000dcc:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000dce:	d137      	bne.n	8000e40 <HAL_RCC_OscConfig+0x438>
        tickstart = HAL_GetTick();
 8000dd0:	f7ff fbb0 	bl	8000534 <HAL_GetTick>
 8000dd4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000dd6:	6823      	ldr	r3, [r4, #0]
 8000dd8:	019f      	lsls	r7, r3, #6
 8000dda:	d42b      	bmi.n	8000e34 <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ddc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000dde:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000de0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000de4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000de6:	3a01      	subs	r2, #1
 8000de8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000dec:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000dee:	0912      	lsrs	r2, r2, #4
 8000df0:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000df4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000df6:	0852      	lsrs	r2, r2, #1
 8000df8:	3a01      	subs	r2, #1
 8000dfa:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8000dfe:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000e00:	0852      	lsrs	r2, r2, #1
 8000e02:	3a01      	subs	r2, #1
 8000e04:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000e08:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000e0a:	6823      	ldr	r3, [r4, #0]
 8000e0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e10:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000e12:	68e3      	ldr	r3, [r4, #12]
 8000e14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e18:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000e1a:	f7ff fb8b 	bl	8000534 <HAL_GetTick>
 8000e1e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000e20:	6823      	ldr	r3, [r4, #0]
 8000e22:	0198      	lsls	r0, r3, #6
 8000e24:	f53f ae4b 	bmi.w	8000abe <HAL_RCC_OscConfig+0xb6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e28:	f7ff fb84 	bl	8000534 <HAL_GetTick>
 8000e2c:	1b40      	subs	r0, r0, r5
 8000e2e:	2802      	cmp	r0, #2
 8000e30:	d9f6      	bls.n	8000e20 <HAL_RCC_OscConfig+0x418>
 8000e32:	e67e      	b.n	8000b32 <HAL_RCC_OscConfig+0x12a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e34:	f7ff fb7e 	bl	8000534 <HAL_GetTick>
 8000e38:	1b80      	subs	r0, r0, r6
 8000e3a:	2802      	cmp	r0, #2
 8000e3c:	d9cb      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x3ce>
 8000e3e:	e678      	b.n	8000b32 <HAL_RCC_OscConfig+0x12a>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8000e40:	6823      	ldr	r3, [r4, #0]
 8000e42:	0119      	lsls	r1, r3, #4
 8000e44:	d406      	bmi.n	8000e54 <HAL_RCC_OscConfig+0x44c>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8000e46:	6823      	ldr	r3, [r4, #0]
           && 
 8000e48:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000e4a:	bf5e      	ittt	pl
 8000e4c:	68e3      	ldrpl	r3, [r4, #12]
 8000e4e:	f023 0303 	bicpl.w	r3, r3, #3
 8000e52:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000e54:	68e3      	ldr	r3, [r4, #12]
 8000e56:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e5e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8000e60:	f7ff fb68 	bl	8000534 <HAL_GetTick>
 8000e64:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000e66:	6823      	ldr	r3, [r4, #0]
 8000e68:	019b      	lsls	r3, r3, #6
 8000e6a:	f57f ae28 	bpl.w	8000abe <HAL_RCC_OscConfig+0xb6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e6e:	f7ff fb61 	bl	8000534 <HAL_GetTick>
 8000e72:	1b40      	subs	r0, r0, r5
 8000e74:	2802      	cmp	r0, #2
 8000e76:	d9f6      	bls.n	8000e66 <HAL_RCC_OscConfig+0x45e>
 8000e78:	e65b      	b.n	8000b32 <HAL_RCC_OscConfig+0x12a>
 8000e7a:	bf00      	nop
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40007000 	.word	0x40007000

08000e84 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e84:	4a59      	ldr	r2, [pc, #356]	; (8000fec <HAL_RCC_ClockConfig+0x168>)
 8000e86:	6813      	ldr	r3, [r2, #0]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	428b      	cmp	r3, r1
{
 8000e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e92:	4605      	mov	r5, r0
 8000e94:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e96:	d330      	bcc.n	8000efa <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e98:	682a      	ldr	r2, [r5, #0]
 8000e9a:	0791      	lsls	r1, r2, #30
 8000e9c:	d43a      	bmi.n	8000f14 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e9e:	07d2      	lsls	r2, r2, #31
 8000ea0:	d440      	bmi.n	8000f24 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ea2:	4a52      	ldr	r2, [pc, #328]	; (8000fec <HAL_RCC_ClockConfig+0x168>)
 8000ea4:	6813      	ldr	r3, [r2, #0]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	429e      	cmp	r6, r3
 8000eac:	f0c0 808c 	bcc.w	8000fc8 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eb0:	682a      	ldr	r2, [r5, #0]
 8000eb2:	4c4f      	ldr	r4, [pc, #316]	; (8000ff0 <HAL_RCC_ClockConfig+0x16c>)
 8000eb4:	f012 0f04 	tst.w	r2, #4
 8000eb8:	f040 8091 	bne.w	8000fde <HAL_RCC_ClockConfig+0x15a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ebc:	0713      	lsls	r3, r2, #28
 8000ebe:	d506      	bpl.n	8000ece <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ec0:	68a3      	ldr	r3, [r4, #8]
 8000ec2:	692a      	ldr	r2, [r5, #16]
 8000ec4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000ec8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ecc:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000ece:	f7ff fd05 	bl	80008dc <HAL_RCC_GetSysClockFreq>
 8000ed2:	68a3      	ldr	r3, [r4, #8]
 8000ed4:	22f0      	movs	r2, #240	; 0xf0
 8000ed6:	fa92 f2a2 	rbit	r2, r2
 8000eda:	fab2 f282 	clz	r2, r2
 8000ede:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ee2:	40d3      	lsrs	r3, r2
 8000ee4:	4a43      	ldr	r2, [pc, #268]	; (8000ff4 <HAL_RCC_ClockConfig+0x170>)
 8000ee6:	5cd3      	ldrb	r3, [r2, r3]
 8000ee8:	40d8      	lsrs	r0, r3
 8000eea:	4b43      	ldr	r3, [pc, #268]	; (8000ff8 <HAL_RCC_ClockConfig+0x174>)
 8000eec:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f7ff faf2 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8000ef4:	2000      	movs	r0, #0
}
 8000ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000efa:	6813      	ldr	r3, [r2, #0]
 8000efc:	f023 0307 	bic.w	r3, r3, #7
 8000f00:	430b      	orrs	r3, r1
 8000f02:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f04:	6813      	ldr	r3, [r2, #0]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d0c4      	beq.n	8000e98 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000f0e:	2001      	movs	r0, #1
 8000f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f14:	4936      	ldr	r1, [pc, #216]	; (8000ff0 <HAL_RCC_ClockConfig+0x16c>)
 8000f16:	68a8      	ldr	r0, [r5, #8]
 8000f18:	688b      	ldr	r3, [r1, #8]
 8000f1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f1e:	4303      	orrs	r3, r0
 8000f20:	608b      	str	r3, [r1, #8]
 8000f22:	e7bc      	b.n	8000e9e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f24:	686a      	ldr	r2, [r5, #4]
 8000f26:	4c32      	ldr	r4, [pc, #200]	; (8000ff0 <HAL_RCC_ClockConfig+0x16c>)
 8000f28:	2a02      	cmp	r2, #2
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000f2a:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f2c:	d11c      	bne.n	8000f68 <HAL_RCC_ClockConfig+0xe4>
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000f2e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000f32:	d0ec      	beq.n	8000f0e <HAL_RCC_ClockConfig+0x8a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000f34:	68a3      	ldr	r3, [r4, #8]
 8000f36:	f023 0303 	bic.w	r3, r3, #3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8000f3e:	f7ff faf9 	bl	8000534 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f42:	686b      	ldr	r3, [r5, #4]
 8000f44:	2b02      	cmp	r3, #2
    tickstart = HAL_GetTick();
 8000f46:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f48:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f4c:	d118      	bne.n	8000f80 <HAL_RCC_ClockConfig+0xfc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8000f4e:	68a3      	ldr	r3, [r4, #8]
 8000f50:	f003 030c 	and.w	r3, r3, #12
 8000f54:	2b08      	cmp	r3, #8
 8000f56:	d0a4      	beq.n	8000ea2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f58:	f7ff faec 	bl	8000534 <HAL_GetTick>
 8000f5c:	1bc0      	subs	r0, r0, r7
 8000f5e:	4540      	cmp	r0, r8
 8000f60:	d9f5      	bls.n	8000f4e <HAL_RCC_ClockConfig+0xca>
          return HAL_TIMEOUT;
 8000f62:	2003      	movs	r0, #3
 8000f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f68:	2a03      	cmp	r2, #3
 8000f6a:	d102      	bne.n	8000f72 <HAL_RCC_ClockConfig+0xee>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000f6c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f70:	e7df      	b.n	8000f32 <HAL_RCC_ClockConfig+0xae>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000f72:	b912      	cbnz	r2, 8000f7a <HAL_RCC_ClockConfig+0xf6>
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000f74:	f013 0f02 	tst.w	r3, #2
 8000f78:	e7db      	b.n	8000f32 <HAL_RCC_ClockConfig+0xae>
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000f7a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000f7e:	e7d8      	b.n	8000f32 <HAL_RCC_ClockConfig+0xae>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f80:	2b03      	cmp	r3, #3
 8000f82:	d10a      	bne.n	8000f9a <HAL_RCC_ClockConfig+0x116>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f84:	68a3      	ldr	r3, [r4, #8]
 8000f86:	f003 030c 	and.w	r3, r3, #12
 8000f8a:	2b0c      	cmp	r3, #12
 8000f8c:	d089      	beq.n	8000ea2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f8e:	f7ff fad1 	bl	8000534 <HAL_GetTick>
 8000f92:	1bc0      	subs	r0, r0, r7
 8000f94:	4540      	cmp	r0, r8
 8000f96:	d9f5      	bls.n	8000f84 <HAL_RCC_ClockConfig+0x100>
 8000f98:	e7e3      	b.n	8000f62 <HAL_RCC_ClockConfig+0xde>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000f9a:	b97b      	cbnz	r3, 8000fbc <HAL_RCC_ClockConfig+0x138>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8000f9c:	68a3      	ldr	r3, [r4, #8]
 8000f9e:	f013 0f0c 	tst.w	r3, #12
 8000fa2:	f43f af7e 	beq.w	8000ea2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fa6:	f7ff fac5 	bl	8000534 <HAL_GetTick>
 8000faa:	1bc0      	subs	r0, r0, r7
 8000fac:	4540      	cmp	r0, r8
 8000fae:	d9f5      	bls.n	8000f9c <HAL_RCC_ClockConfig+0x118>
 8000fb0:	e7d7      	b.n	8000f62 <HAL_RCC_ClockConfig+0xde>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fb2:	f7ff fabf 	bl	8000534 <HAL_GetTick>
 8000fb6:	1bc0      	subs	r0, r0, r7
 8000fb8:	4540      	cmp	r0, r8
 8000fba:	d8d2      	bhi.n	8000f62 <HAL_RCC_ClockConfig+0xde>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8000fbc:	68a3      	ldr	r3, [r4, #8]
 8000fbe:	f003 030c 	and.w	r3, r3, #12
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	d1f5      	bne.n	8000fb2 <HAL_RCC_ClockConfig+0x12e>
 8000fc6:	e76c      	b.n	8000ea2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fc8:	6813      	ldr	r3, [r2, #0]
 8000fca:	f023 0307 	bic.w	r3, r3, #7
 8000fce:	4333      	orrs	r3, r6
 8000fd0:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fd2:	6813      	ldr	r3, [r2, #0]
 8000fd4:	f003 0307 	and.w	r3, r3, #7
 8000fd8:	429e      	cmp	r6, r3
 8000fda:	d198      	bne.n	8000f0e <HAL_RCC_ClockConfig+0x8a>
 8000fdc:	e768      	b.n	8000eb0 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fde:	68a3      	ldr	r3, [r4, #8]
 8000fe0:	68e9      	ldr	r1, [r5, #12]
 8000fe2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fe6:	430b      	orrs	r3, r1
 8000fe8:	60a3      	str	r3, [r4, #8]
 8000fea:	e767      	b.n	8000ebc <HAL_RCC_ClockConfig+0x38>
 8000fec:	40022000 	.word	0x40022000
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	080023c1 	.word	0x080023c1
 8000ff8:	20000000 	.word	0x20000000

08000ffc <HAL_RCC_GetHCLKFreq>:
}
 8000ffc:	4b01      	ldr	r3, [pc, #4]	; (8001004 <HAL_RCC_GetHCLKFreq+0x8>)
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000000 	.word	0x20000000

08001008 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <HAL_RCC_GetPCLK1Freq+0x24>)
 800100a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	fa92 f2a2 	rbit	r2, r2
 8001014:	fab2 f282 	clz	r2, r2
 8001018:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800101c:	40d3      	lsrs	r3, r2
 800101e:	4a04      	ldr	r2, [pc, #16]	; (8001030 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001020:	5cd3      	ldrb	r3, [r2, r3]
 8001022:	4a04      	ldr	r2, [pc, #16]	; (8001034 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001024:	6810      	ldr	r0, [r2, #0]
}
 8001026:	40d8      	lsrs	r0, r3
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40021000 	.word	0x40021000
 8001030:	080023d1 	.word	0x080023d1
 8001034:	20000000 	.word	0x20000000

08001038 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <HAL_RCC_GetPCLK2Freq+0x24>)
 800103a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	fa92 f2a2 	rbit	r2, r2
 8001044:	fab2 f282 	clz	r2, r2
 8001048:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800104c:	40d3      	lsrs	r3, r2
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001050:	5cd3      	ldrb	r3, [r2, r3]
 8001052:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001054:	6810      	ldr	r0, [r2, #0]
}
 8001056:	40d8      	lsrs	r0, r3
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000
 8001060:	080023d1 	.word	0x080023d1
 8001064:	20000000 	.word	0x20000000

08001068 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800106a:	4b59      	ldr	r3, [pc, #356]	; (80011d0 <RCCEx_PLLSAI1_Config+0x168>)
 800106c:	68da      	ldr	r2, [r3, #12]
 800106e:	f012 0f03 	tst.w	r2, #3
{
 8001072:	4604      	mov	r4, r0
 8001074:	460e      	mov	r6, r1
 8001076:	461d      	mov	r5, r3
 8001078:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800107a:	d03b      	beq.n	80010f4 <RCCEx_PLLSAI1_Config+0x8c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800107c:	68da      	ldr	r2, [r3, #12]
 800107e:	f002 0203 	and.w	r2, r2, #3
 8001082:	4282      	cmp	r2, r0
 8001084:	d152      	bne.n	800112c <RCCEx_PLLSAI1_Config+0xc4>
       || 
 8001086:	2a00      	cmp	r2, #0
 8001088:	d050      	beq.n	800112c <RCCEx_PLLSAI1_Config+0xc4>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	2270      	movs	r2, #112	; 0x70
 800108e:	fa92 f2a2 	rbit	r2, r2
 8001092:	fab2 f282 	clz	r2, r2
 8001096:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800109a:	40d3      	lsrs	r3, r2
       || 
 800109c:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
 800109e:	3301      	adds	r3, #1
       || 
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d143      	bne.n	800112c <RCCEx_PLLSAI1_Config+0xc4>
  }
  
  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80010a4:	682b      	ldr	r3, [r5, #0]
 80010a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80010aa:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80010ac:	f7ff fa42 	bl	8000534 <HAL_GetTick>
 80010b0:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80010b2:	682b      	ldr	r3, [r5, #0]
 80010b4:	011a      	lsls	r2, r3, #4
 80010b6:	d442      	bmi.n	800113e <RCCEx_PLLSAI1_Config+0xd6>
 80010b8:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 80010bc:	68a1      	ldr	r1, [r4, #8]
      }
    }

    if(status == HAL_OK)    
    {
      if(Divider == DIVIDER_P_UPDATE)
 80010be:	2e00      	cmp	r6, #0
 80010c0:	d044      	beq.n	800114c <RCCEx_PLLSAI1_Config+0xe4>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80010c2:	2e01      	cmp	r6, #1
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 80010c4:	6928      	ldr	r0, [r5, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 80010c6:	d168      	bne.n	800119a <RCCEx_PLLSAI1_Config+0x132>
 80010c8:	fa93 f3a3 	rbit	r3, r3
 80010cc:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 80010d0:	fab3 f383 	clz	r3, r3
 80010d4:	fa92 f2a2 	rbit	r2, r2
 80010d8:	fab2 f682 	clz	r6, r2
 80010dc:	6922      	ldr	r2, [r4, #16]
 80010de:	0852      	lsrs	r2, r2, #1
 80010e0:	3a01      	subs	r2, #1
 80010e2:	40b2      	lsls	r2, r6
 80010e4:	fa01 f303 	lsl.w	r3, r1, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	f420 02c0 	bic.w	r2, r0, #6291456	; 0x600000
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 80010ee:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80010f2:	e040      	b.n	8001176 <RCCEx_PLLSAI1_Config+0x10e>
    switch(PllSai1->PLLSAI1Source)
 80010f4:	2802      	cmp	r0, #2
 80010f6:	d015      	beq.n	8001124 <RCCEx_PLLSAI1_Config+0xbc>
 80010f8:	2803      	cmp	r0, #3
 80010fa:	d019      	beq.n	8001130 <RCCEx_PLLSAI1_Config+0xc8>
 80010fc:	2801      	cmp	r0, #1
 80010fe:	d115      	bne.n	800112c <RCCEx_PLLSAI1_Config+0xc4>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	079f      	lsls	r7, r3, #30
 8001104:	d548      	bpl.n	8001198 <RCCEx_PLLSAI1_Config+0x130>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 8001106:	68ea      	ldr	r2, [r5, #12]
 8001108:	2370      	movs	r3, #112	; 0x70
 800110a:	fa93 f3a3 	rbit	r3, r3
 800110e:	fab3 f183 	clz	r1, r3
 8001112:	6863      	ldr	r3, [r4, #4]
 8001114:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8001118:	3b01      	subs	r3, #1
 800111a:	408b      	lsls	r3, r1
 800111c:	4310      	orrs	r0, r2
 800111e:	4318      	orrs	r0, r3
 8001120:	60e8      	str	r0, [r5, #12]
 8001122:	e7bf      	b.n	80010a4 <RCCEx_PLLSAI1_Config+0x3c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800112a:	d1ec      	bne.n	8001106 <RCCEx_PLLSAI1_Config+0x9e>
 800112c:	2001      	movs	r0, #1
 800112e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	0391      	lsls	r1, r2, #14
 8001134:	d4e7      	bmi.n	8001106 <RCCEx_PLLSAI1_Config+0x9e>
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800113c:	e7f5      	b.n	800112a <RCCEx_PLLSAI1_Config+0xc2>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800113e:	f7ff f9f9 	bl	8000534 <HAL_GetTick>
 8001142:	1bc0      	subs	r0, r0, r7
 8001144:	2802      	cmp	r0, #2
 8001146:	d9b4      	bls.n	80010b2 <RCCEx_PLLSAI1_Config+0x4a>
        status = HAL_TIMEOUT;
 8001148:	2003      	movs	r0, #3
 800114a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 800114c:	6928      	ldr	r0, [r5, #16]
 800114e:	fa93 f3a3 	rbit	r3, r3
 8001152:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001156:	fab3 f383 	clz	r3, r3
 800115a:	fa92 f2a2 	rbit	r2, r2
 800115e:	fab2 f682 	clz	r6, r2
 8001162:	68e2      	ldr	r2, [r4, #12]
 8001164:	0912      	lsrs	r2, r2, #4
 8001166:	40b2      	lsls	r2, r6
 8001168:	fa01 f303 	lsl.w	r3, r1, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	f420 321f 	bic.w	r2, r0, #162816	; 0x27c00
 8001172:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8001176:	4313      	orrs	r3, r2
 8001178:	612b      	str	r3, [r5, #16]
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1R)));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800117a:	682b      	ldr	r3, [r5, #0]
 800117c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001180:	602b      	str	r3, [r5, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001182:	f7ff f9d7 	bl	8000534 <HAL_GetTick>
 8001186:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001188:	682b      	ldr	r3, [r5, #0]
 800118a:	011b      	lsls	r3, r3, #4
 800118c:	d519      	bpl.n	80011c2 <RCCEx_PLLSAI1_Config+0x15a>
      }

      if(status == HAL_OK)    
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800118e:	692b      	ldr	r3, [r5, #16]
 8001190:	69a2      	ldr	r2, [r4, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	612b      	str	r3, [r5, #16]
 8001196:	2000      	movs	r0, #0
      }
    }
  }
  
  return status;
}
 8001198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800119a:	fa93 f3a3 	rbit	r3, r3
 800119e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 80011a2:	fab3 f383 	clz	r3, r3
 80011a6:	fa92 f2a2 	rbit	r2, r2
 80011aa:	fab2 f682 	clz	r6, r2
 80011ae:	6962      	ldr	r2, [r4, #20]
 80011b0:	0852      	lsrs	r2, r2, #1
 80011b2:	3a01      	subs	r2, #1
 80011b4:	40b2      	lsls	r2, r6
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	f020 62c0 	bic.w	r2, r0, #100663296	; 0x6000000
 80011c0:	e795      	b.n	80010ee <RCCEx_PLLSAI1_Config+0x86>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80011c2:	f7ff f9b7 	bl	8000534 <HAL_GetTick>
 80011c6:	1b80      	subs	r0, r0, r6
 80011c8:	2802      	cmp	r0, #2
 80011ca:	d9dd      	bls.n	8001188 <RCCEx_PLLSAI1_Config+0x120>
 80011cc:	e7bc      	b.n	8001148 <RCCEx_PLLSAI1_Config+0xe0>
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000

080011d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80011d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));
  
  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80011d6:	4b4e      	ldr	r3, [pc, #312]	; (8001310 <RCCEx_PLLSAI2_Config+0x13c>)
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	f012 0f03 	tst.w	r2, #3
{
 80011de:	4605      	mov	r5, r0
 80011e0:	460e      	mov	r6, r1
 80011e2:	461c      	mov	r4, r3
 80011e4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80011e6:	d039      	beq.n	800125c <RCCEx_PLLSAI2_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80011e8:	68da      	ldr	r2, [r3, #12]
 80011ea:	f002 0203 	and.w	r2, r2, #3
 80011ee:	4282      	cmp	r2, r0
 80011f0:	d150      	bne.n	8001294 <RCCEx_PLLSAI2_Config+0xc0>
       || 
 80011f2:	2a00      	cmp	r2, #0
 80011f4:	d04e      	beq.n	8001294 <RCCEx_PLLSAI2_Config+0xc0>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai2->PLLSAI2M)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	2270      	movs	r2, #112	; 0x70
 80011fa:	fa92 f2a2 	rbit	r2, r2
 80011fe:	fab2 f282 	clz	r2, r2
 8001202:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001206:	40d3      	lsrs	r3, r2
       || 
 8001208:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai2->PLLSAI2M)
 800120a:	3301      	adds	r3, #1
       || 
 800120c:	4293      	cmp	r3, r2
 800120e:	d141      	bne.n	8001294 <RCCEx_PLLSAI2_Config+0xc0>
  }
  
  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001210:	6823      	ldr	r3, [r4, #0]
 8001212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001216:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001218:	f7ff f98c 	bl	8000534 <HAL_GetTick>
 800121c:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 800121e:	6823      	ldr	r3, [r4, #0]
 8001220:	009a      	lsls	r2, r3, #2
 8001222:	d440      	bmi.n	80012a6 <RCCEx_PLLSAI2_Config+0xd2>
 8001224:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 8001228:	68a9      	ldr	r1, [r5, #8]
      }
    }

    if(status == HAL_OK)    
    {
      if(Divider == DIVIDER_P_UPDATE)
 800122a:	2e00      	cmp	r6, #0
 800122c:	d042      	beq.n	80012b4 <RCCEx_PLLSAI2_Config+0xe0>
      }
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR, 
 800122e:	6960      	ldr	r0, [r4, #20]
 8001230:	fa93 f3a3 	rbit	r3, r3
 8001234:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001238:	fab3 f383 	clz	r3, r3
 800123c:	fa92 f2a2 	rbit	r2, r2
 8001240:	fab2 f682 	clz	r6, r2
 8001244:	692a      	ldr	r2, [r5, #16]
 8001246:	0852      	lsrs	r2, r2, #1
 8001248:	3a01      	subs	r2, #1
 800124a:	40b2      	lsls	r2, r6
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	4313      	orrs	r3, r2
 8001252:	f020 62c0 	bic.w	r2, r0, #100663296	; 0x6000000
 8001256:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800125a:	e040      	b.n	80012de <RCCEx_PLLSAI2_Config+0x10a>
    switch(PllSai2->PLLSAI2Source)
 800125c:	2802      	cmp	r0, #2
 800125e:	d015      	beq.n	800128c <RCCEx_PLLSAI2_Config+0xb8>
 8001260:	2803      	cmp	r0, #3
 8001262:	d019      	beq.n	8001298 <RCCEx_PLLSAI2_Config+0xc4>
 8001264:	2801      	cmp	r0, #1
 8001266:	d115      	bne.n	8001294 <RCCEx_PLLSAI2_Config+0xc0>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	079f      	lsls	r7, r3, #30
 800126c:	d548      	bpl.n	8001300 <RCCEx_PLLSAI2_Config+0x12c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 800126e:	68e2      	ldr	r2, [r4, #12]
 8001270:	2370      	movs	r3, #112	; 0x70
 8001272:	fa93 f3a3 	rbit	r3, r3
 8001276:	fab3 f183 	clz	r1, r3
 800127a:	686b      	ldr	r3, [r5, #4]
 800127c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8001280:	3b01      	subs	r3, #1
 8001282:	408b      	lsls	r3, r1
 8001284:	4310      	orrs	r0, r2
 8001286:	4318      	orrs	r0, r3
 8001288:	60e0      	str	r0, [r4, #12]
 800128a:	e7c1      	b.n	8001210 <RCCEx_PLLSAI2_Config+0x3c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001292:	d1ec      	bne.n	800126e <RCCEx_PLLSAI2_Config+0x9a>
 8001294:	2001      	movs	r0, #1
 8001296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	0391      	lsls	r1, r2, #14
 800129c:	d4e7      	bmi.n	800126e <RCCEx_PLLSAI2_Config+0x9a>
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80012a4:	e7f5      	b.n	8001292 <RCCEx_PLLSAI2_Config+0xbe>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80012a6:	f7ff f945 	bl	8000534 <HAL_GetTick>
 80012aa:	1bc0      	subs	r0, r0, r7
 80012ac:	2802      	cmp	r0, #2
 80012ae:	d9b6      	bls.n	800121e <RCCEx_PLLSAI2_Config+0x4a>
        status = HAL_TIMEOUT;
 80012b0:	2003      	movs	r0, #3
 80012b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR, 
 80012b4:	6960      	ldr	r0, [r4, #20]
 80012b6:	fa93 f3a3 	rbit	r3, r3
 80012ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012be:	fab3 f383 	clz	r3, r3
 80012c2:	fa92 f2a2 	rbit	r2, r2
 80012c6:	fab2 f682 	clz	r6, r2
 80012ca:	68ea      	ldr	r2, [r5, #12]
 80012cc:	0912      	lsrs	r2, r2, #4
 80012ce:	40b2      	lsls	r2, r6
 80012d0:	fa01 f303 	lsl.w	r3, r1, r3
 80012d4:	4313      	orrs	r3, r2
 80012d6:	f420 321f 	bic.w	r2, r0, #162816	; 0x27c00
 80012da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        MODIFY_REG(RCC->PLLSAI2CFGR, 
 80012de:	4313      	orrs	r3, r2
 80012e0:	6163      	str	r3, [r4, #20]
                   (PllSai2->PLLSAI2N << POSITION_VAL(RCC_PLLSAI2CFGR_PLLSAI2N)) | 
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI2CFGR_PLLSAI2R)));
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80012e2:	6823      	ldr	r3, [r4, #0]
 80012e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e8:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ea:	f7ff f923 	bl	8000534 <HAL_GetTick>
 80012ee:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 80012f0:	6823      	ldr	r3, [r4, #0]
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	d505      	bpl.n	8001302 <RCCEx_PLLSAI2_Config+0x12e>
      }

      if(status == HAL_OK)    
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80012f6:	6963      	ldr	r3, [r4, #20]
 80012f8:	696a      	ldr	r2, [r5, #20]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	6163      	str	r3, [r4, #20]
 80012fe:	2000      	movs	r0, #0
      }
    }
  }
  
  return status;
}
 8001300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001302:	f7ff f917 	bl	8000534 <HAL_GetTick>
 8001306:	1b80      	subs	r0, r0, r6
 8001308:	2802      	cmp	r0, #2
 800130a:	d9f1      	bls.n	80012f0 <RCCEx_PLLSAI2_Config+0x11c>
 800130c:	e7d0      	b.n	80012b0 <RCCEx_PLLSAI2_Config+0xdc>
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000

08001314 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001314:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001318:	6806      	ldr	r6, [r0, #0]
 800131a:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 800131e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001320:	d024      	beq.n	800136c <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001322:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001324:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001328:	d02c      	beq.n	8001384 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800132a:	d802      	bhi.n	8001332 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800132c:	b1c1      	cbz	r1, 8001360 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 800132e:	2601      	movs	r6, #1
 8001330:	e01c      	b.n	800136c <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001332:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001336:	d00d      	beq.n	8001354 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001338:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800133c:	d1f7      	bne.n	800132e <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800133e:	4a53      	ldr	r2, [pc, #332]	; (800148c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001340:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001342:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001346:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800134a:	430b      	orrs	r3, r1
 800134c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001350:	2600      	movs	r6, #0
 8001352:	e00b      	b.n	800136c <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001354:	4a4d      	ldr	r2, [pc, #308]	; (800148c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001356:	68d3      	ldr	r3, [r2, #12]
 8001358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800135c:	60d3      	str	r3, [r2, #12]
      break;
 800135e:	e7ee      	b.n	800133e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001360:	3004      	adds	r0, #4
 8001362:	f7ff fe81 	bl	8001068 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001366:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001368:	2800      	cmp	r0, #0
 800136a:	d0e8      	beq.n	800133e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800136c:	6823      	ldr	r3, [r4, #0]
 800136e:	04d8      	lsls	r0, r3, #19
 8001370:	d506      	bpl.n	8001380 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001372:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001374:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8001378:	d07c      	beq.n	8001474 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800137a:	d808      	bhi.n	800138e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800137c:	b1a9      	cbz	r1, 80013aa <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 800137e:	2601      	movs	r6, #1
 8001380:	4635      	mov	r5, r6
 8001382:	e021      	b.n	80013c8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001384:	2100      	movs	r1, #0
 8001386:	3020      	adds	r0, #32
 8001388:	f7ff ff24 	bl	80011d4 <RCCEx_PLLSAI2_Config>
 800138c:	e7eb      	b.n	8001366 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 800138e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8001392:	d004      	beq.n	800139e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001394:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8001398:	d1f1      	bne.n	800137e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800139a:	4635      	mov	r5, r6
 800139c:	e009      	b.n	80013b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800139e:	4a3b      	ldr	r2, [pc, #236]	; (800148c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80013a0:	68d3      	ldr	r3, [r2, #12]
 80013a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a6:	60d3      	str	r3, [r2, #12]
 80013a8:	e7f7      	b.n	800139a <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80013aa:	1d20      	adds	r0, r4, #4
 80013ac:	f7ff fe5c 	bl	8001068 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80013b0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80013b2:	2d00      	cmp	r5, #0
 80013b4:	d164      	bne.n	8001480 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80013b6:	4a35      	ldr	r2, [pc, #212]	; (800148c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80013b8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80013ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80013be:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80013c2:	430b      	orrs	r3, r1
 80013c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80013c8:	6823      	ldr	r3, [r4, #0]
 80013ca:	0399      	lsls	r1, r3, #14
 80013cc:	f140 815b 	bpl.w	8001686 <HAL_RCCEx_PeriphCLKConfig+0x372>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013d0:	4f2e      	ldr	r7, [pc, #184]	; (800148c <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80013d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013d4:	00da      	lsls	r2, r3, #3
 80013d6:	d455      	bmi.n	8001484 <HAL_RCCEx_PeriphCLKConfig+0x170>
      __HAL_RCC_PWR_CLK_ENABLE();
 80013d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013de:	65bb      	str	r3, [r7, #88]	; 0x58
 80013e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80013ea:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013ee:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8001490 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80013f2:	f8d9 3000 	ldr.w	r3, [r9]
 80013f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fa:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80013fe:	f7ff f899 	bl	8000534 <HAL_GetTick>
 8001402:	4682      	mov	sl, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001404:	f8d9 3000 	ldr.w	r3, [r9]
 8001408:	05db      	lsls	r3, r3, #23
 800140a:	d543      	bpl.n	8001494 <HAL_RCCEx_PeriphCLKConfig+0x180>
    if(ret == HAL_OK)
 800140c:	2d00      	cmp	r5, #0
 800140e:	d148      	bne.n	80014a2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001410:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001414:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001418:	d015      	beq.n	8001446 <HAL_RCCEx_PeriphCLKConfig+0x132>
 800141a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800141e:	4293      	cmp	r3, r2
 8001420:	d011      	beq.n	8001446 <HAL_RCCEx_PeriphCLKConfig+0x132>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001422:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001426:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800142a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800142e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001432:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800143a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800143e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001442:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001446:	07d8      	lsls	r0, r3, #31
 8001448:	d509      	bpl.n	800145e <HAL_RCCEx_PeriphCLKConfig+0x14a>
        tickstart = HAL_GetTick();
 800144a:	f7ff f873 	bl	8000534 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001452:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001454:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001458:	0799      	lsls	r1, r3, #30
 800145a:	f140 810d 	bpl.w	8001678 <HAL_RCCEx_PeriphCLKConfig+0x364>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800145e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001462:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800146a:	4313      	orrs	r3, r2
 800146c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001470:	4635      	mov	r5, r6
 8001472:	e016      	b.n	80014a2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001474:	2100      	movs	r1, #0
 8001476:	f104 0020 	add.w	r0, r4, #32
 800147a:	f7ff feab 	bl	80011d4 <RCCEx_PLLSAI2_Config>
 800147e:	e797      	b.n	80013b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8001480:	462e      	mov	r6, r5
 8001482:	e7a1      	b.n	80013c8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 8001484:	f04f 0800 	mov.w	r8, #0
 8001488:	e7b1      	b.n	80013ee <HAL_RCCEx_PeriphCLKConfig+0xda>
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000
 8001490:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001494:	f7ff f84e 	bl	8000534 <HAL_GetTick>
 8001498:	eba0 000a 	sub.w	r0, r0, sl
 800149c:	2802      	cmp	r0, #2
 800149e:	d9b1      	bls.n	8001404 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 80014a0:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80014a2:	f1b8 0f00 	cmp.w	r8, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ae:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	07da      	lsls	r2, r3, #31
 80014b4:	d508      	bpl.n	80014c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80014b6:	498a      	ldr	r1, [pc, #552]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80014b8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80014ba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80014be:	f022 0203 	bic.w	r2, r2, #3
 80014c2:	4302      	orrs	r2, r0
 80014c4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80014c8:	079f      	lsls	r7, r3, #30
 80014ca:	d508      	bpl.n	80014de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80014cc:	4984      	ldr	r1, [pc, #528]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80014ce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80014d0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80014d4:	f022 020c 	bic.w	r2, r2, #12
 80014d8:	4302      	orrs	r2, r0
 80014da:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80014de:	075e      	lsls	r6, r3, #29
 80014e0:	d508      	bpl.n	80014f4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80014e2:	497f      	ldr	r1, [pc, #508]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80014e4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80014e6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80014ea:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80014ee:	4302      	orrs	r2, r0
 80014f0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80014f4:	0718      	lsls	r0, r3, #28
 80014f6:	d508      	bpl.n	800150a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80014f8:	4979      	ldr	r1, [pc, #484]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80014fa:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80014fc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001500:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001504:	4302      	orrs	r2, r0
 8001506:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800150a:	06d9      	lsls	r1, r3, #27
 800150c:	d508      	bpl.n	8001520 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800150e:	4974      	ldr	r1, [pc, #464]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001510:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001512:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001516:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800151a:	4302      	orrs	r2, r0
 800151c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001520:	069a      	lsls	r2, r3, #26
 8001522:	d508      	bpl.n	8001536 <HAL_RCCEx_PeriphCLKConfig+0x222>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001524:	496e      	ldr	r1, [pc, #440]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001526:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001528:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800152c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001530:	4302      	orrs	r2, r0
 8001532:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001536:	059f      	lsls	r7, r3, #22
 8001538:	d508      	bpl.n	800154c <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800153a:	4969      	ldr	r1, [pc, #420]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800153c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800153e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001542:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001546:	4302      	orrs	r2, r0
 8001548:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800154c:	055e      	lsls	r6, r3, #21
 800154e:	d508      	bpl.n	8001562 <HAL_RCCEx_PeriphCLKConfig+0x24e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001550:	4963      	ldr	r1, [pc, #396]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001552:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001554:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001558:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800155c:	4302      	orrs	r2, r0
 800155e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001562:	0658      	lsls	r0, r3, #25
 8001564:	d508      	bpl.n	8001578 <HAL_RCCEx_PeriphCLKConfig+0x264>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001566:	495e      	ldr	r1, [pc, #376]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001568:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800156a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800156e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001572:	4302      	orrs	r2, r0
 8001574:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001578:	0619      	lsls	r1, r3, #24
 800157a:	d508      	bpl.n	800158e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800157c:	4958      	ldr	r1, [pc, #352]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800157e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001580:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001584:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001588:	4302      	orrs	r2, r0
 800158a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800158e:	05da      	lsls	r2, r3, #23
 8001590:	d508      	bpl.n	80015a4 <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001592:	4953      	ldr	r1, [pc, #332]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001596:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800159a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800159e:	4302      	orrs	r2, r0
 80015a0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80015a4:	049b      	lsls	r3, r3, #18
 80015a6:	d50f      	bpl.n	80015c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80015a8:	4a4d      	ldr	r2, [pc, #308]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80015aa:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80015ac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80015b0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80015b4:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80015b6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80015ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80015be:	d164      	bne.n	800168a <HAL_RCCEx_PeriphCLKConfig+0x376>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80015c0:	68d3      	ldr	r3, [r2, #12]
 80015c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015c6:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80015c8:	6823      	ldr	r3, [r4, #0]
 80015ca:	031f      	lsls	r7, r3, #12
 80015cc:	d50f      	bpl.n	80015ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80015ce:	4a44      	ldr	r2, [pc, #272]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80015d0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80015d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80015d6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80015da:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80015dc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80015e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80015e4:	d15c      	bne.n	80016a0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80015e6:	68d3      	ldr	r3, [r2, #12]
 80015e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015ec:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80015ee:	6823      	ldr	r3, [r4, #0]
 80015f0:	035e      	lsls	r6, r3, #13
 80015f2:	d50f      	bpl.n	8001614 <HAL_RCCEx_PeriphCLKConfig+0x300>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80015f4:	4a3a      	ldr	r2, [pc, #232]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80015f6:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80015f8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80015fc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001600:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001602:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001606:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800160a:	d154      	bne.n	80016b6 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800160c:	68d3      	ldr	r3, [r2, #12]
 800160e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001612:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001614:	6823      	ldr	r3, [r4, #0]
 8001616:	0458      	lsls	r0, r3, #17
 8001618:	d512      	bpl.n	8001640 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800161a:	4931      	ldr	r1, [pc, #196]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800161c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800161e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001622:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001626:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001628:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800162c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001630:	d14c      	bne.n	80016cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001632:	2102      	movs	r1, #2
 8001634:	1d20      	adds	r0, r4, #4
 8001636:	f7ff fd17 	bl	8001068 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800163a:	2800      	cmp	r0, #0
 800163c:	bf18      	it	ne
 800163e:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001640:	6822      	ldr	r2, [r4, #0]
 8001642:	0411      	lsls	r1, r2, #16
 8001644:	d508      	bpl.n	8001658 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001646:	4926      	ldr	r1, [pc, #152]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8001648:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800164a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800164e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001652:	4303      	orrs	r3, r0
 8001654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001658:	03d3      	lsls	r3, r2, #15
 800165a:	d509      	bpl.n	8001670 <HAL_RCCEx_PeriphCLKConfig+0x35c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800165c:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800165e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001662:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001666:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800166a:	430b      	orrs	r3, r1
 800166c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001670:	4628      	mov	r0, r5
 8001672:	b002      	add	sp, #8
 8001674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001678:	f7fe ff5c 	bl	8000534 <HAL_GetTick>
 800167c:	1b40      	subs	r0, r0, r5
 800167e:	4548      	cmp	r0, r9
 8001680:	f67f aee8 	bls.w	8001454 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8001684:	e70c      	b.n	80014a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8001686:	4635      	mov	r5, r6
 8001688:	e712      	b.n	80014b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800168a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800168e:	d19b      	bne.n	80015c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001690:	2101      	movs	r1, #1
 8001692:	1d20      	adds	r0, r4, #4
 8001694:	f7ff fce8 	bl	8001068 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001698:	2800      	cmp	r0, #0
 800169a:	bf18      	it	ne
 800169c:	4605      	movne	r5, r0
 800169e:	e793      	b.n	80015c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80016a0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80016a4:	d1a3      	bne.n	80015ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80016a6:	2101      	movs	r1, #1
 80016a8:	1d20      	adds	r0, r4, #4
 80016aa:	f7ff fcdd 	bl	8001068 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80016ae:	2800      	cmp	r0, #0
 80016b0:	bf18      	it	ne
 80016b2:	4605      	movne	r5, r0
 80016b4:	e79b      	b.n	80015ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80016b6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80016ba:	d1ab      	bne.n	8001614 <HAL_RCCEx_PeriphCLKConfig+0x300>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80016bc:	2101      	movs	r1, #1
 80016be:	1d20      	adds	r0, r4, #4
 80016c0:	f7ff fcd2 	bl	8001068 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80016c4:	2800      	cmp	r0, #0
 80016c6:	bf18      	it	ne
 80016c8:	4605      	movne	r5, r0
 80016ca:	e7a3      	b.n	8001614 <HAL_RCCEx_PeriphCLKConfig+0x300>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80016cc:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80016d0:	d1b6      	bne.n	8001640 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80016d2:	2102      	movs	r1, #2
 80016d4:	f104 0020 	add.w	r0, r4, #32
 80016d8:	f7ff fd7c 	bl	80011d4 <RCCEx_PLLSAI2_Config>
 80016dc:	e7ad      	b.n	800163a <HAL_RCCEx_PeriphCLKConfig+0x326>
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000

080016e4 <HAL_RNG_Init>:
  * @brief  Initialize the RNG peripheral and initialize the associated handle.
  * @param  hrng: pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{ 
 80016e4:	b510      	push	{r4, lr}
  /* Check the RNG handle allocation */
  if(hrng == NULL)
 80016e6:	4604      	mov	r4, r0
 80016e8:	b1b8      	cbz	r0, 800171a <HAL_RNG_Init+0x36>
    return HAL_ERROR;
  }
  
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance)); 
  
  __HAL_LOCK(hrng);
 80016ea:	7903      	ldrb	r3, [r0, #4]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d016      	beq.n	800171e <HAL_RNG_Init+0x3a>
 80016f0:	2301      	movs	r3, #1
 80016f2:	7103      	strb	r3, [r0, #4]
  
  if(hrng->State == HAL_RNG_STATE_RESET)
 80016f4:	7943      	ldrb	r3, [r0, #5]
 80016f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016fa:	b913      	cbnz	r3, 8001702 <HAL_RNG_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80016fc:	7102      	strb	r2, [r0, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80016fe:	f000 fd6f 	bl	80021e0 <HAL_RNG_MspInit>
  
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8001702:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8001704:	2302      	movs	r3, #2
 8001706:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 8001708:	6813      	ldr	r3, [r2, #0]
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
  
  __HAL_UNLOCK(hrng);
 8001710:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_READY;
 8001712:	2301      	movs	r3, #1
 8001714:	7163      	strb	r3, [r4, #5]
  __HAL_UNLOCK(hrng);
 8001716:	7120      	strb	r0, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8001718:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800171a:	2001      	movs	r0, #1
 800171c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hrng);
 800171e:	2002      	movs	r0, #2
}
 8001720:	bd10      	pop	{r4, pc}

08001722 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001722:	6802      	ldr	r2, [r0, #0]
{
 8001724:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001726:	68d3      	ldr	r3, [r2, #12]
 8001728:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800172c:	60d3      	str	r3, [r2, #12]
{
 800172e:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 8001730:	f7fe ff00 	bl	8000534 <HAL_GetTick>
 8001734:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001736:	6823      	ldr	r3, [r4, #0]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	069b      	lsls	r3, r3, #26
 800173c:	d501      	bpl.n	8001742 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800173e:	2000      	movs	r0, #0
 8001740:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001742:	f7fe fef7 	bl	8000534 <HAL_GetTick>
 8001746:	1b40      	subs	r0, r0, r5
 8001748:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800174c:	d9f3      	bls.n	8001736 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 800174e:	2003      	movs	r0, #3
}
 8001750:	bd38      	pop	{r3, r4, r5, pc}

08001752 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001752:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001754:	6803      	ldr	r3, [r0, #0]
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	0652      	lsls	r2, r2, #25
{
 800175a:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800175c:	d501      	bpl.n	8001762 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800175e:	2000      	movs	r0, #0
 8001760:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001762:	f04f 32ff 	mov.w	r2, #4294967295
 8001766:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001768:	f7fe fee4 	bl	8000534 <HAL_GetTick>
 800176c:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800176e:	6823      	ldr	r3, [r4, #0]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	065b      	lsls	r3, r3, #25
 8001774:	d4f3      	bmi.n	800175e <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8001776:	f7fe fedd 	bl	8000534 <HAL_GetTick>
 800177a:	1b40      	subs	r0, r0, r5
 800177c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001780:	d9f5      	bls.n	800176e <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001782:	2003      	movs	r0, #3
}
 8001784:	bd38      	pop	{r3, r4, r5, pc}

08001786 <HAL_RTC_Init>:
{
 8001786:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8001788:	4604      	mov	r4, r0
 800178a:	b1d8      	cbz	r0, 80017c4 <HAL_RTC_Init+0x3e>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800178c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001790:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001794:	b91b      	cbnz	r3, 800179e <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 8001796:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 800179a:	f000 fd37 	bl	800220c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800179e:	2302      	movs	r3, #2
 80017a0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80017a4:	6823      	ldr	r3, [r4, #0]
 80017a6:	22ca      	movs	r2, #202	; 0xca
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24
 80017aa:	2253      	movs	r2, #83	; 0x53
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80017ae:	4620      	mov	r0, r4
 80017b0:	f7ff ffcf 	bl	8001752 <RTC_EnterInitMode>
 80017b4:	6823      	ldr	r3, [r4, #0]
 80017b6:	4605      	mov	r5, r0
 80017b8:	b130      	cbz	r0, 80017c8 <HAL_RTC_Init+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80017ba:	22ff      	movs	r2, #255	; 0xff
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80017be:	2304      	movs	r3, #4
 80017c0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
     return HAL_ERROR;
 80017c4:	2501      	movs	r5, #1
 80017c6:	e031      	b.n	800182c <HAL_RTC_Init+0xa6>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80017c8:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80017ca:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80017cc:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80017d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017d4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80017d6:	6862      	ldr	r2, [r4, #4]
 80017d8:	6899      	ldr	r1, [r3, #8]
 80017da:	4302      	orrs	r2, r0
 80017dc:	69a0      	ldr	r0, [r4, #24]
 80017de:	4302      	orrs	r2, r0
 80017e0:	430a      	orrs	r2, r1
 80017e2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80017e4:	68e2      	ldr	r2, [r4, #12]
 80017e6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80017e8:	691a      	ldr	r2, [r3, #16]
 80017ea:	68a1      	ldr	r1, [r4, #8]
 80017ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80017f0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017f8:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	069b      	lsls	r3, r3, #26
 80017fe:	d405      	bmi.n	800180c <HAL_RTC_Init+0x86>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001800:	4620      	mov	r0, r4
 8001802:	f7ff ff8e 	bl	8001722 <HAL_RTC_WaitForSynchro>
 8001806:	b108      	cbz	r0, 800180c <HAL_RTC_Init+0x86>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001808:	6823      	ldr	r3, [r4, #0]
 800180a:	e7d6      	b.n	80017ba <HAL_RTC_Init+0x34>
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800180c:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800180e:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8001810:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001812:	f022 0203 	bic.w	r2, r2, #3
 8001816:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001818:	69e2      	ldr	r2, [r4, #28]
 800181a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800181c:	4302      	orrs	r2, r0
 800181e:	430a      	orrs	r2, r1
 8001820:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001822:	22ff      	movs	r2, #255	; 0xff
 8001824:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8001826:	2301      	movs	r3, #1
 8001828:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800182c:	4628      	mov	r0, r5
 800182e:	bd38      	pop	{r3, r4, r5, pc}

08001830 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8001830:	2300      	movs	r3, #0

  while(Value >= 10)
 8001832:	2809      	cmp	r0, #9
 8001834:	d803      	bhi.n	800183e <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10;
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8001836:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 800183a:	b2c0      	uxtb	r0, r0
 800183c:	4770      	bx	lr
    Value -= 10;
 800183e:	380a      	subs	r0, #10
    bcdhigh++;
 8001840:	3301      	adds	r3, #1
    Value -= 10;
 8001842:	b2c0      	uxtb	r0, r0
 8001844:	e7f5      	b.n	8001832 <RTC_ByteToBcd2+0x2>

08001846 <HAL_RTC_SetTime>:
{
 8001846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8001848:	f890 3020 	ldrb.w	r3, [r0, #32]
 800184c:	2b01      	cmp	r3, #1
{
 800184e:	4606      	mov	r6, r0
 8001850:	460f      	mov	r7, r1
 8001852:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hrtc);
 8001856:	d033      	beq.n	80018c0 <HAL_RTC_SetTime+0x7a>
 8001858:	2301      	movs	r3, #1
 800185a:	f880 3020 	strb.w	r3, [r0, #32]
 800185e:	6803      	ldr	r3, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001860:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
 8001864:	7808      	ldrb	r0, [r1, #0]
 8001866:	784d      	ldrb	r5, [r1, #1]
 8001868:	788c      	ldrb	r4, [r1, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800186a:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 800186c:	bb52      	cbnz	r2, 80018c4 <HAL_RTC_SetTime+0x7e>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800186e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00;
 8001872:	bf08      	it	eq
 8001874:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8001876:	f7ff ffdb 	bl	8001830 <RTC_ByteToBcd2>
 800187a:	4601      	mov	r1, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800187c:	4628      	mov	r0, r5
 800187e:	f7ff ffd7 	bl	8001830 <RTC_ByteToBcd2>
 8001882:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001884:	4620      	mov	r0, r4
 8001886:	f7ff ffd3 	bl	8001830 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));
 800188a:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800188c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001890:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001894:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001898:	6833      	ldr	r3, [r6, #0]
 800189a:	22ca      	movs	r2, #202	; 0xca
 800189c:	625a      	str	r2, [r3, #36]	; 0x24
 800189e:	2253      	movs	r2, #83	; 0x53
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80018a2:	4630      	mov	r0, r6
 80018a4:	f7ff ff55 	bl	8001752 <RTC_EnterInitMode>
 80018a8:	6833      	ldr	r3, [r6, #0]
 80018aa:	4605      	mov	r5, r0
 80018ac:	b1b8      	cbz	r0, 80018de <HAL_RTC_SetTime+0x98>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80018ae:	22ff      	movs	r2, #255	; 0xff
 80018b0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80018b2:	2304      	movs	r3, #4
 80018b4:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 80018b8:	2300      	movs	r3, #0
 80018ba:	f886 3020 	strb.w	r3, [r6, #32]
        return HAL_ERROR;
 80018be:	2501      	movs	r5, #1
}
 80018c0:	4628      	mov	r0, r5
 80018c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80018c4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
              ((uint32_t)(sTime->Minutes) << 8) | \
 80018c8:	ea4f 2505 	mov.w	r5, r5, lsl #8
      sTime->TimeFormat = 0x00;
 80018cc:	bf08      	it	eq
 80018ce:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80018d0:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80018d4:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16));
 80018d6:	78cc      	ldrb	r4, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80018d8:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80018dc:	e7dc      	b.n	8001898 <HAL_RTC_SetTime+0x52>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80018de:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 80018e2:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 80018e6:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80018e8:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80018ea:	6938      	ldr	r0, [r7, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80018ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018f0:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	6899      	ldr	r1, [r3, #8]
 80018f6:	4302      	orrs	r2, r0
 80018f8:	430a      	orrs	r2, r1
 80018fa:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001902:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	069b      	lsls	r3, r3, #26
 8001908:	d40c      	bmi.n	8001924 <HAL_RTC_SetTime+0xde>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800190a:	4630      	mov	r0, r6
 800190c:	f7ff ff09 	bl	8001722 <HAL_RTC_WaitForSynchro>
 8001910:	b140      	cbz	r0, 8001924 <HAL_RTC_SetTime+0xde>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001912:	6833      	ldr	r3, [r6, #0]
 8001914:	22ff      	movs	r2, #255	; 0xff
 8001916:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001918:	2304      	movs	r3, #4
 800191a:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 800191e:	f886 5020 	strb.w	r5, [r6, #32]
 8001922:	e7cc      	b.n	80018be <HAL_RTC_SetTime+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001924:	6833      	ldr	r3, [r6, #0]
 8001926:	22ff      	movs	r2, #255	; 0xff
 8001928:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 800192a:	2301      	movs	r3, #1
 800192c:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
   __HAL_UNLOCK(hrtc); 
 8001930:	2300      	movs	r3, #0
 8001932:	f886 3020 	strb.w	r3, [r6, #32]
   return HAL_OK;
 8001936:	e7c3      	b.n	80018c0 <HAL_RTC_SetTime+0x7a>

08001938 <HAL_RTC_SetDate>:
{
 8001938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 800193a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800193e:	2b01      	cmp	r3, #1
{
 8001940:	4605      	mov	r5, r0
 8001942:	f04f 0602 	mov.w	r6, #2
 __HAL_LOCK(hrtc);
 8001946:	d034      	beq.n	80019b2 <HAL_RTC_SetDate+0x7a>
 8001948:	2301      	movs	r3, #1
 800194a:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800194e:	f880 6021 	strb.w	r6, [r0, #33]	; 0x21
 8001952:	784b      	ldrb	r3, [r1, #1]
 8001954:	78c8      	ldrb	r0, [r1, #3]
 8001956:	788e      	ldrb	r6, [r1, #2]
 8001958:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800195a:	2a00      	cmp	r2, #0
 800195c:	d14e      	bne.n	80019fc <HAL_RTC_SetDate+0xc4>
 800195e:	06da      	lsls	r2, r3, #27
 8001960:	d503      	bpl.n	800196a <HAL_RTC_SetDate+0x32>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001962:	f023 0310 	bic.w	r3, r3, #16
 8001966:	330a      	adds	r3, #10
 8001968:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800196a:	f7ff ff61 	bl	8001830 <RTC_ByteToBcd2>
 800196e:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8001970:	7848      	ldrb	r0, [r1, #1]
 8001972:	f7ff ff5d 	bl	8001830 <RTC_ByteToBcd2>
 8001976:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001978:	4630      	mov	r0, r6
 800197a:	f7ff ff59 	bl	8001830 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800197e:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8001982:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001986:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800198a:	682b      	ldr	r3, [r5, #0]
 800198c:	22ca      	movs	r2, #202	; 0xca
 800198e:	625a      	str	r2, [r3, #36]	; 0x24
 8001990:	2253      	movs	r2, #83	; 0x53
 8001992:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001994:	4628      	mov	r0, r5
 8001996:	f7ff fedc 	bl	8001752 <RTC_EnterInitMode>
 800199a:	682b      	ldr	r3, [r5, #0]
 800199c:	4606      	mov	r6, r0
 800199e:	b150      	cbz	r0, 80019b6 <HAL_RTC_SetDate+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019a0:	22ff      	movs	r2, #255	; 0xff
 80019a2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80019a4:	2304      	movs	r3, #4
 80019a6:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 80019aa:	2300      	movs	r3, #0
 80019ac:	f885 3020 	strb.w	r3, [r5, #32]
        return HAL_ERROR;
 80019b0:	2601      	movs	r6, #1
}
 80019b2:	4630      	mov	r0, r6
 80019b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80019b6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80019ba:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 80019be:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019c6:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	069b      	lsls	r3, r3, #26
 80019cc:	d40c      	bmi.n	80019e8 <HAL_RTC_SetDate+0xb0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80019ce:	4628      	mov	r0, r5
 80019d0:	f7ff fea7 	bl	8001722 <HAL_RTC_WaitForSynchro>
 80019d4:	b140      	cbz	r0, 80019e8 <HAL_RTC_SetDate+0xb0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80019d6:	682b      	ldr	r3, [r5, #0]
 80019d8:	22ff      	movs	r2, #255	; 0xff
 80019da:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80019dc:	2304      	movs	r3, #4
 80019de:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 80019e2:	f885 6020 	strb.w	r6, [r5, #32]
 80019e6:	e7e3      	b.n	80019b0 <HAL_RTC_SetDate+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019e8:	682b      	ldr	r3, [r5, #0]
 80019ea:	22ff      	movs	r2, #255	; 0xff
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80019ee:	2301      	movs	r3, #1
 80019f0:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 80019f4:	2300      	movs	r3, #0
 80019f6:	f885 3020 	strb.w	r3, [r5, #32]
    return HAL_OK;
 80019fa:	e7da      	b.n	80019b2 <HAL_RTC_SetDate+0x7a>
                  (((uint32_t)sDate->Month) << 8) | \
 80019fc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80019fe:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8) | \
 8001a02:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8001a04:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8001a08:	e7bf      	b.n	800198a <HAL_RTC_SetDate+0x52>

08001a0a <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8001a0a:	6803      	ldr	r3, [r0, #0]
 8001a0c:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8001a0e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8001a12:	4770      	bx	lr

08001a14 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8001a14:	6803      	ldr	r3, [r0, #0]
 8001a16:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8001a18:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8001a1c:	4770      	bx	lr
	...

08001a20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a22:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret               = HAL_OK;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if(UART_INSTANCE_LOWPOWER(huart))
 8001a24:	6805      	ldr	r5, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a26:	6921      	ldr	r1, [r4, #16]
 8001a28:	68a3      	ldr	r3, [r4, #8]
 8001a2a:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001a2c:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a2e:	430b      	orrs	r3, r1
 8001a30:	6961      	ldr	r1, [r4, #20]
 8001a32:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001a34:	49b0      	ldr	r1, [pc, #704]	; (8001cf8 <UART_SetConfig+0x2d8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a36:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001a38:	4001      	ands	r1, r0
 8001a3a:	430b      	orrs	r3, r1
 8001a3c:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a3e:	686b      	ldr	r3, [r5, #4]
 8001a40:	68e1      	ldr	r1, [r4, #12]
 8001a42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a46:	430b      	orrs	r3, r1
 8001a48:	606b      	str	r3, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001a4a:	4bac      	ldr	r3, [pc, #688]	; (8001cfc <UART_SetConfig+0x2dc>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001a4c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001a4e:	429d      	cmp	r5, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001a50:	bf1c      	itt	ne
 8001a52:	6a23      	ldrne	r3, [r4, #32]
 8001a54:	4319      	orrne	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001a56:	68ab      	ldr	r3, [r5, #8]
 8001a58:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001a5c:	430b      	orrs	r3, r1
 8001a5e:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a60:	4ba7      	ldr	r3, [pc, #668]	; (8001d00 <UART_SetConfig+0x2e0>)
 8001a62:	429d      	cmp	r5, r3
 8001a64:	d118      	bne.n	8001a98 <UART_SetConfig+0x78>
 8001a66:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001a6a:	49a6      	ldr	r1, [pc, #664]	; (8001d04 <UART_SetConfig+0x2e4>)
 8001a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a70:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a74:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001a78:	5ccb      	ldrb	r3, [r1, r3]
 8001a7a:	f040 80c6 	bne.w	8001c0a <UART_SetConfig+0x1ea>
  {
    switch (clocksource)
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d828      	bhi.n	8001ad4 <UART_SetConfig+0xb4>
 8001a82:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001a86:	011a      	.short	0x011a
 8001a88:	012f00bf 	.word	0x012f00bf
 8001a8c:	01140027 	.word	0x01140027
 8001a90:	00270027 	.word	0x00270027
 8001a94:	00330027 	.word	0x00330027
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001a98:	4b9b      	ldr	r3, [pc, #620]	; (8001d08 <UART_SetConfig+0x2e8>)
 8001a9a:	429d      	cmp	r5, r3
 8001a9c:	d107      	bne.n	8001aae <UART_SetConfig+0x8e>
 8001a9e:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001aa2:	499a      	ldr	r1, [pc, #616]	; (8001d0c <UART_SetConfig+0x2ec>)
 8001aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	e7e2      	b.n	8001a74 <UART_SetConfig+0x54>
 8001aae:	4b98      	ldr	r3, [pc, #608]	; (8001d10 <UART_SetConfig+0x2f0>)
 8001ab0:	429d      	cmp	r5, r3
 8001ab2:	d120      	bne.n	8001af6 <UART_SetConfig+0xd6>
 8001ab4:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001abc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001ac0:	2b10      	cmp	r3, #16
 8001ac2:	f000 80f1 	beq.w	8001ca8 <UART_SetConfig+0x288>
 8001ac6:	d808      	bhi.n	8001ada <UART_SetConfig+0xba>
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80f3 	beq.w	8001cb4 <UART_SetConfig+0x294>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ace:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ad2:	d134      	bne.n	8001b3e <UART_SetConfig+0x11e>
    case UART_CLOCKSOURCE_LSE:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8001ad4:	2201      	movs	r2, #1
  uint16_t usartdiv                   = 0x0000;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	e0f9      	b.n	8001cce <UART_SetConfig+0x2ae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ada:	2b20      	cmp	r3, #32
 8001adc:	f000 80ff 	beq.w	8001cde <UART_SetConfig+0x2be>
 8001ae0:	2b30      	cmp	r3, #48	; 0x30
 8001ae2:	d1f4      	bne.n	8001ace <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ae4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ae8:	f040 80c1 	bne.w	8001c6e <UART_SetConfig+0x24e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001aec:	6860      	ldr	r0, [r4, #4]
 8001aee:	0843      	lsrs	r3, r0, #1
 8001af0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001af4:	e0fc      	b.n	8001cf0 <UART_SetConfig+0x2d0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001af6:	4b87      	ldr	r3, [pc, #540]	; (8001d14 <UART_SetConfig+0x2f4>)
 8001af8:	429d      	cmp	r5, r3
 8001afa:	d122      	bne.n	8001b42 <UART_SetConfig+0x122>
 8001afc:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8001b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001b08:	2b40      	cmp	r3, #64	; 0x40
 8001b0a:	f000 80c0 	beq.w	8001c8e <UART_SetConfig+0x26e>
 8001b0e:	d806      	bhi.n	8001b1e <UART_SetConfig+0xfe>
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80b1 	beq.w	8001c78 <UART_SetConfig+0x258>
  if(UART_INSTANCE_LOWPOWER(huart))
 8001b16:	4b79      	ldr	r3, [pc, #484]	; (8001cfc <UART_SetConfig+0x2dc>)
 8001b18:	429d      	cmp	r5, r3
 8001b1a:	d1d8      	bne.n	8001ace <UART_SetConfig+0xae>
 8001b1c:	e00f      	b.n	8001b3e <UART_SetConfig+0x11e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b1e:	2b80      	cmp	r3, #128	; 0x80
 8001b20:	f000 80bc 	beq.w	8001c9c <UART_SetConfig+0x27c>
 8001b24:	2bc0      	cmp	r3, #192	; 0xc0
 8001b26:	d1f6      	bne.n	8001b16 <UART_SetConfig+0xf6>
  if(UART_INSTANCE_LOWPOWER(huart))
 8001b28:	4b74      	ldr	r3, [pc, #464]	; (8001cfc <UART_SetConfig+0x2dc>)
 8001b2a:	429d      	cmp	r5, r3
 8001b2c:	d1da      	bne.n	8001ae4 <UART_SetConfig+0xc4>
 8001b2e:	2308      	movs	r3, #8
      tmpreg = (uint32_t) LSE_VALUE;
 8001b30:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8001b34:	6862      	ldr	r2, [r4, #4]
 8001b36:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8001b3a:	4281      	cmp	r1, r0
 8001b3c:	d92b      	bls.n	8001b96 <UART_SetConfig+0x176>
    case UART_CLOCKSOURCE_LSE:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8001b3e:	2201      	movs	r2, #1
      break;
    }
  }

  return ret;
 8001b40:	e04b      	b.n	8001bda <UART_SetConfig+0x1ba>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b42:	4b75      	ldr	r3, [pc, #468]	; (8001d18 <UART_SetConfig+0x2f8>)
 8001b44:	429d      	cmp	r5, r3
 8001b46:	d111      	bne.n	8001b6c <UART_SetConfig+0x14c>
 8001b48:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8001b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b58:	f000 8099 	beq.w	8001c8e <UART_SetConfig+0x26e>
 8001b5c:	d9d8      	bls.n	8001b10 <UART_SetConfig+0xf0>
 8001b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b62:	f000 809b 	beq.w	8001c9c <UART_SetConfig+0x27c>
 8001b66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b6a:	e7dc      	b.n	8001b26 <UART_SetConfig+0x106>
 8001b6c:	4b63      	ldr	r3, [pc, #396]	; (8001cfc <UART_SetConfig+0x2dc>)
 8001b6e:	429d      	cmp	r5, r3
 8001b70:	d1ad      	bne.n	8001ace <UART_SetConfig+0xae>
 8001b72:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8001b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b82:	f000 8084 	beq.w	8001c8e <UART_SetConfig+0x26e>
 8001b86:	d9c3      	bls.n	8001b10 <UART_SetConfig+0xf0>
 8001b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b8c:	f000 8086 	beq.w	8001c9c <UART_SetConfig+0x27c>
 8001b90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001b94:	e7c7      	b.n	8001b26 <UART_SetConfig+0x106>
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8001b96:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001b9a:	d8d0      	bhi.n	8001b3e <UART_SetConfig+0x11e>
        switch (clocksource)
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d82f      	bhi.n	8001c00 <UART_SetConfig+0x1e0>
 8001ba0:	e8df f003 	tbb	[pc, r3]
 8001ba4:	2e1d2e05 	.word	0x2e1d2e05
 8001ba8:	2e2e2e25 	.word	0x2e2e2e25
 8001bac:	28          	.byte	0x28
 8001bad:	00          	.byte	0x00
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001bae:	f7ff fa2b 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001bb2:	6862      	ldr	r2, [r4, #4]
 8001bb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bb8:	0856      	lsrs	r6, r2, #1
 8001bba:	2700      	movs	r7, #0
 8001bbc:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	4630      	mov	r0, r6
 8001bc4:	4639      	mov	r1, r7
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001bc6:	f7fe faff 	bl	80001c8 <__aeabi_uldivmod>
          break;
 8001bca:	2200      	movs	r2, #0
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8001bcc:	4b53      	ldr	r3, [pc, #332]	; (8001d1c <UART_SetConfig+0x2fc>)
 8001bce:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001bd2:	4299      	cmp	r1, r3
 8001bd4:	d8b3      	bhi.n	8001b3e <UART_SetConfig+0x11e>
           huart->Instance->BRR = tmpreg;
 8001bd6:	6823      	ldr	r3, [r4, #0]
 8001bd8:	60d8      	str	r0, [r3, #12]

}
 8001bda:	4610      	mov	r0, r2
 8001bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001bde:	4850      	ldr	r0, [pc, #320]	; (8001d20 <UART_SetConfig+0x300>)
 8001be0:	0855      	lsrs	r5, r2, #1
 8001be2:	2300      	movs	r3, #0
 8001be4:	2100      	movs	r1, #0
 8001be6:	1940      	adds	r0, r0, r5
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001be8:	f141 0100 	adc.w	r1, r1, #0
 8001bec:	e7eb      	b.n	8001bc6 <UART_SetConfig+0x1a6>
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001bee:	f7fe fe75 	bl	80008dc <HAL_RCC_GetSysClockFreq>
 8001bf2:	e7de      	b.n	8001bb2 <UART_SetConfig+0x192>
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001bf4:	0850      	lsrs	r0, r2, #1
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001bfe:	e7f3      	b.n	8001be8 <UART_SetConfig+0x1c8>
          ret = HAL_ERROR;
 8001c00:	2201      	movs	r2, #1
 8001c02:	e7e3      	b.n	8001bcc <UART_SetConfig+0x1ac>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001c04:	f7ff fa18 	bl	8001038 <HAL_RCC_GetPCLK2Freq>
 8001c08:	e059      	b.n	8001cbe <UART_SetConfig+0x29e>
    switch (clocksource)
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d897      	bhi.n	8001b3e <UART_SetConfig+0x11e>
 8001c0e:	a201      	add	r2, pc, #4	; (adr r2, 8001c14 <UART_SetConfig+0x1f4>)
 8001c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c14:	08001c39 	.word	0x08001c39
 8001c18:	08001c4d 	.word	0x08001c4d
 8001c1c:	08001c53 	.word	0x08001c53
 8001c20:	08001b3f 	.word	0x08001b3f
 8001c24:	08001c69 	.word	0x08001c69
 8001c28:	08001b3f 	.word	0x08001b3f
 8001c2c:	08001b3f 	.word	0x08001b3f
 8001c30:	08001b3f 	.word	0x08001b3f
 8001c34:	08001c6f 	.word	0x08001c6f
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001c38:	f7ff f9e6 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c3c:	6863      	ldr	r3, [r4, #4]
 8001c3e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001c42:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c46:	b280      	uxth	r0, r0
 8001c48:	60e8      	str	r0, [r5, #12]
 8001c4a:	e01e      	b.n	8001c8a <UART_SetConfig+0x26a>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001c4c:	f7ff f9f4 	bl	8001038 <HAL_RCC_GetPCLK2Freq>
 8001c50:	e7f4      	b.n	8001c3c <UART_SetConfig+0x21c>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001c52:	6862      	ldr	r2, [r4, #4]
 8001c54:	0853      	lsrs	r3, r2, #1
 8001c56:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001c5a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001c5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	60eb      	str	r3, [r5, #12]
 8001c66:	e010      	b.n	8001c8a <UART_SetConfig+0x26a>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c68:	f7fe fe38 	bl	80008dc <HAL_RCC_GetSysClockFreq>
 8001c6c:	e7e6      	b.n	8001c3c <UART_SetConfig+0x21c>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001c6e:	6862      	ldr	r2, [r4, #4]
 8001c70:	0853      	lsrs	r3, r2, #1
 8001c72:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c76:	e7f2      	b.n	8001c5e <UART_SetConfig+0x23e>
  if(UART_INSTANCE_LOWPOWER(huart))
 8001c78:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <UART_SetConfig+0x2dc>)
 8001c7a:	429d      	cmp	r5, r3
 8001c7c:	d11a      	bne.n	8001cb4 <UART_SetConfig+0x294>
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8001c7e:	f7ff f9c3 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
      break;
 8001c82:	2300      	movs	r3, #0
    if (tmpreg != 0)
 8001c84:	2800      	cmp	r0, #0
 8001c86:	f47f af55 	bne.w	8001b34 <UART_SetConfig+0x114>
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c8a:	2200      	movs	r2, #0
      break;
 8001c8c:	e7a5      	b.n	8001bda <UART_SetConfig+0x1ba>
  if(UART_INSTANCE_LOWPOWER(huart))
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <UART_SetConfig+0x2dc>)
 8001c90:	429d      	cmp	r5, r3
 8001c92:	d109      	bne.n	8001ca8 <UART_SetConfig+0x288>
      tmpreg = HAL_RCC_GetSysClockFreq();
 8001c94:	f7fe fe22 	bl	80008dc <HAL_RCC_GetSysClockFreq>
      break;
 8001c98:	2304      	movs	r3, #4
 8001c9a:	e7f3      	b.n	8001c84 <UART_SetConfig+0x264>
  if(UART_INSTANCE_LOWPOWER(huart))
 8001c9c:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <UART_SetConfig+0x2dc>)
 8001c9e:	429d      	cmp	r5, r3
 8001ca0:	d11d      	bne.n	8001cde <UART_SetConfig+0x2be>
 8001ca2:	2302      	movs	r3, #2
      tmpreg = (uint32_t) HSI_VALUE;
 8001ca4:	481f      	ldr	r0, [pc, #124]	; (8001d24 <UART_SetConfig+0x304>)
 8001ca6:	e745      	b.n	8001b34 <UART_SetConfig+0x114>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ca8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001cac:	d1dc      	bne.n	8001c68 <UART_SetConfig+0x248>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001cae:	f7fe fe15 	bl	80008dc <HAL_RCC_GetSysClockFreq>
 8001cb2:	e004      	b.n	8001cbe <UART_SetConfig+0x29e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cb4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001cb8:	d1be      	bne.n	8001c38 <UART_SetConfig+0x218>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001cba:	f7ff f9a5 	bl	8001008 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001cbe:	6861      	ldr	r1, [r4, #4]
 8001cc0:	084a      	lsrs	r2, r1, #1
 8001cc2:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001cc6:	fbb3 f3f1 	udiv	r3, r3, r1
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001cca:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ccc:	2200      	movs	r2, #0
    brrtemp = usartdiv & 0xFFF0;
 8001cce:	f023 010f 	bic.w	r1, r3, #15
    huart->Instance->BRR = brrtemp;
 8001cd2:	6820      	ldr	r0, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8001cd4:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001cd8:	430b      	orrs	r3, r1
 8001cda:	60c3      	str	r3, [r0, #12]
 8001cdc:	e77d      	b.n	8001bda <UART_SetConfig+0x1ba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cde:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ce2:	d1b6      	bne.n	8001c52 <UART_SetConfig+0x232>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001ce4:	6860      	ldr	r0, [r4, #4]
 8001ce6:	0843      	lsrs	r3, r0, #1
 8001ce8:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001cec:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001cf0:	fbb3 f3f0 	udiv	r3, r3, r0
 8001cf4:	e7e9      	b.n	8001cca <UART_SetConfig+0x2aa>
 8001cf6:	bf00      	nop
 8001cf8:	efff69f3 	.word	0xefff69f3
 8001cfc:	40008000 	.word	0x40008000
 8001d00:	40013800 	.word	0x40013800
 8001d04:	080023b0 	.word	0x080023b0
 8001d08:	40004400 	.word	0x40004400
 8001d0c:	080023b4 	.word	0x080023b4
 8001d10:	40004800 	.word	0x40004800
 8001d14:	40004c00 	.word	0x40004c00
 8001d18:	40005000 	.word	0x40005000
 8001d1c:	000ffcff 	.word	0x000ffcff
 8001d20:	f4240000 	.word	0xf4240000
 8001d24:	00f42400 	.word	0x00f42400

08001d28 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001d28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d2a:	07da      	lsls	r2, r3, #31
{
 8001d2c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001d2e:	d506      	bpl.n	8001d3e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001d30:	6801      	ldr	r1, [r0, #0]
 8001d32:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001d34:	684a      	ldr	r2, [r1, #4]
 8001d36:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001d3a:	4322      	orrs	r2, r4
 8001d3c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001d3e:	079c      	lsls	r4, r3, #30
 8001d40:	d506      	bpl.n	8001d50 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001d42:	6801      	ldr	r1, [r0, #0]
 8001d44:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001d46:	684a      	ldr	r2, [r1, #4]
 8001d48:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d4c:	4322      	orrs	r2, r4
 8001d4e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001d50:	0759      	lsls	r1, r3, #29
 8001d52:	d506      	bpl.n	8001d62 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001d54:	6801      	ldr	r1, [r0, #0]
 8001d56:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001d58:	684a      	ldr	r2, [r1, #4]
 8001d5a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d5e:	4322      	orrs	r2, r4
 8001d60:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001d62:	071a      	lsls	r2, r3, #28
 8001d64:	d506      	bpl.n	8001d74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001d66:	6801      	ldr	r1, [r0, #0]
 8001d68:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001d6a:	684a      	ldr	r2, [r1, #4]
 8001d6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d70:	4322      	orrs	r2, r4
 8001d72:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001d74:	06dc      	lsls	r4, r3, #27
 8001d76:	d506      	bpl.n	8001d86 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001d78:	6801      	ldr	r1, [r0, #0]
 8001d7a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001d7c:	688a      	ldr	r2, [r1, #8]
 8001d7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d82:	4322      	orrs	r2, r4
 8001d84:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001d86:	0699      	lsls	r1, r3, #26
 8001d88:	d506      	bpl.n	8001d98 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001d8a:	6801      	ldr	r1, [r0, #0]
 8001d8c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001d8e:	688a      	ldr	r2, [r1, #8]
 8001d90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d94:	4322      	orrs	r2, r4
 8001d96:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001d98:	065a      	lsls	r2, r3, #25
 8001d9a:	d50f      	bpl.n	8001dbc <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001d9c:	6801      	ldr	r1, [r0, #0]
 8001d9e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001da0:	684a      	ldr	r2, [r1, #4]
 8001da2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001da6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001da8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001dac:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001dae:	d105      	bne.n	8001dbc <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001db0:	684a      	ldr	r2, [r1, #4]
 8001db2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001db4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001db8:	4322      	orrs	r2, r4
 8001dba:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001dbc:	061b      	lsls	r3, r3, #24
 8001dbe:	d506      	bpl.n	8001dce <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001dc0:	6802      	ldr	r2, [r0, #0]
 8001dc2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001dc4:	6853      	ldr	r3, [r2, #4]
 8001dc6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001dca:	430b      	orrs	r3, r1
 8001dcc:	6053      	str	r3, [r2, #4]
 8001dce:	bd10      	pop	{r4, pc}

08001dd0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dd4:	9d06      	ldr	r5, [sp, #24]
 8001dd6:	4604      	mov	r4, r0
 8001dd8:	460f      	mov	r7, r1
 8001dda:	4616      	mov	r6, r2
 8001ddc:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dde:	6821      	ldr	r1, [r4, #0]
 8001de0:	69ca      	ldr	r2, [r1, #28]
 8001de2:	ea37 0302 	bics.w	r3, r7, r2
 8001de6:	bf0c      	ite	eq
 8001de8:	2201      	moveq	r2, #1
 8001dea:	2200      	movne	r2, #0
 8001dec:	42b2      	cmp	r2, r6
 8001dee:	d002      	beq.n	8001df6 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001df0:	2000      	movs	r0, #0
}
 8001df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001df6:	1c6b      	adds	r3, r5, #1
 8001df8:	d0f2      	beq.n	8001de0 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001dfa:	b99d      	cbnz	r5, 8001e24 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e04:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	f022 0201 	bic.w	r2, r2, #1
 8001e0c:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001e0e:	2320      	movs	r3, #32
 8001e10:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001e14:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001e1e:	2003      	movs	r0, #3
 8001e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001e24:	f7fe fb86 	bl	8000534 <HAL_GetTick>
 8001e28:	eba0 0008 	sub.w	r0, r0, r8
 8001e2c:	4285      	cmp	r5, r0
 8001e2e:	d2d6      	bcs.n	8001dde <UART_WaitOnFlagUntilTimeout+0xe>
 8001e30:	e7e4      	b.n	8001dfc <UART_WaitOnFlagUntilTimeout+0x2c>

08001e32 <UART_CheckIdleState>:
{
 8001e32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e34:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e36:	2600      	movs	r6, #0
 8001e38:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001e3a:	f7fe fb7b 	bl	8000534 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e3e:	6823      	ldr	r3, [r4, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001e44:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e46:	d417      	bmi.n	8001e78 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001e48:	6823      	ldr	r3, [r4, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	075b      	lsls	r3, r3, #29
 8001e4e:	d50a      	bpl.n	8001e66 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	2200      	movs	r2, #0
 8001e58:	462b      	mov	r3, r5
 8001e5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f7ff ffb6 	bl	8001dd0 <UART_WaitOnFlagUntilTimeout>
 8001e64:	b9a0      	cbnz	r0, 8001e90 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001e66:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001e68:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001e6a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001e6e:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001e72:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001e76:	e00c      	b.n	8001e92 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	4632      	mov	r2, r6
 8001e80:	4603      	mov	r3, r0
 8001e82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001e86:	4620      	mov	r0, r4
 8001e88:	f7ff ffa2 	bl	8001dd0 <UART_WaitOnFlagUntilTimeout>
 8001e8c:	2800      	cmp	r0, #0
 8001e8e:	d0db      	beq.n	8001e48 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001e90:	2003      	movs	r0, #3
}
 8001e92:	b002      	add	sp, #8
 8001e94:	bd70      	pop	{r4, r5, r6, pc}

08001e96 <HAL_UART_Init>:
{
 8001e96:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001e98:	4604      	mov	r4, r0
 8001e9a:	b360      	cbz	r0, 8001ef6 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001e9c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001ea0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ea4:	b91b      	cbnz	r3, 8001eae <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001ea6:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001eaa:	f000 f9bf 	bl	800222c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001eae:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001eb0:	2324      	movs	r3, #36	; 0x24
 8001eb2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001eb6:	6813      	ldr	r3, [r2, #0]
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f7ff fdae 	bl	8001a20 <UART_SetConfig>
 8001ec4:	2801      	cmp	r0, #1
 8001ec6:	d016      	beq.n	8001ef6 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001eca:	b113      	cbz	r3, 8001ed2 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f7ff ff2b 	bl	8001d28 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ed2:	6823      	ldr	r3, [r4, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001eda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ee2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001eea:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001eec:	601a      	str	r2, [r3, #0]
}
 8001eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001ef2:	f7ff bf9e 	b.w	8001e32 <UART_CheckIdleState>
}
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	bd10      	pop	{r4, pc}
	...

08001efc <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001efc:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability 
    */
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001efe:	4a2f      	ldr	r2, [pc, #188]	; (8001fbc <SystemClock_Config+0xc0>)
 8001f00:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
{
 8001f04:	b0b9      	sub	sp, #228	; 0xe4
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001f06:	f023 0318 	bic.w	r3, r3, #24
 8001f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001f0e:	2306      	movs	r3, #6
 8001f10:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001f12:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f14:	2402      	movs	r4, #2
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f16:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f18:	f44f 7780 	mov.w	r7, #256	; 0x100
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001f1c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001f1e:	2607      	movs	r6, #7
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001f20:	230a      	movs	r3, #10
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f22:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001f24:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f26:	9708      	str	r7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f28:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f2a:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001f2c:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001f2e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001f30:	9613      	str	r6, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f32:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f34:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f36:	f7fe fd67 	bl	8000a08 <HAL_RCC_OscConfig>
 8001f3a:	b100      	cbz	r0, 8001f3e <SystemClock_Config+0x42>
 8001f3c:	e7fe      	b.n	8001f3c <SystemClock_Config+0x40>

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f3e:	220f      	movs	r2, #15
 8001f40:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f42:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f44:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f46:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f48:	2104      	movs	r1, #4
 8001f4a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f4c:	e88d 000c 	stmia.w	sp, {r2, r3}
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f50:	f7fe ff98 	bl	8000e84 <HAL_RCC_ClockConfig>
 8001f54:	b100      	cbz	r0, 8001f58 <SystemClock_Config+0x5c>
 8001f56:	e7fe      	b.n	8001f56 <SystemClock_Config+0x5a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8001f58:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <SystemClock_Config+0xc4>)
 8001f5a:	9316      	str	r3, [sp, #88]	; 0x58
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RNG;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001f5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f60:	9333      	str	r3, [sp, #204]	; 0xcc
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8001f62:	230c      	movs	r3, #12
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f64:	9024      	str	r0, [sp, #144]	; 0x90
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f66:	9025      	str	r0, [sp, #148]	; 0x94
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001f68:	9518      	str	r5, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8001f6a:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8001f6c:	2504      	movs	r5, #4
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001f6e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f72:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f74:	9737      	str	r7, [sp, #220]	; 0xdc
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001f76:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001f78:	961a      	str	r6, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8001f7a:	951b      	str	r5, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001f7c:	941c      	str	r4, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001f7e:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f80:	f7ff f9c8 	bl	8001314 <HAL_RCCEx_PeriphCLKConfig>
 8001f84:	b100      	cbz	r0, 8001f88 <SystemClock_Config+0x8c>
 8001f86:	e7fe      	b.n	8001f86 <SystemClock_Config+0x8a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f88:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f8c:	f7fe fc30 	bl	80007f0 <HAL_PWREx_ControlVoltageScaling>
 8001f90:	4604      	mov	r4, r0
 8001f92:	b100      	cbz	r0, 8001f96 <SystemClock_Config+0x9a>
 8001f94:	e7fe      	b.n	8001f94 <SystemClock_Config+0x98>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001f96:	f7ff f831 	bl	8000ffc <HAL_RCC_GetHCLKFreq>
 8001f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f9e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001fa2:	f7fe fb13 	bl	80005cc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001fa6:	4628      	mov	r0, r5
 8001fa8:	f7fe fb26 	bl	80005f8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001fac:	4622      	mov	r2, r4
 8001fae:	4621      	mov	r1, r4
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb4:	f7fe fad6 	bl	8000564 <HAL_NVIC_SetPriority>
}
 8001fb8:	b039      	add	sp, #228	; 0xe4
 8001fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	00060003 	.word	0x00060003

08001fc4 <main>:
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8001fc8:	f7fe fa9a 	bl	8000500 <HAL_Init>
  SystemClock_Config();
 8001fcc:	f7ff ff96 	bl	8001efc <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd0:	4b55      	ldr	r3, [pc, #340]	; (8002128 <main+0x164>)
 8001fd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fd4:	f042 0204 	orr.w	r2, r2, #4
 8001fd8:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fdc:	f002 0204 	and.w	r2, r2, #4
 8001fe0:	9201      	str	r2, [sp, #4]
 8001fe2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fe4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fe6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fea:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fee:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001ff2:	9202      	str	r2, [sp, #8]
 8001ff4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ff8:	f042 0201 	orr.w	r2, r2, #1
 8001ffc:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002000:	f002 0201 	and.w	r2, r2, #1
 8002004:	9203      	str	r2, [sp, #12]
 8002006:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002008:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800200a:	f042 0202 	orr.w	r2, r2, #2
 800200e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002012:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002018:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800201a:	2120      	movs	r1, #32
 800201c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002020:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002022:	f7fe fbd7 	bl	80007d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002026:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 800202c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800202e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002030:	4b3e      	ldr	r3, [pc, #248]	; (800212c <main+0x168>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002032:	483f      	ldr	r0, [pc, #252]	; (8002130 <main+0x16c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002034:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	9407      	str	r4, [sp, #28]

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002038:	2601      	movs	r6, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800203a:	f7fe faef 	bl	800061c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 800203e:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002044:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = LD2_Pin;
 8002046:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002048:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800204e:	f7fe fae5 	bl	800061c <HAL_GPIO_Init>
  hrng.Instance = RNG;
 8002052:	4838      	ldr	r0, [pc, #224]	; (8002134 <main+0x170>)
 8002054:	4b38      	ldr	r3, [pc, #224]	; (8002138 <main+0x174>)
 8002056:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002058:	f7ff fb44 	bl	80016e4 <HAL_RNG_Init>
 800205c:	b100      	cbz	r0, 8002060 <main+0x9c>
 800205e:	e7fe      	b.n	800205e <main+0x9a>
  hrtc.Instance = RTC;
 8002060:	4c36      	ldr	r4, [pc, #216]	; (800213c <main+0x178>)
 8002062:	4b37      	ldr	r3, [pc, #220]	; (8002140 <main+0x17c>)
 8002064:	6023      	str	r3, [r4, #0]
  hrtc.Init.AsynchPrediv = 127;
 8002066:	237f      	movs	r3, #127	; 0x7f
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002068:	6060      	str	r0, [r4, #4]
  hrtc.Init.AsynchPrediv = 127;
 800206a:	60a3      	str	r3, [r4, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800206c:	6120      	str	r0, [r4, #16]
  hrtc.Init.SynchPrediv = 255;
 800206e:	23ff      	movs	r3, #255	; 0xff
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002070:	6160      	str	r0, [r4, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002072:	61a0      	str	r0, [r4, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002074:	61e0      	str	r0, [r4, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002076:	4620      	mov	r0, r4
  hrtc.Init.SynchPrediv = 255;
 8002078:	60e3      	str	r3, [r4, #12]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800207a:	f7ff fb84 	bl	8001786 <HAL_RTC_Init>
 800207e:	4605      	mov	r5, r0
 8002080:	b100      	cbz	r0, 8002084 <main+0xc0>
 8002082:	e7fe      	b.n	8002082 <main+0xbe>
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 8002084:	4601      	mov	r1, r0
 8002086:	4620      	mov	r0, r4
 8002088:	f7ff fcc4 	bl	8001a14 <HAL_RTCEx_BKUPRead>
 800208c:	f243 27f2 	movw	r7, #13042	; 0x32f2
 8002090:	42b8      	cmp	r0, r7
 8002092:	d022      	beq.n	80020da <main+0x116>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002094:	462a      	mov	r2, r5
 8002096:	a905      	add	r1, sp, #20
 8002098:	4620      	mov	r0, r4
  sTime.Hours = 0;
 800209a:	f88d 5014 	strb.w	r5, [sp, #20]
  sTime.Minutes = 0;
 800209e:	f88d 5015 	strb.w	r5, [sp, #21]
  sTime.Seconds = 0;
 80020a2:	f88d 5016 	strb.w	r5, [sp, #22]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020a6:	9508      	str	r5, [sp, #32]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020a8:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80020aa:	f7ff fbcc 	bl	8001846 <HAL_RTC_SetTime>
 80020ae:	4602      	mov	r2, r0
 80020b0:	b100      	cbz	r0, 80020b4 <main+0xf0>
 80020b2:	e7fe      	b.n	80020b2 <main+0xee>
  sDate.Year = 0;
 80020b4:	f88d 0003 	strb.w	r0, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80020b8:	4669      	mov	r1, sp
 80020ba:	4620      	mov	r0, r4
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80020bc:	f88d 6000 	strb.w	r6, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 80020c0:	f88d 6001 	strb.w	r6, [sp, #1]
  sDate.Date = 1;
 80020c4:	f88d 6002 	strb.w	r6, [sp, #2]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80020c8:	f7ff fc36 	bl	8001938 <HAL_RTC_SetDate>
 80020cc:	4601      	mov	r1, r0
 80020ce:	b100      	cbz	r0, 80020d2 <main+0x10e>
 80020d0:	e7fe      	b.n	80020d0 <main+0x10c>
    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 80020d2:	463a      	mov	r2, r7
 80020d4:	4620      	mov	r0, r4
 80020d6:	f7ff fc98 	bl	8001a0a <HAL_RTCEx_BKUPWrite>
  huart2.Instance = USART2;
 80020da:	481a      	ldr	r0, [pc, #104]	; (8002144 <main+0x180>)
  huart2.Init.BaudRate = 115200;
 80020dc:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <main+0x184>)
 80020de:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
 80020e2:	e880 0028 	stmia.w	r0, {r3, r5}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020e6:	240c      	movs	r4, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020e8:	2300      	movs	r3, #0
 80020ea:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020ec:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020ee:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020f0:	6144      	str	r4, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020f6:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020f8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020fa:	f7ff fecc 	bl	8001e96 <HAL_UART_Init>
 80020fe:	b100      	cbz	r0, 8002102 <main+0x13e>
 8002100:	e7fe      	b.n	8002100 <main+0x13c>
  huart1.Instance = USART1;
 8002102:	4b12      	ldr	r3, [pc, #72]	; (800214c <main+0x188>)
 8002104:	4a12      	ldr	r2, [pc, #72]	; (8002150 <main+0x18c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002106:	6098      	str	r0, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002108:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800210a:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800210c:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800210e:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002110:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002112:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002114:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 115200;
 8002116:	e883 0024 	stmia.w	r3, {r2, r5}
  huart1.Init.Mode = UART_MODE_TX_RX;
 800211a:	615c      	str	r4, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800211c:	f7ff febb 	bl	8001e96 <HAL_UART_Init>
 8002120:	b100      	cbz	r0, 8002124 <main+0x160>
 8002122:	e7fe      	b.n	8002122 <main+0x15e>
 8002124:	e7fe      	b.n	8002124 <main+0x160>
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000
 800212c:	10210000 	.word	0x10210000
 8002130:	48000800 	.word	0x48000800
 8002134:	200000b8 	.word	0x200000b8
 8002138:	50060800 	.word	0x50060800
 800213c:	20000094 	.word	0x20000094
 8002140:	40002800 	.word	0x40002800
 8002144:	200000c4 	.word	0x200000c4
 8002148:	40004400 	.word	0x40004400
 800214c:	20000024 	.word	0x20000024
 8002150:	40013800 	.word	0x40013800

08002154 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002154:	4b21      	ldr	r3, [pc, #132]	; (80021dc <HAL_MspInit+0x88>)
{
 8002156:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002158:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	661a      	str	r2, [r3, #96]	; 0x60
 8002160:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002162:	f002 0201 	and.w	r2, r2, #1
 8002166:	9200      	str	r2, [sp, #0]
 8002168:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800216c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002170:	659a      	str	r2, [r3, #88]	; 0x58
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002178:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800217a:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 800217c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800217e:	f7fe f9df 	bl	8000540 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	4611      	mov	r1, r2
 8002186:	f06f 000b 	mvn.w	r0, #11
 800218a:	f7fe f9eb 	bl	8000564 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800218e:	2200      	movs	r2, #0
 8002190:	4611      	mov	r1, r2
 8002192:	f06f 000a 	mvn.w	r0, #10
 8002196:	f7fe f9e5 	bl	8000564 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800219a:	2200      	movs	r2, #0
 800219c:	4611      	mov	r1, r2
 800219e:	f06f 0009 	mvn.w	r0, #9
 80021a2:	f7fe f9df 	bl	8000564 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	4611      	mov	r1, r2
 80021aa:	f06f 0004 	mvn.w	r0, #4
 80021ae:	f7fe f9d9 	bl	8000564 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80021b2:	2200      	movs	r2, #0
 80021b4:	4611      	mov	r1, r2
 80021b6:	f06f 0003 	mvn.w	r0, #3
 80021ba:	f7fe f9d3 	bl	8000564 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	4611      	mov	r1, r2
 80021c2:	f06f 0001 	mvn.w	r0, #1
 80021c6:	f7fe f9cd 	bl	8000564 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	4611      	mov	r1, r2
 80021ce:	f04f 30ff 	mov.w	r0, #4294967295
 80021d2:	f7fe f9c7 	bl	8000564 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d6:	b003      	add	sp, #12
 80021d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80021dc:	40021000 	.word	0x40021000

080021e0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{

  if(hrng->Instance==RNG)
 80021e0:	6802      	ldr	r2, [r0, #0]
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_RNG_MspInit+0x28>)
 80021e4:	429a      	cmp	r2, r3
{
 80021e6:	b082      	sub	sp, #8
  if(hrng->Instance==RNG)
 80021e8:	d10c      	bne.n	8002204 <HAL_RNG_MspInit+0x24>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80021ea:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80021ee:	f5a3 337e 	sub.w	r3, r3, #260096	; 0x3f800
 80021f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021f4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80021f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80021fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002200:	9301      	str	r3, [sp, #4]
 8002202:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002204:	b002      	add	sp, #8
 8002206:	4770      	bx	lr
 8002208:	50060800 	.word	0x50060800

0800220c <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 800220c:	6802      	ldr	r2, [r0, #0]
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_RTC_MspInit+0x18>)
 8002210:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002212:	bf01      	itttt	eq
 8002214:	4a04      	ldreq	r2, [pc, #16]	; (8002228 <HAL_RTC_MspInit+0x1c>)
 8002216:	f8d2 3090 	ldreq.w	r3, [r2, #144]	; 0x90
 800221a:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 800221e:	f8c2 3090 	streq.w	r3, [r2, #144]	; 0x90
 8002222:	4770      	bx	lr
 8002224:	40002800 	.word	0x40002800
 8002228:	40021000 	.word	0x40021000

0800222c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800222c:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800222e:	6803      	ldr	r3, [r0, #0]
 8002230:	4a19      	ldr	r2, [pc, #100]	; (8002298 <HAL_UART_MspInit+0x6c>)
 8002232:	4293      	cmp	r3, r2
{
 8002234:	b089      	sub	sp, #36	; 0x24
  if(huart->Instance==USART1)
 8002236:	d11c      	bne.n	8002272 <HAL_UART_MspInit+0x46>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002238:	4b18      	ldr	r3, [pc, #96]	; (800229c <HAL_UART_MspInit+0x70>)
 800223a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800223c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002240:	661a      	str	r2, [r3, #96]	; 0x60
 8002242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002248:	9301      	str	r3, [sp, #4]
 800224a:	9b01      	ldr	r3, [sp, #4]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800224c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002250:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002256:	2301      	movs	r3, #1
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225a:	2303      	movs	r3, #3
 800225c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002260:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002266:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002268:	f7fe f9d8 	bl	800061c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800226c:	b009      	add	sp, #36	; 0x24
 800226e:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(huart->Instance==USART2)
 8002272:	4a0b      	ldr	r2, [pc, #44]	; (80022a0 <HAL_UART_MspInit+0x74>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d1f9      	bne.n	800226c <HAL_UART_MspInit+0x40>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002278:	4b08      	ldr	r3, [pc, #32]	; (800229c <HAL_UART_MspInit+0x70>)
 800227a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800227c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002280:	659a      	str	r2, [r3, #88]	; 0x58
 8002282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002288:	9302      	str	r3, [sp, #8]
 800228a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800228c:	230c      	movs	r3, #12
 800228e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002290:	2302      	movs	r3, #2
 8002292:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	e7df      	b.n	8002258 <HAL_UART_MspInit+0x2c>
 8002298:	40013800 	.word	0x40013800
 800229c:	40021000 	.word	0x40021000
 80022a0:	40004400 	.word	0x40004400

080022a4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80022a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022a6:	f7fe f93d 	bl	8000524 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80022ae:	f7fe b9b0 	b.w	8000612 <HAL_SYSTICK_IRQHandler>
	...

080022b4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022b4:	490f      	ldr	r1, [pc, #60]	; (80022f4 <SystemInit+0x40>)
 80022b6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80022ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80022c2:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <SystemInit+0x44>)
 80022c4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80022c6:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80022c8:	f042 0201 	orr.w	r2, r2, #1
 80022cc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80022ce:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80022d6:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80022da:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 80022dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022e0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022e8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80022ea:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80022f0:	608b      	str	r3, [r1, #8]
 80022f2:	4770      	bx	lr
 80022f4:	e000ed00 	.word	0xe000ed00
 80022f8:	40021000 	.word	0x40021000

080022fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002334 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002300:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002302:	e003      	b.n	800230c <LoopCopyDataInit>

08002304 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002306:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002308:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800230a:	3104      	adds	r1, #4

0800230c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800230c:	480b      	ldr	r0, [pc, #44]	; (800233c <LoopForever+0xa>)
	ldr	r3, =_edata
 800230e:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002310:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002312:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002314:	d3f6      	bcc.n	8002304 <CopyDataInit>
	ldr	r2, =_sbss
 8002316:	4a0b      	ldr	r2, [pc, #44]	; (8002344 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002318:	e002      	b.n	8002320 <LoopFillZerobss>

0800231a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800231a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800231c:	f842 3b04 	str.w	r3, [r2], #4

08002320 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <LoopForever+0x16>)
	cmp	r2, r3
 8002322:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002324:	d3f9      	bcc.n	800231a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002326:	f7ff ffc5 	bl	80022b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800232a:	f000 f811 	bl	8002350 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800232e:	f7ff fe49 	bl	8001fc4 <main>

08002332 <LoopForever>:

LoopForever:
    b LoopForever
 8002332:	e7fe      	b.n	8002332 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002334:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002338:	0800241c 	.word	0x0800241c
	ldr	r0, =_sdata
 800233c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002340:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8002344:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8002348:	20000134 	.word	0x20000134

0800234c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800234c:	e7fe      	b.n	800234c <ADC1_2_IRQHandler>
	...

08002350 <__libc_init_array>:
 8002350:	b570      	push	{r4, r5, r6, lr}
 8002352:	4e0d      	ldr	r6, [pc, #52]	; (8002388 <__libc_init_array+0x38>)
 8002354:	4c0d      	ldr	r4, [pc, #52]	; (800238c <__libc_init_array+0x3c>)
 8002356:	1ba4      	subs	r4, r4, r6
 8002358:	10a4      	asrs	r4, r4, #2
 800235a:	2500      	movs	r5, #0
 800235c:	42a5      	cmp	r5, r4
 800235e:	d109      	bne.n	8002374 <__libc_init_array+0x24>
 8002360:	4e0b      	ldr	r6, [pc, #44]	; (8002390 <__libc_init_array+0x40>)
 8002362:	4c0c      	ldr	r4, [pc, #48]	; (8002394 <__libc_init_array+0x44>)
 8002364:	f000 f818 	bl	8002398 <_init>
 8002368:	1ba4      	subs	r4, r4, r6
 800236a:	10a4      	asrs	r4, r4, #2
 800236c:	2500      	movs	r5, #0
 800236e:	42a5      	cmp	r5, r4
 8002370:	d105      	bne.n	800237e <__libc_init_array+0x2e>
 8002372:	bd70      	pop	{r4, r5, r6, pc}
 8002374:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002378:	4798      	blx	r3
 800237a:	3501      	adds	r5, #1
 800237c:	e7ee      	b.n	800235c <__libc_init_array+0xc>
 800237e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002382:	4798      	blx	r3
 8002384:	3501      	adds	r5, #1
 8002386:	e7f2      	b.n	800236e <__libc_init_array+0x1e>
 8002388:	08002414 	.word	0x08002414
 800238c:	08002414 	.word	0x08002414
 8002390:	08002414 	.word	0x08002414
 8002394:	08002418 	.word	0x08002418

08002398 <_init>:
 8002398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800239a:	bf00      	nop
 800239c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800239e:	bc08      	pop	{r3}
 80023a0:	469e      	mov	lr, r3
 80023a2:	4770      	bx	lr

080023a4 <_fini>:
 80023a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023a6:	bf00      	nop
 80023a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023aa:	bc08      	pop	{r3}
 80023ac:	469e      	mov	lr, r3
 80023ae:	4770      	bx	lr
